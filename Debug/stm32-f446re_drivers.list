
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000229c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800246c  0800246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002594  08002594  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002594  08002594  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000006c  08002608  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002608  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002609  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000711  00000000  00000000  000226a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00022db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00022f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c40  00000000  00000000  000230f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a15  00000000  00000000  00025d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000af1a  00000000  00000000  00027745  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003265f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001140  00000000  00000000  000326dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002454 	.word	0x08002454

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08002454 	.word	0x08002454

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <delay>:
#define LED_PIN 		9

/*
 * PUPD LED control
 */
void delay(int value) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e002      	b.n	80002d4 <delay+0x14>
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d3f8      	bcc.n	80002ce <delay+0xe>
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <SPI2_GPIO_Init>:
 * PB13	= SPI2_SCLK
 * PB14 = SPI2_MISO
 * PB15 = SPI2_MOSI
 * Alt Func mode = 5
 */
void SPI2_GPIO_Init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOB_Handle;
	memset(&GPIOB_Handle, 0 , sizeof(GPIO_Handle_t));
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	220c      	movs	r2, #12
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 feb5 	bl	8001064 <memset>
	GPIOB_Handle.pGPIOx = GPIOB;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <SPI2_GPIO_Init+0x64>)
 80002fc:	607b      	str	r3, [r7, #4]

	GPIOB_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002fe:	2302      	movs	r3, #2
 8000300:	727b      	strb	r3, [r7, #9]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinAltFuncMode = 5;
 8000302:	2305      	movs	r3, #5
 8000304:	737b      	strb	r3, [r7, #13]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSH_PULL;
 8000306:	2300      	movs	r3, #0
 8000308:	733b      	strb	r3, [r7, #12]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 800030a:	2301      	movs	r3, #1
 800030c:	72fb      	strb	r3, [r7, #11]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030e:	2302      	movs	r3, #2
 8000310:	72bb      	strb	r3, [r7, #10]

	// NSS
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000312:	230c      	movs	r3, #12
 8000314:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fb53 	bl	80009c4 <GPIO_Init>

	// SCLK
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800031e:	230d      	movs	r3, #13
 8000320:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fb4d 	bl	80009c4 <GPIO_Init>

	// MISO
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800032a:	230e      	movs	r3, #14
 800032c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fb47 	bl	80009c4 <GPIO_Init>

	// MOSI
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000336:	230f      	movs	r3, #15
 8000338:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fb41 	bl	80009c4 <GPIO_Init>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40020400 	.word	0x40020400

08000350 <SPI2_Init>:

void SPI2_Init(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;
	memset(&SPI2_Handle, 0 , sizeof(SPI_Handle_t));
 8000356:	463b      	mov	r3, r7
 8000358:	2220      	movs	r2, #32
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fe81 	bl	8001064 <memset>
	SPI2_Handle.pSPIx = SPI2;
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <SPI2_Init+0x44>)
 8000364:	603b      	str	r3, [r7, #0]

	SPI2_Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_DUPLEX;
 8000366:	2300      	movs	r3, #0
 8000368:	717b      	strb	r3, [r7, #5]
	SPI2_Handle.SPI_Config.SPI_DataFrameFormat = SPI_DATA_FRAME_8_BIT;
 800036a:	2300      	movs	r3, #0
 800036c:	71fb      	strb	r3, [r7, #7]
	SPI2_Handle.SPI_Config.SPI_SoftwareSlaveManagement = SPI_SOFTWARE_SLAVE_DISABLE;
 800036e:	2300      	movs	r3, #0
 8000370:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_SerialClkSpeed = SPI_SCLK_FPCLK_16;
 8000372:	2303      	movs	r3, #3
 8000374:	71bb      	strb	r3, [r7, #6]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000376:	2300      	movs	r3, #0
 8000378:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800037a:	2300      	movs	r3, #0
 800037c:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800037e:	2301      	movs	r3, #1
 8000380:	713b      	strb	r3, [r7, #4]

	SPI_Init(&SPI2_Handle);
 8000382:	463b      	mov	r3, r7
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fd39 	bl	8000dfc <SPI_Init>
}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40003800 	.word	0x40003800

08000398 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	220c      	movs	r2, #12
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fe5d 	bl	8001064 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <GPIO_Button_Init+0x38>)
 80003ac:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80003ae:	230d      	movs	r3, #13
 80003b0:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80003b2:	2300      	movs	r3, #0
 80003b4:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003b6:	2302      	movs	r3, #2
 80003b8:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 faff 	bl	80009c4 <GPIO_Init>
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020800 	.word	0x40020800

080003d4 <SPI_VerifyResponse>:
int SPI_VerifyResponse(uint8_t response_byte){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	if (response_byte == 0xF5) {
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2bf5      	cmp	r3, #245	; 0xf5
 80003e2:	d101      	bne.n	80003e8 <SPI_VerifyResponse+0x14>
		//ack
		return 1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	e000      	b.n	80003ea <SPI_VerifyResponse+0x16>
	}
	return 0;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <main>:
int main(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 80003fe:	23ff      	movs	r3, #255	; 0xff
 8000400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t dummy_read;

	// initialization
	initialise_monitor_handles();
 8000404:	f001 ffac 	bl	8002360 <initialise_monitor_handles>
	printf("Semihosting successful\n");
 8000408:	48d5      	ldr	r0, [pc, #852]	; (8000760 <main+0x368>)
 800040a:	f000 fea7 	bl	800115c <puts>
	GPIO_Button_Init();
 800040e:	f7ff ffc3 	bl	8000398 <GPIO_Button_Init>
	SPI2_GPIO_Init();
 8000412:	f7ff ff69 	bl	80002e8 <SPI2_GPIO_Init>
	SPI2_Init();
 8000416:	f7ff ff9b 	bl	8000350 <SPI2_Init>
	SPI_SSOEConfig(SPI2, ENABLE);
 800041a:	2101      	movs	r1, #1
 800041c:	48d1      	ldr	r0, [pc, #836]	; (8000764 <main+0x36c>)
 800041e:	f000 fdda 	bl	8000fd6 <SPI_SSOEConfig>

	while (1) {
		// wait till button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 8000422:	bf00      	nop
 8000424:	210d      	movs	r1, #13
 8000426:	48d0      	ldr	r0, [pc, #832]	; (8000768 <main+0x370>)
 8000428:	f000 fc66 	bl	8000cf8 <GPIO_ReadFromInputPin>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1f8      	bne.n	8000424 <main+0x2c>
		delay(500000);
 8000432:	48ce      	ldr	r0, [pc, #824]	; (800076c <main+0x374>)
 8000434:	f7ff ff44 	bl	80002c0 <delay>

		SPI_PeripheralControl(SPI2, ENABLE);
 8000438:	2101      	movs	r1, #1
 800043a:	48ca      	ldr	r0, [pc, #808]	; (8000764 <main+0x36c>)
 800043c:	f000 fdaf 	bl	8000f9e <SPI_PeripheralControl>

		// 1. CMD_LED_CTRL		<pin no(1)>		<value(1)>
		uint8_t command_code = CMD_LED_CTRL;
 8000440:	2350      	movs	r3, #80	; 0x50
 8000442:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		uint8_t ack_byte;
		uint8_t args[2];

		SPI_SendData(SPI2, &command_code, 1);
 8000446:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	48c5      	ldr	r0, [pc, #788]	; (8000764 <main+0x36c>)
 8000450:	f000 fd2b 	bl	8000eaa <SPI_SendData>
		// dummy read to clear the RXbuffer
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000454:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	48c1      	ldr	r0, [pc, #772]	; (8000764 <main+0x36c>)
 800045e:	f000 fd57 	bl	8000f10 <SPI_ReceiveData>
		// send dummy data to get a response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000462:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	48be      	ldr	r0, [pc, #760]	; (8000764 <main+0x36c>)
 800046c:	f000 fd1d 	bl	8000eaa <SPI_SendData>
		// then call receive
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 8000470:	f107 0320 	add.w	r3, r7, #32
 8000474:	2201      	movs	r2, #1
 8000476:	4619      	mov	r1, r3
 8000478:	48ba      	ldr	r0, [pc, #744]	; (8000764 <main+0x36c>)
 800047a:	f000 fd49 	bl	8000f10 <SPI_ReceiveData>

		if (SPI_VerifyResponse(ack_byte)) {
 800047e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffa6 	bl	80003d4 <SPI_VerifyResponse>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d00a      	beq.n	80004a4 <main+0xac>
			args[0] = LED_PIN;
 800048e:	2309      	movs	r3, #9
 8000490:	773b      	strb	r3, [r7, #28]
			args[1] = LED_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	777b      	strb	r3, [r7, #29]

			// send arguments
			SPI_SendData(SPI2, args, 2);
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	2202      	movs	r2, #2
 800049c:	4619      	mov	r1, r3
 800049e:	48b1      	ldr	r0, [pc, #708]	; (8000764 <main+0x36c>)
 80004a0:	f000 fd03 	bl	8000eaa <SPI_SendData>
		}
		// end of CMD_LED_CTRL

		// 2. CMD_SENSOR_READ
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 80004a4:	bf00      	nop
 80004a6:	210d      	movs	r1, #13
 80004a8:	48af      	ldr	r0, [pc, #700]	; (8000768 <main+0x370>)
 80004aa:	f000 fc25 	bl	8000cf8 <GPIO_ReadFromInputPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d1f8      	bne.n	80004a6 <main+0xae>
		delay(500000);
 80004b4:	48ad      	ldr	r0, [pc, #692]	; (800076c <main+0x374>)
 80004b6:	f7ff ff03 	bl	80002c0 <delay>

		command_code = CMD_SENSOR_READ;
 80004ba:	2351      	movs	r3, #81	; 0x51
 80004bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		SPI_SendData(SPI2, &command_code, 1);
 80004c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	48a6      	ldr	r0, [pc, #664]	; (8000764 <main+0x36c>)
 80004ca:	f000 fcee 	bl	8000eaa <SPI_SendData>
		// dummy read to clear the RXbuffer
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004ce:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80004d2:	2201      	movs	r2, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	48a3      	ldr	r0, [pc, #652]	; (8000764 <main+0x36c>)
 80004d8:	f000 fd1a 	bl	8000f10 <SPI_ReceiveData>
		// send dummy data to get a response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80004dc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80004e0:	2201      	movs	r2, #1
 80004e2:	4619      	mov	r1, r3
 80004e4:	489f      	ldr	r0, [pc, #636]	; (8000764 <main+0x36c>)
 80004e6:	f000 fce0 	bl	8000eaa <SPI_SendData>
		// then call receive
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	489c      	ldr	r0, [pc, #624]	; (8000764 <main+0x36c>)
 80004f4:	f000 fd0c 	bl	8000f10 <SPI_ReceiveData>

		if (SPI_VerifyResponse(ack_byte)) {
 80004f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff69 	bl	80003d4 <SPI_VerifyResponse>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d024      	beq.n	8000552 <main+0x15a>
			args[0] = ANALOG_PIN0;
 8000508:	2300      	movs	r3, #0
 800050a:	773b      	strb	r3, [r7, #28]

			// send arguments
			SPI_SendData(SPI2, args, 1);
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	4893      	ldr	r0, [pc, #588]	; (8000764 <main+0x36c>)
 8000516:	f000 fcc8 	bl	8000eaa <SPI_SendData>
			// dummy read to clear the RXbuffer
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 800051a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	4890      	ldr	r0, [pc, #576]	; (8000764 <main+0x36c>)
 8000524:	f000 fcf4 	bl	8000f10 <SPI_ReceiveData>
			delay(500000);
 8000528:	4890      	ldr	r0, [pc, #576]	; (800076c <main+0x374>)
 800052a:	f7ff fec9 	bl	80002c0 <delay>
			// send dummy data to get a response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 800052e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	488b      	ldr	r0, [pc, #556]	; (8000764 <main+0x36c>)
 8000538:	f000 fcb7 	bl	8000eaa <SPI_SendData>
			// read from the analog pin
			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 800053c:	1cfb      	adds	r3, r7, #3
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	4888      	ldr	r0, [pc, #544]	; (8000764 <main+0x36c>)
 8000544:	f000 fce4 	bl	8000f10 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	4619      	mov	r1, r3
 800054c:	4888      	ldr	r0, [pc, #544]	; (8000770 <main+0x378>)
 800054e:	f000 fd91 	bl	8001074 <iprintf>

		}
		// end of CMD_SENSOR_READ

		// 3. CMD_LED_READ
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 8000552:	bf00      	nop
 8000554:	210d      	movs	r1, #13
 8000556:	4884      	ldr	r0, [pc, #528]	; (8000768 <main+0x370>)
 8000558:	f000 fbce 	bl	8000cf8 <GPIO_ReadFromInputPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1f8      	bne.n	8000554 <main+0x15c>
		delay(500000);
 8000562:	4882      	ldr	r0, [pc, #520]	; (800076c <main+0x374>)
 8000564:	f7ff feac 	bl	80002c0 <delay>

		command_code = CMD_LED_READ;
 8000568:	2352      	movs	r3, #82	; 0x52
 800056a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		SPI_SendData(SPI2, &command_code, 1);
 800056e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	487b      	ldr	r0, [pc, #492]	; (8000764 <main+0x36c>)
 8000578:	f000 fc97 	bl	8000eaa <SPI_SendData>
		// dummy read to clear the RXbuffer
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800057c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	4877      	ldr	r0, [pc, #476]	; (8000764 <main+0x36c>)
 8000586:	f000 fcc3 	bl	8000f10 <SPI_ReceiveData>
		// send dummy data to get a response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800058a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	4874      	ldr	r0, [pc, #464]	; (8000764 <main+0x36c>)
 8000594:	f000 fc89 	bl	8000eaa <SPI_SendData>
		// then call receive
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	4870      	ldr	r0, [pc, #448]	; (8000764 <main+0x36c>)
 80005a2:	f000 fcb5 	bl	8000f10 <SPI_ReceiveData>

		if (SPI_VerifyResponse(ack_byte)) {
 80005a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff12 	bl	80003d4 <SPI_VerifyResponse>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d024      	beq.n	8000600 <main+0x208>
			args[0] = LED_PIN;
 80005b6:	2309      	movs	r3, #9
 80005b8:	773b      	strb	r3, [r7, #28]

			// send arguments
			SPI_SendData(SPI2, args, 1);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	4868      	ldr	r0, [pc, #416]	; (8000764 <main+0x36c>)
 80005c4:	f000 fc71 	bl	8000eaa <SPI_SendData>
			// dummy read to clear the RXbuffer
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005c8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	4864      	ldr	r0, [pc, #400]	; (8000764 <main+0x36c>)
 80005d2:	f000 fc9d 	bl	8000f10 <SPI_ReceiveData>
			delay(900000);
 80005d6:	4867      	ldr	r0, [pc, #412]	; (8000774 <main+0x37c>)
 80005d8:	f7ff fe72 	bl	80002c0 <delay>
			// send dummy data to get a response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 80005dc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	485f      	ldr	r0, [pc, #380]	; (8000764 <main+0x36c>)
 80005e6:	f000 fc60 	bl	8000eaa <SPI_SendData>
			// read from the led pin
			uint8_t led_read;
			SPI_ReceiveData(SPI2, &led_read, 1);
 80005ea:	1cbb      	adds	r3, r7, #2
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	485c      	ldr	r0, [pc, #368]	; (8000764 <main+0x36c>)
 80005f2:	f000 fc8d 	bl	8000f10 <SPI_ReceiveData>
			printf("CMD_LED_READ %d\n",led_read);
 80005f6:	78bb      	ldrb	r3, [r7, #2]
 80005f8:	4619      	mov	r1, r3
 80005fa:	485f      	ldr	r0, [pc, #380]	; (8000778 <main+0x380>)
 80005fc:	f000 fd3a 	bl	8001074 <iprintf>

		}
		// end of CMD_LED_READ

		// 4. CMD_PRINT
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 8000600:	bf00      	nop
 8000602:	210d      	movs	r1, #13
 8000604:	4858      	ldr	r0, [pc, #352]	; (8000768 <main+0x370>)
 8000606:	f000 fb77 	bl	8000cf8 <GPIO_ReadFromInputPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <main+0x20a>
		delay(500000);
 8000610:	4856      	ldr	r0, [pc, #344]	; (800076c <main+0x374>)
 8000612:	f7ff fe55 	bl	80002c0 <delay>

		command_code = CMD_PRINT;
 8000616:	2353      	movs	r3, #83	; 0x53
 8000618:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		SPI_SendData(SPI2, &command_code, 1);
 800061c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	484f      	ldr	r0, [pc, #316]	; (8000764 <main+0x36c>)
 8000626:	f000 fc40 	bl	8000eaa <SPI_SendData>
		// dummy read to clear the RXbuffer
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800062a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	484c      	ldr	r0, [pc, #304]	; (8000764 <main+0x36c>)
 8000634:	f000 fc6c 	bl	8000f10 <SPI_ReceiveData>
		// send dummy data to get a response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000638:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	4848      	ldr	r0, [pc, #288]	; (8000764 <main+0x36c>)
 8000642:	f000 fc32 	bl	8000eaa <SPI_SendData>
		// then call receive
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	4845      	ldr	r0, [pc, #276]	; (8000764 <main+0x36c>)
 8000650:	f000 fc5e 	bl	8000f10 <SPI_ReceiveData>

		uint8_t message[] = "Hello World";
 8000654:	4a49      	ldr	r2, [pc, #292]	; (800077c <main+0x384>)
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	ca07      	ldmia	r2, {r0, r1, r2}
 800065c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (SPI_VerifyResponse(ack_byte)) {
 8000660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff feb5 	bl	80003d4 <SPI_VerifyResponse>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d019      	beq.n	80006a4 <main+0x2ac>
			// we only need to send data, no need for receive after handshake
			args[0] = strlen((char*)message);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdcb 	bl	8000210 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	773b      	strb	r3, [r7, #28]

			// send arguments
			SPI_SendData(SPI2, args, 1);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	4836      	ldr	r0, [pc, #216]	; (8000764 <main+0x36c>)
 800068a:	f000 fc0e 	bl	8000eaa <SPI_SendData>
			// send message, no need to get data from the slave
			SPI_SendData(SPI2, message, args[0]);
 800068e:	7f3b      	ldrb	r3, [r7, #28]
 8000690:	461a      	mov	r2, r3
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	4832      	ldr	r0, [pc, #200]	; (8000764 <main+0x36c>)
 800069a:	f000 fc06 	bl	8000eaa <SPI_SendData>
			printf("CMD_PRINT complete\n");
 800069e:	4838      	ldr	r0, [pc, #224]	; (8000780 <main+0x388>)
 80006a0:	f000 fd5c 	bl	800115c <puts>

		}
		// end of CMD_LED_READ

		// 5. CMD_ID_READ
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 80006a4:	bf00      	nop
 80006a6:	210d      	movs	r1, #13
 80006a8:	482f      	ldr	r0, [pc, #188]	; (8000768 <main+0x370>)
 80006aa:	f000 fb25 	bl	8000cf8 <GPIO_ReadFromInputPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f8      	bne.n	80006a6 <main+0x2ae>
		delay(500000);
 80006b4:	482d      	ldr	r0, [pc, #180]	; (800076c <main+0x374>)
 80006b6:	f7ff fe03 	bl	80002c0 <delay>

		command_code = CMD_ID_READ;
 80006ba:	2354      	movs	r3, #84	; 0x54
 80006bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		SPI_SendData(SPI2, &command_code, 1);
 80006c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	4826      	ldr	r0, [pc, #152]	; (8000764 <main+0x36c>)
 80006ca:	f000 fbee 	bl	8000eaa <SPI_SendData>
		// dummy read to clear the RXbuffer
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80006ce:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	4823      	ldr	r0, [pc, #140]	; (8000764 <main+0x36c>)
 80006d8:	f000 fc1a 	bl	8000f10 <SPI_ReceiveData>
		// send dummy data to get a response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80006dc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80006e0:	2201      	movs	r2, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	481f      	ldr	r0, [pc, #124]	; (8000764 <main+0x36c>)
 80006e6:	f000 fbe0 	bl	8000eaa <SPI_SendData>
		// then call receive
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	481c      	ldr	r0, [pc, #112]	; (8000764 <main+0x36c>)
 80006f4:	f000 fc0c 	bl	8000f10 <SPI_ReceiveData>

		uint8_t pin_id[11];
		if (SPI_VerifyResponse(ack_byte)) {
 80006f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fe69 	bl	80003d4 <SPI_VerifyResponse>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01e      	beq.n	8000746 <main+0x34e>
			// note that arduinos have a 10 byte id

			for (uint32_t i=0; i<11; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
 800070c:	e011      	b.n	8000732 <main+0x33a>
				SPI_SendData(SPI2, &dummy_write, 1);
 800070e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000712:	2201      	movs	r2, #1
 8000714:	4619      	mov	r1, r3
 8000716:	4813      	ldr	r0, [pc, #76]	; (8000764 <main+0x36c>)
 8000718:	f000 fbc7 	bl	8000eaa <SPI_SendData>
				SPI_ReceiveData(SPI2, &pin_id[i], 1);
 800071c:	1d3a      	adds	r2, r7, #4
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	4413      	add	r3, r2
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <main+0x36c>)
 8000728:	f000 fbf2 	bl	8000f10 <SPI_ReceiveData>
			for (uint32_t i=0; i<11; i++) {
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	3301      	adds	r3, #1
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	2b0a      	cmp	r3, #10
 8000736:	d9ea      	bls.n	800070e <main+0x316>
			}
			pin_id[11] = '\0';
 8000738:	2300      	movs	r3, #0
 800073a:	73fb      	strb	r3, [r7, #15]
			printf("CMD_ID_READ %s\n", pin_id);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <main+0x38c>)
 8000742:	f000 fc97 	bl	8001074 <iprintf>

		}
		// end of CMD_LED_READ

		while(SPI_GetFlagStatus(SPI2, SPI_STATUS_BUSY_FLAG));
 8000746:	bf00      	nop
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <main+0x36c>)
 800074c:	f000 fc13 	bl	8000f76 <SPI_GetFlagStatus>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f8      	bne.n	8000748 <main+0x350>

		SPI_PeripheralControl(SPI2, DISABLE);
 8000756:	2100      	movs	r1, #0
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <main+0x36c>)
 800075a:	f000 fc20 	bl	8000f9e <SPI_PeripheralControl>
	while (1) {
 800075e:	e660      	b.n	8000422 <main+0x2a>
 8000760:	0800246c 	.word	0x0800246c
 8000764:	40003800 	.word	0x40003800
 8000768:	40020800 	.word	0x40020800
 800076c:	0007a120 	.word	0x0007a120
 8000770:	08002484 	.word	0x08002484
 8000774:	000dbba0 	.word	0x000dbba0
 8000778:	0800249c 	.word	0x0800249c
 800077c:	080024d4 	.word	0x080024d4
 8000780:	080024b0 	.word	0x080024b0
 8000784:	080024c4 	.word	0x080024c4

08000788 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x50>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <_sbrk+0x16>
		heap_end = &end;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <_sbrk+0x50>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <_sbrk+0x54>)
 800079c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <_sbrk+0x50>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <_sbrk+0x50>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	466a      	mov	r2, sp
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d907      	bls.n	80007c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007b2:	f000 fc2d 	bl	8001010 <__errno>
 80007b6:	4602      	mov	r2, r0
 80007b8:	230c      	movs	r3, #12
 80007ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	e006      	b.n	80007d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <_sbrk+0x50>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <_sbrk+0x50>)
 80007cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000088 	.word	0x20000088
 80007dc:	20000148 	.word	0x20000148

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0b      	ldr	r4, [pc, #44]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800080a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800080e:	f000 fc05 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fdf1 	bl	80003f8 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000824:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 8000828:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800082c:	20000144 	.word	0x20000144

08000830 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d157      	bne.n	80008f6 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a55      	ldr	r2, [pc, #340]	; (80009a0 <GPIO_PeriClockControl+0x16c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a54      	ldr	r2, [pc, #336]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 800085a:	e09b      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a52      	ldr	r2, [pc, #328]	; (80009a8 <GPIO_PeriClockControl+0x174>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000864:	4b4f      	ldr	r3, [pc, #316]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a4e      	ldr	r2, [pc, #312]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	e090      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a4d      	ldr	r2, [pc, #308]	; (80009ac <GPIO_PeriClockControl+0x178>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 800087a:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a49      	ldr	r2, [pc, #292]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000886:	e085      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a49      	ldr	r2, [pc, #292]	; (80009b0 <GPIO_PeriClockControl+0x17c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 8000890:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a43      	ldr	r2, [pc, #268]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089c:	e07a      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <GPIO_PeriClockControl+0x180>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a3e      	ldr	r2, [pc, #248]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b2:	e06f      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a40      	ldr	r2, [pc, #256]	; (80009b8 <GPIO_PeriClockControl+0x184>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80008bc:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a38      	ldr	r2, [pc, #224]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c8:	e064      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a3b      	ldr	r2, [pc, #236]	; (80009bc <GPIO_PeriClockControl+0x188>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008de:	e059      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a37      	ldr	r2, [pc, #220]	; (80009c0 <GPIO_PeriClockControl+0x18c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d155      	bne.n	8000994 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f4:	e04e      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <GPIO_PeriClockControl+0x16c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d105      	bne.n	800090a <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000904:	2200      	movs	r2, #0
 8000906:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000908:	e044      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <GPIO_PeriClockControl+0x174>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d105      	bne.n	800091e <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800091c:	e03a      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <GPIO_PeriClockControl+0x178>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d105      	bne.n	8000932 <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000930:	e030      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <GPIO_PeriClockControl+0x17c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d105      	bne.n	8000946 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000944:	e026      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <GPIO_PeriClockControl+0x180>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d105      	bne.n	800095a <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000958:	e01c      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <GPIO_PeriClockControl+0x184>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d105      	bne.n	800096e <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000968:	2200      	movs	r2, #0
 800096a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800096c:	e012      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <GPIO_PeriClockControl+0x188>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d105      	bne.n	8000982 <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000980:	e008      	b.n	8000994 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <GPIO_PeriClockControl+0x18c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d104      	bne.n	8000994 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <GPIO_PeriClockControl+0x170>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40021400 	.word	0x40021400
 80009bc:	40021800 	.word	0x40021800
 80009c0:	40021c00 	.word	0x40021c00

080009c4 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff2c 	bl	8000834 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d822      	bhi.n	8000a2a <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2103      	movs	r1, #3
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	400a      	ands	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e0c3      	b.n	8000bb2 <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	795b      	ldrb	r3, [r3, #5]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d117      	bne.n	8000a62 <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a32:	4b4a      	ldr	r3, [pc, #296]	; (8000b5c <GPIO_Init+0x198>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	7912      	ldrb	r2, [r2, #4]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	408a      	lsls	r2, r1
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a46      	ldr	r2, [pc, #280]	; (8000b5c <GPIO_Init+0x198>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a48:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <GPIO_Init+0x198>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	7912      	ldrb	r2, [r2, #4]
 8000a50:	4611      	mov	r1, r2
 8000a52:	2201      	movs	r2, #1
 8000a54:	408a      	lsls	r2, r1
 8000a56:	43d2      	mvns	r2, r2
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4a40      	ldr	r2, [pc, #256]	; (8000b5c <GPIO_Init+0x198>)
 8000a5c:	400b      	ands	r3, r1
 8000a5e:	6093      	str	r3, [r2, #8]
 8000a60:	e036      	b.n	8000ad0 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	795b      	ldrb	r3, [r3, #5]
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	d117      	bne.n	8000a9a <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <GPIO_Init+0x198>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7912      	ldrb	r2, [r2, #4]
 8000a72:	4611      	mov	r1, r2
 8000a74:	2201      	movs	r2, #1
 8000a76:	408a      	lsls	r2, r1
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <GPIO_Init+0x198>)
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <GPIO_Init+0x198>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	7912      	ldrb	r2, [r2, #4]
 8000a88:	4611      	mov	r1, r2
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	408a      	lsls	r2, r1
 8000a8e:	43d2      	mvns	r2, r2
 8000a90:	4611      	mov	r1, r2
 8000a92:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <GPIO_Init+0x198>)
 8000a94:	430b      	orrs	r3, r1
 8000a96:	60d3      	str	r3, [r2, #12]
 8000a98:	e01a      	b.n	8000ad0 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d116      	bne.n	8000ad0 <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <GPIO_Init+0x198>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7912      	ldrb	r2, [r2, #4]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	2201      	movs	r2, #1
 8000aae:	408a      	lsls	r2, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <GPIO_Init+0x198>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <GPIO_Init+0x198>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	7912      	ldrb	r2, [r2, #4]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	408a      	lsls	r2, r1
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <GPIO_Init+0x198>)
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <GPIO_Init+0x19c>)
 8000ae4:	7cfb      	ldrb	r3, [r7, #19]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	491c      	ldr	r1, [pc, #112]	; (8000b64 <GPIO_Init+0x1a0>)
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d046      	beq.n	8000b84 <GPIO_Init+0x1c0>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	491b      	ldr	r1, [pc, #108]	; (8000b68 <GPIO_Init+0x1a4>)
 8000afc:	428b      	cmp	r3, r1
 8000afe:	d02b      	beq.n	8000b58 <GPIO_Init+0x194>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4919      	ldr	r1, [pc, #100]	; (8000b6c <GPIO_Init+0x1a8>)
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d024      	beq.n	8000b54 <GPIO_Init+0x190>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4918      	ldr	r1, [pc, #96]	; (8000b70 <GPIO_Init+0x1ac>)
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d01d      	beq.n	8000b50 <GPIO_Init+0x18c>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4916      	ldr	r1, [pc, #88]	; (8000b74 <GPIO_Init+0x1b0>)
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d016      	beq.n	8000b4c <GPIO_Init+0x188>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4915      	ldr	r1, [pc, #84]	; (8000b78 <GPIO_Init+0x1b4>)
 8000b24:	428b      	cmp	r3, r1
 8000b26:	d00f      	beq.n	8000b48 <GPIO_Init+0x184>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4913      	ldr	r1, [pc, #76]	; (8000b7c <GPIO_Init+0x1b8>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d008      	beq.n	8000b44 <GPIO_Init+0x180>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4912      	ldr	r1, [pc, #72]	; (8000b80 <GPIO_Init+0x1bc>)
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d101      	bne.n	8000b40 <GPIO_Init+0x17c>
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	e022      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b40:	2300      	movs	r3, #0
 8000b42:	e020      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b44:	2306      	movs	r3, #6
 8000b46:	e01e      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b48:	2305      	movs	r3, #5
 8000b4a:	e01c      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e01a      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e018      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e016      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e014      	b.n	8000b86 <GPIO_Init+0x1c2>
 8000b5c:	40013c00 	.word	0x40013c00
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40021400 	.word	0x40021400
 8000b7c:	40021800 	.word	0x40021800
 8000b80:	40021c00 	.word	0x40021c00
 8000b84:	2300      	movs	r3, #0
 8000b86:	7cb9      	ldrb	r1, [r7, #18]
 8000b88:	0089      	lsls	r1, r1, #2
 8000b8a:	408b      	lsls	r3, r1
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	4957      	ldr	r1, [pc, #348]	; (8000cf0 <GPIO_Init+0x32c>)
 8000b92:	7cfb      	ldrb	r3, [r7, #19]
 8000b94:	4002      	ands	r2, r0
 8000b96:	3302      	adds	r3, #2
 8000b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000b9c:	4b55      	ldr	r3, [pc, #340]	; (8000cf4 <GPIO_Init+0x330>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	7912      	ldrb	r2, [r2, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	408a      	lsls	r2, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <GPIO_Init+0x330>)
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	400a      	ands	r2, r1
 8000be0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6899      	ldr	r1, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	79db      	ldrb	r3, [r3, #7]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	791b      	ldrb	r3, [r3, #4]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2103      	movs	r1, #3
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	400a      	ands	r2, r1
 8000c24:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68d9      	ldr	r1, [r3, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7a1b      	ldrb	r3, [r3, #8]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	4619      	mov	r1, r3
 8000c56:	2301      	movs	r3, #1
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	400a      	ands	r2, r1
 8000c64:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6859      	ldr	r1, [r3, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	795b      	ldrb	r3, [r3, #5]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d132      	bne.n	8000ce8 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4011      	ands	r1, r2
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7a5b      	ldrb	r3, [r3, #9]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40013c00 	.word	0x40013c00

08000cf8 <GPIO_ReadFromInputPin>:
 * desc: reads the input pin of a GPIOx peripheral (specified by pinNumber)
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: 2 byte pin register data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
	uint8_t out;
	out = (uint8_t)((pGPIOx->IDR >> pinNumber) & 1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
	return out;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SPI_PeriClockControl>:
 * desc: enables or disables the clock for a given SPI peripheral
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d12b      	bne.n	8000d8e <SPI_PeriClockControl+0x6a>
		if (pSPIx == SPI1) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <SPI_PeriClockControl+0xc4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d106      	bne.n	8000d4c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pSPIx == SPI4) {
			SPI4_PCLK_DI;
		}
	}
}
 8000d4a:	e047      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI2) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <SPI_PeriClockControl+0xcc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d106      	bne.n	8000d62 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN;
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a24      	ldr	r2, [pc, #144]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d60:	e03c      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI3) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <SPI_PeriClockControl+0xd0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d106      	bne.n	8000d78 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d76:	e031      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI4) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <SPI_PeriClockControl+0xd4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d12d      	bne.n	8000ddc <SPI_PeriClockControl+0xb8>
			SPI4_PCLK_EN;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d8a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d8c:	e026      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		if (pSPIx == SPI1) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <SPI_PeriClockControl+0xc4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d105      	bne.n	8000da2 <SPI_PeriClockControl+0x7e>
			SPI1_PCLK_DI;
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000da0:	e01c      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI2) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <SPI_PeriClockControl+0xcc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d105      	bne.n	8000db6 <SPI_PeriClockControl+0x92>
			SPI2_PCLK_DI;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000db4:	e012      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI3) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <SPI_PeriClockControl+0xd0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d105      	bne.n	8000dca <SPI_PeriClockControl+0xa6>
			SPI3_PCLK_DI;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dc8:	e008      	b.n	8000ddc <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI4) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SPI_PeriClockControl+0xd4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d104      	bne.n	8000ddc <SPI_PeriClockControl+0xb8>
			SPI4_PCLK_DI;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SPI_PeriClockControl+0xc8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40013000 	.word	0x40013000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40003800 	.word	0x40003800
 8000df4:	40003c00 	.word	0x40003c00
 8000df8:	40013400 	.word	0x40013400

08000dfc <SPI_Init>:

// Peripheral Init
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

	uint32_t reg_data = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff88 	bl	8000d24 <SPI_PeriClockControl>

	// 1. configure device mode
	reg_data |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]

	// 2. init spi bus configuration
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_DUPLEX) {
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	795b      	ldrb	r3, [r3, #5]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d104      	bne.n	8000e34 <SPI_Init+0x38>
		// clear bidirectional mode
		reg_data &= ~(1 << SPI_CR1_BIDIMODE);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e010      	b.n	8000e56 <SPI_Init+0x5a>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	795b      	ldrb	r3, [r3, #5]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d104      	bne.n	8000e46 <SPI_Init+0x4a>
		// enable bidirectional mode
		// keep RXONLY clear when bidirectional mode is active
		reg_data |= (1 << SPI_CR1_BIDIMODE);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e007      	b.n	8000e56 <SPI_Init+0x5a>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY) {
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	795b      	ldrb	r3, [r3, #5]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d103      	bne.n	8000e56 <SPI_Init+0x5a>
		// RXONLY and BIDIMODE can't be set at the same time, so configure RXONLY
		// handle RXONLY
//		reg_data &= ~(1 << SPI_CR1_BIDIMODE);
		reg_data |= (1 << SPI_CR1_RXONLY);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e54:	60fb      	str	r3, [r7, #12]
	}

	// 3. set clock speed
	reg_data |= (pSPIHandle->SPI_Config.SPI_SerialClkSpeed << SPI_CR1_BR);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	799b      	ldrb	r3, [r3, #6]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

	// 4. set data frame format
	reg_data |= (pSPIHandle->SPI_Config.SPI_DataFrameFormat << SPI_CR1_DFF);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	79db      	ldrb	r3, [r3, #7]
 8000e68:	02db      	lsls	r3, r3, #11
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]

	// 5. set cpol
	reg_data |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7a1b      	ldrb	r3, [r3, #8]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

	// 6. set cpha
	reg_data |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7a5b      	ldrb	r3, [r3, #9]
 8000e84:	461a      	mov	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

	// 7. configure software slave management
	reg_data |= (pSPIHandle->SPI_Config.SPI_SoftwareSlaveManagement<< SPI_CR1_SSM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7a9b      	ldrb	r3, [r3, #10]
 8000e90:	025b      	lsls	r3, r3, #9
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = reg_data;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <SPI_SendData>:
 * input1: SPI register struct mapped to the SPI base address
 * input2: a buffer for holding information that goes into the txbuffer
 * input3: the size of the transmission in bytes
 * output: none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
	while (len > 0) {
 8000eb6:	e024      	b.n	8000f02 <SPI_SendData+0x58>
		// 1. wait until TXE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_STATUS_TXE_FLAG) == FLAG_RESET);
 8000eb8:	bf00      	nop
 8000eba:	2102      	movs	r1, #2
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 f85a 	bl	8000f76 <SPI_GetFlagStatus>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f8      	beq.n	8000eba <SPI_SendData+0x10>

		// 2. check the DFF register
		// 3. then load the data into the data register
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <SPI_SendData+0x42>
			// 16 bits
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	60da      	str	r2, [r3, #12]
			len =- 2;
 8000ede:	f06f 0301 	mvn.w	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	e00a      	b.n	8000f02 <SPI_SendData+0x58>
		} else {
			// 8 bits
			pSPIx->DR = *pTxBuffer;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	60da      	str	r2, [r3, #12]
			len--;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
	while (len > 0) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1d7      	bne.n	8000eb8 <SPI_SendData+0xe>
		}
	}
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SPI_ReceiveData>:
 * input1: SPI register struct mapped to the SPI base address
 * input2: a buffer for holding information that goes into the rxbuffer
 * input3: the size of the transmission in bytes
 * output: none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	while (len > 0) {
 8000f1c:	e024      	b.n	8000f68 <SPI_ReceiveData+0x58>
		// 1. wait until RXNE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_STATUS_RXNE_FLAG) == FLAG_RESET);
 8000f1e:	bf00      	nop
 8000f20:	2101      	movs	r1, #1
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f827 	bl	8000f76 <SPI_GetFlagStatus>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f8      	beq.n	8000f20 <SPI_ReceiveData+0x10>

		// 2. check the DFF register
		// 3. then load the data into the data register
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00b      	beq.n	8000f52 <SPI_ReceiveData+0x42>
			// 16 bits
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	801a      	strh	r2, [r3, #0]
			len =- 2;
 8000f44:	f06f 0301 	mvn.w	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	e00a      	b.n	8000f68 <SPI_ReceiveData+0x58>
		} else {
			// 8 bits
			*pRxBuffer = pSPIx->DR;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	701a      	strb	r2, [r3, #0]
			len--;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
	while (len > 0) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1d7      	bne.n	8000f1e <SPI_ReceiveData+0xe>
		}
	}
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <SPI_GetFlagStatus>:
 * desc: checks the status of a user specified register
 * input1: SPI register struct ideally mapped to the status register
 * input2: an uint32_t status to check for
 * output: the flag register's status
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag_name) {
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flag_name) return FLAG_SET;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SPI_GetFlagStatus+0x1a>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <SPI_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SPI_PeripheralControl>:
 * desc: enables the SPI peripheral for data transmission
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000fbc:	e005      	b.n	8000fca <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SPI_SSOEConfig>:
 *		configuration. Note that when SPE = 1, SSOE = 0 when SSOE is enabled
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f043 0204 	orr.w	r2, r3, #4
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000ff4:	e005      	b.n	8001002 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f023 0204 	bic.w	r2, r3, #4
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	605a      	str	r2, [r3, #4]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <__errno>:
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <__errno+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	4e0d      	ldr	r6, [pc, #52]	; (8001054 <__libc_init_array+0x38>)
 8001020:	4c0d      	ldr	r4, [pc, #52]	; (8001058 <__libc_init_array+0x3c>)
 8001022:	1ba4      	subs	r4, r4, r6
 8001024:	10a4      	asrs	r4, r4, #2
 8001026:	2500      	movs	r5, #0
 8001028:	42a5      	cmp	r5, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	4e0b      	ldr	r6, [pc, #44]	; (800105c <__libc_init_array+0x40>)
 800102e:	4c0c      	ldr	r4, [pc, #48]	; (8001060 <__libc_init_array+0x44>)
 8001030:	f001 fa10 	bl	8002454 <_init>
 8001034:	1ba4      	subs	r4, r4, r6
 8001036:	10a4      	asrs	r4, r4, #2
 8001038:	2500      	movs	r5, #0
 800103a:	42a5      	cmp	r5, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001044:	4798      	blx	r3
 8001046:	3501      	adds	r5, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800104e:	4798      	blx	r3
 8001050:	3501      	adds	r5, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	08002594 	.word	0x08002594
 8001058:	08002594 	.word	0x08002594
 800105c:	08002594 	.word	0x08002594
 8001060:	08002598 	.word	0x08002598

08001064 <memset>:
 8001064:	4402      	add	r2, r0
 8001066:	4603      	mov	r3, r0
 8001068:	4293      	cmp	r3, r2
 800106a:	d100      	bne.n	800106e <memset+0xa>
 800106c:	4770      	bx	lr
 800106e:	f803 1b01 	strb.w	r1, [r3], #1
 8001072:	e7f9      	b.n	8001068 <memset+0x4>

08001074 <iprintf>:
 8001074:	b40f      	push	{r0, r1, r2, r3}
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <iprintf+0x2c>)
 8001078:	b513      	push	{r0, r1, r4, lr}
 800107a:	681c      	ldr	r4, [r3, #0]
 800107c:	b124      	cbz	r4, 8001088 <iprintf+0x14>
 800107e:	69a3      	ldr	r3, [r4, #24]
 8001080:	b913      	cbnz	r3, 8001088 <iprintf+0x14>
 8001082:	4620      	mov	r0, r4
 8001084:	f000 fa22 	bl	80014cc <__sinit>
 8001088:	ab05      	add	r3, sp, #20
 800108a:	9a04      	ldr	r2, [sp, #16]
 800108c:	68a1      	ldr	r1, [r4, #8]
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	4620      	mov	r0, r4
 8001092:	f000 fbdb 	bl	800184c <_vfiprintf_r>
 8001096:	b002      	add	sp, #8
 8001098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800109c:	b004      	add	sp, #16
 800109e:	4770      	bx	lr
 80010a0:	20000000 	.word	0x20000000

080010a4 <_puts_r>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	460e      	mov	r6, r1
 80010a8:	4605      	mov	r5, r0
 80010aa:	b118      	cbz	r0, 80010b4 <_puts_r+0x10>
 80010ac:	6983      	ldr	r3, [r0, #24]
 80010ae:	b90b      	cbnz	r3, 80010b4 <_puts_r+0x10>
 80010b0:	f000 fa0c 	bl	80014cc <__sinit>
 80010b4:	69ab      	ldr	r3, [r5, #24]
 80010b6:	68ac      	ldr	r4, [r5, #8]
 80010b8:	b913      	cbnz	r3, 80010c0 <_puts_r+0x1c>
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 fa06 	bl	80014cc <__sinit>
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <_puts_r+0xac>)
 80010c2:	429c      	cmp	r4, r3
 80010c4:	d117      	bne.n	80010f6 <_puts_r+0x52>
 80010c6:	686c      	ldr	r4, [r5, #4]
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	071b      	lsls	r3, r3, #28
 80010cc:	d51d      	bpl.n	800110a <_puts_r+0x66>
 80010ce:	6923      	ldr	r3, [r4, #16]
 80010d0:	b1db      	cbz	r3, 800110a <_puts_r+0x66>
 80010d2:	3e01      	subs	r6, #1
 80010d4:	68a3      	ldr	r3, [r4, #8]
 80010d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010da:	3b01      	subs	r3, #1
 80010dc:	60a3      	str	r3, [r4, #8]
 80010de:	b9e9      	cbnz	r1, 800111c <_puts_r+0x78>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da2e      	bge.n	8001142 <_puts_r+0x9e>
 80010e4:	4622      	mov	r2, r4
 80010e6:	210a      	movs	r1, #10
 80010e8:	4628      	mov	r0, r5
 80010ea:	f000 f83f 	bl	800116c <__swbuf_r>
 80010ee:	3001      	adds	r0, #1
 80010f0:	d011      	beq.n	8001116 <_puts_r+0x72>
 80010f2:	200a      	movs	r0, #10
 80010f4:	e011      	b.n	800111a <_puts_r+0x76>
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <_puts_r+0xb0>)
 80010f8:	429c      	cmp	r4, r3
 80010fa:	d101      	bne.n	8001100 <_puts_r+0x5c>
 80010fc:	68ac      	ldr	r4, [r5, #8]
 80010fe:	e7e3      	b.n	80010c8 <_puts_r+0x24>
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_puts_r+0xb4>)
 8001102:	429c      	cmp	r4, r3
 8001104:	bf08      	it	eq
 8001106:	68ec      	ldreq	r4, [r5, #12]
 8001108:	e7de      	b.n	80010c8 <_puts_r+0x24>
 800110a:	4621      	mov	r1, r4
 800110c:	4628      	mov	r0, r5
 800110e:	f000 f87f 	bl	8001210 <__swsetup_r>
 8001112:	2800      	cmp	r0, #0
 8001114:	d0dd      	beq.n	80010d2 <_puts_r+0x2e>
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	2b00      	cmp	r3, #0
 800111e:	da04      	bge.n	800112a <_puts_r+0x86>
 8001120:	69a2      	ldr	r2, [r4, #24]
 8001122:	429a      	cmp	r2, r3
 8001124:	dc06      	bgt.n	8001134 <_puts_r+0x90>
 8001126:	290a      	cmp	r1, #10
 8001128:	d004      	beq.n	8001134 <_puts_r+0x90>
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	6022      	str	r2, [r4, #0]
 8001130:	7019      	strb	r1, [r3, #0]
 8001132:	e7cf      	b.n	80010d4 <_puts_r+0x30>
 8001134:	4622      	mov	r2, r4
 8001136:	4628      	mov	r0, r5
 8001138:	f000 f818 	bl	800116c <__swbuf_r>
 800113c:	3001      	adds	r0, #1
 800113e:	d1c9      	bne.n	80010d4 <_puts_r+0x30>
 8001140:	e7e9      	b.n	8001116 <_puts_r+0x72>
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	200a      	movs	r0, #10
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	6022      	str	r2, [r4, #0]
 800114a:	7018      	strb	r0, [r3, #0]
 800114c:	e7e5      	b.n	800111a <_puts_r+0x76>
 800114e:	bf00      	nop
 8001150:	08002504 	.word	0x08002504
 8001154:	08002524 	.word	0x08002524
 8001158:	080024e4 	.word	0x080024e4

0800115c <puts>:
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <puts+0xc>)
 800115e:	4601      	mov	r1, r0
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	f7ff bf9f 	b.w	80010a4 <_puts_r>
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000

0800116c <__swbuf_r>:
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116e:	460e      	mov	r6, r1
 8001170:	4614      	mov	r4, r2
 8001172:	4605      	mov	r5, r0
 8001174:	b118      	cbz	r0, 800117e <__swbuf_r+0x12>
 8001176:	6983      	ldr	r3, [r0, #24]
 8001178:	b90b      	cbnz	r3, 800117e <__swbuf_r+0x12>
 800117a:	f000 f9a7 	bl	80014cc <__sinit>
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <__swbuf_r+0x98>)
 8001180:	429c      	cmp	r4, r3
 8001182:	d12a      	bne.n	80011da <__swbuf_r+0x6e>
 8001184:	686c      	ldr	r4, [r5, #4]
 8001186:	69a3      	ldr	r3, [r4, #24]
 8001188:	60a3      	str	r3, [r4, #8]
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	071a      	lsls	r2, r3, #28
 800118e:	d52e      	bpl.n	80011ee <__swbuf_r+0x82>
 8001190:	6923      	ldr	r3, [r4, #16]
 8001192:	b363      	cbz	r3, 80011ee <__swbuf_r+0x82>
 8001194:	6923      	ldr	r3, [r4, #16]
 8001196:	6820      	ldr	r0, [r4, #0]
 8001198:	1ac0      	subs	r0, r0, r3
 800119a:	6963      	ldr	r3, [r4, #20]
 800119c:	b2f6      	uxtb	r6, r6
 800119e:	4283      	cmp	r3, r0
 80011a0:	4637      	mov	r7, r6
 80011a2:	dc04      	bgt.n	80011ae <__swbuf_r+0x42>
 80011a4:	4621      	mov	r1, r4
 80011a6:	4628      	mov	r0, r5
 80011a8:	f000 f926 	bl	80013f8 <_fflush_r>
 80011ac:	bb28      	cbnz	r0, 80011fa <__swbuf_r+0x8e>
 80011ae:	68a3      	ldr	r3, [r4, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60a3      	str	r3, [r4, #8]
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	6022      	str	r2, [r4, #0]
 80011ba:	701e      	strb	r6, [r3, #0]
 80011bc:	6963      	ldr	r3, [r4, #20]
 80011be:	3001      	adds	r0, #1
 80011c0:	4283      	cmp	r3, r0
 80011c2:	d004      	beq.n	80011ce <__swbuf_r+0x62>
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	07db      	lsls	r3, r3, #31
 80011c8:	d519      	bpl.n	80011fe <__swbuf_r+0x92>
 80011ca:	2e0a      	cmp	r6, #10
 80011cc:	d117      	bne.n	80011fe <__swbuf_r+0x92>
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	f000 f911 	bl	80013f8 <_fflush_r>
 80011d6:	b190      	cbz	r0, 80011fe <__swbuf_r+0x92>
 80011d8:	e00f      	b.n	80011fa <__swbuf_r+0x8e>
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <__swbuf_r+0x9c>)
 80011dc:	429c      	cmp	r4, r3
 80011de:	d101      	bne.n	80011e4 <__swbuf_r+0x78>
 80011e0:	68ac      	ldr	r4, [r5, #8]
 80011e2:	e7d0      	b.n	8001186 <__swbuf_r+0x1a>
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <__swbuf_r+0xa0>)
 80011e6:	429c      	cmp	r4, r3
 80011e8:	bf08      	it	eq
 80011ea:	68ec      	ldreq	r4, [r5, #12]
 80011ec:	e7cb      	b.n	8001186 <__swbuf_r+0x1a>
 80011ee:	4621      	mov	r1, r4
 80011f0:	4628      	mov	r0, r5
 80011f2:	f000 f80d 	bl	8001210 <__swsetup_r>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d0cc      	beq.n	8001194 <__swbuf_r+0x28>
 80011fa:	f04f 37ff 	mov.w	r7, #4294967295
 80011fe:	4638      	mov	r0, r7
 8001200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001202:	bf00      	nop
 8001204:	08002504 	.word	0x08002504
 8001208:	08002524 	.word	0x08002524
 800120c:	080024e4 	.word	0x080024e4

08001210 <__swsetup_r>:
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <__swsetup_r+0xcc>)
 8001212:	b570      	push	{r4, r5, r6, lr}
 8001214:	681d      	ldr	r5, [r3, #0]
 8001216:	4606      	mov	r6, r0
 8001218:	460c      	mov	r4, r1
 800121a:	b125      	cbz	r5, 8001226 <__swsetup_r+0x16>
 800121c:	69ab      	ldr	r3, [r5, #24]
 800121e:	b913      	cbnz	r3, 8001226 <__swsetup_r+0x16>
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f953 	bl	80014cc <__sinit>
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <__swsetup_r+0xd0>)
 8001228:	429c      	cmp	r4, r3
 800122a:	d10f      	bne.n	800124c <__swsetup_r+0x3c>
 800122c:	686c      	ldr	r4, [r5, #4]
 800122e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001232:	b29a      	uxth	r2, r3
 8001234:	0715      	lsls	r5, r2, #28
 8001236:	d42c      	bmi.n	8001292 <__swsetup_r+0x82>
 8001238:	06d0      	lsls	r0, r2, #27
 800123a:	d411      	bmi.n	8001260 <__swsetup_r+0x50>
 800123c:	2209      	movs	r2, #9
 800123e:	6032      	str	r2, [r6, #0]
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	81a3      	strh	r3, [r4, #12]
 8001246:	f04f 30ff 	mov.w	r0, #4294967295
 800124a:	e03e      	b.n	80012ca <__swsetup_r+0xba>
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <__swsetup_r+0xd4>)
 800124e:	429c      	cmp	r4, r3
 8001250:	d101      	bne.n	8001256 <__swsetup_r+0x46>
 8001252:	68ac      	ldr	r4, [r5, #8]
 8001254:	e7eb      	b.n	800122e <__swsetup_r+0x1e>
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <__swsetup_r+0xd8>)
 8001258:	429c      	cmp	r4, r3
 800125a:	bf08      	it	eq
 800125c:	68ec      	ldreq	r4, [r5, #12]
 800125e:	e7e6      	b.n	800122e <__swsetup_r+0x1e>
 8001260:	0751      	lsls	r1, r2, #29
 8001262:	d512      	bpl.n	800128a <__swsetup_r+0x7a>
 8001264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001266:	b141      	cbz	r1, 800127a <__swsetup_r+0x6a>
 8001268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800126c:	4299      	cmp	r1, r3
 800126e:	d002      	beq.n	8001276 <__swsetup_r+0x66>
 8001270:	4630      	mov	r0, r6
 8001272:	f000 fa19 	bl	80016a8 <_free_r>
 8001276:	2300      	movs	r3, #0
 8001278:	6363      	str	r3, [r4, #52]	; 0x34
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	2300      	movs	r3, #0
 8001284:	6063      	str	r3, [r4, #4]
 8001286:	6923      	ldr	r3, [r4, #16]
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	89a3      	ldrh	r3, [r4, #12]
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	81a3      	strh	r3, [r4, #12]
 8001292:	6923      	ldr	r3, [r4, #16]
 8001294:	b94b      	cbnz	r3, 80012aa <__swsetup_r+0x9a>
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800129c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a0:	d003      	beq.n	80012aa <__swsetup_r+0x9a>
 80012a2:	4621      	mov	r1, r4
 80012a4:	4630      	mov	r0, r6
 80012a6:	f000 f9bf 	bl	8001628 <__smakebuf_r>
 80012aa:	89a2      	ldrh	r2, [r4, #12]
 80012ac:	f012 0301 	ands.w	r3, r2, #1
 80012b0:	d00c      	beq.n	80012cc <__swsetup_r+0xbc>
 80012b2:	2300      	movs	r3, #0
 80012b4:	60a3      	str	r3, [r4, #8]
 80012b6:	6963      	ldr	r3, [r4, #20]
 80012b8:	425b      	negs	r3, r3
 80012ba:	61a3      	str	r3, [r4, #24]
 80012bc:	6923      	ldr	r3, [r4, #16]
 80012be:	b953      	cbnz	r3, 80012d6 <__swsetup_r+0xc6>
 80012c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80012c8:	d1ba      	bne.n	8001240 <__swsetup_r+0x30>
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	0792      	lsls	r2, r2, #30
 80012ce:	bf58      	it	pl
 80012d0:	6963      	ldrpl	r3, [r4, #20]
 80012d2:	60a3      	str	r3, [r4, #8]
 80012d4:	e7f2      	b.n	80012bc <__swsetup_r+0xac>
 80012d6:	2000      	movs	r0, #0
 80012d8:	e7f7      	b.n	80012ca <__swsetup_r+0xba>
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000
 80012e0:	08002504 	.word	0x08002504
 80012e4:	08002524 	.word	0x08002524
 80012e8:	080024e4 	.word	0x080024e4

080012ec <__sflush_r>:
 80012ec:	898a      	ldrh	r2, [r1, #12]
 80012ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f2:	4605      	mov	r5, r0
 80012f4:	0710      	lsls	r0, r2, #28
 80012f6:	460c      	mov	r4, r1
 80012f8:	d458      	bmi.n	80013ac <__sflush_r+0xc0>
 80012fa:	684b      	ldr	r3, [r1, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dc05      	bgt.n	800130c <__sflush_r+0x20>
 8001300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	dc02      	bgt.n	800130c <__sflush_r+0x20>
 8001306:	2000      	movs	r0, #0
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800130c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800130e:	2e00      	cmp	r6, #0
 8001310:	d0f9      	beq.n	8001306 <__sflush_r+0x1a>
 8001312:	2300      	movs	r3, #0
 8001314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001318:	682f      	ldr	r7, [r5, #0]
 800131a:	6a21      	ldr	r1, [r4, #32]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	d032      	beq.n	8001386 <__sflush_r+0x9a>
 8001320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	075a      	lsls	r2, r3, #29
 8001326:	d505      	bpl.n	8001334 <__sflush_r+0x48>
 8001328:	6863      	ldr	r3, [r4, #4]
 800132a:	1ac0      	subs	r0, r0, r3
 800132c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800132e:	b10b      	cbz	r3, 8001334 <__sflush_r+0x48>
 8001330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001332:	1ac0      	subs	r0, r0, r3
 8001334:	2300      	movs	r3, #0
 8001336:	4602      	mov	r2, r0
 8001338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800133a:	6a21      	ldr	r1, [r4, #32]
 800133c:	4628      	mov	r0, r5
 800133e:	47b0      	blx	r6
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	d106      	bne.n	8001354 <__sflush_r+0x68>
 8001346:	6829      	ldr	r1, [r5, #0]
 8001348:	291d      	cmp	r1, #29
 800134a:	d848      	bhi.n	80013de <__sflush_r+0xf2>
 800134c:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <__sflush_r+0x108>)
 800134e:	40ca      	lsrs	r2, r1
 8001350:	07d6      	lsls	r6, r2, #31
 8001352:	d544      	bpl.n	80013de <__sflush_r+0xf2>
 8001354:	2200      	movs	r2, #0
 8001356:	6062      	str	r2, [r4, #4]
 8001358:	04d9      	lsls	r1, r3, #19
 800135a:	6922      	ldr	r2, [r4, #16]
 800135c:	6022      	str	r2, [r4, #0]
 800135e:	d504      	bpl.n	800136a <__sflush_r+0x7e>
 8001360:	1c42      	adds	r2, r0, #1
 8001362:	d101      	bne.n	8001368 <__sflush_r+0x7c>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	b903      	cbnz	r3, 800136a <__sflush_r+0x7e>
 8001368:	6560      	str	r0, [r4, #84]	; 0x54
 800136a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800136c:	602f      	str	r7, [r5, #0]
 800136e:	2900      	cmp	r1, #0
 8001370:	d0c9      	beq.n	8001306 <__sflush_r+0x1a>
 8001372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001376:	4299      	cmp	r1, r3
 8001378:	d002      	beq.n	8001380 <__sflush_r+0x94>
 800137a:	4628      	mov	r0, r5
 800137c:	f000 f994 	bl	80016a8 <_free_r>
 8001380:	2000      	movs	r0, #0
 8001382:	6360      	str	r0, [r4, #52]	; 0x34
 8001384:	e7c0      	b.n	8001308 <__sflush_r+0x1c>
 8001386:	2301      	movs	r3, #1
 8001388:	4628      	mov	r0, r5
 800138a:	47b0      	blx	r6
 800138c:	1c41      	adds	r1, r0, #1
 800138e:	d1c8      	bne.n	8001322 <__sflush_r+0x36>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0c5      	beq.n	8001322 <__sflush_r+0x36>
 8001396:	2b1d      	cmp	r3, #29
 8001398:	d001      	beq.n	800139e <__sflush_r+0xb2>
 800139a:	2b16      	cmp	r3, #22
 800139c:	d101      	bne.n	80013a2 <__sflush_r+0xb6>
 800139e:	602f      	str	r7, [r5, #0]
 80013a0:	e7b1      	b.n	8001306 <__sflush_r+0x1a>
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	e7ad      	b.n	8001308 <__sflush_r+0x1c>
 80013ac:	690f      	ldr	r7, [r1, #16]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d0a9      	beq.n	8001306 <__sflush_r+0x1a>
 80013b2:	0793      	lsls	r3, r2, #30
 80013b4:	680e      	ldr	r6, [r1, #0]
 80013b6:	bf08      	it	eq
 80013b8:	694b      	ldreq	r3, [r1, #20]
 80013ba:	600f      	str	r7, [r1, #0]
 80013bc:	bf18      	it	ne
 80013be:	2300      	movne	r3, #0
 80013c0:	eba6 0807 	sub.w	r8, r6, r7
 80013c4:	608b      	str	r3, [r1, #8]
 80013c6:	f1b8 0f00 	cmp.w	r8, #0
 80013ca:	dd9c      	ble.n	8001306 <__sflush_r+0x1a>
 80013cc:	4643      	mov	r3, r8
 80013ce:	463a      	mov	r2, r7
 80013d0:	6a21      	ldr	r1, [r4, #32]
 80013d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d4:	4628      	mov	r0, r5
 80013d6:	47b0      	blx	r6
 80013d8:	2800      	cmp	r0, #0
 80013da:	dc06      	bgt.n	80013ea <__sflush_r+0xfe>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	e78e      	b.n	8001308 <__sflush_r+0x1c>
 80013ea:	4407      	add	r7, r0
 80013ec:	eba8 0800 	sub.w	r8, r8, r0
 80013f0:	e7e9      	b.n	80013c6 <__sflush_r+0xda>
 80013f2:	bf00      	nop
 80013f4:	20400001 	.word	0x20400001

080013f8 <_fflush_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	690b      	ldr	r3, [r1, #16]
 80013fc:	4605      	mov	r5, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	b1db      	cbz	r3, 800143a <_fflush_r+0x42>
 8001402:	b118      	cbz	r0, 800140c <_fflush_r+0x14>
 8001404:	6983      	ldr	r3, [r0, #24]
 8001406:	b90b      	cbnz	r3, 800140c <_fflush_r+0x14>
 8001408:	f000 f860 	bl	80014cc <__sinit>
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <_fflush_r+0x48>)
 800140e:	429c      	cmp	r4, r3
 8001410:	d109      	bne.n	8001426 <_fflush_r+0x2e>
 8001412:	686c      	ldr	r4, [r5, #4]
 8001414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001418:	b17b      	cbz	r3, 800143a <_fflush_r+0x42>
 800141a:	4621      	mov	r1, r4
 800141c:	4628      	mov	r0, r5
 800141e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001422:	f7ff bf63 	b.w	80012ec <__sflush_r>
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_fflush_r+0x4c>)
 8001428:	429c      	cmp	r4, r3
 800142a:	d101      	bne.n	8001430 <_fflush_r+0x38>
 800142c:	68ac      	ldr	r4, [r5, #8]
 800142e:	e7f1      	b.n	8001414 <_fflush_r+0x1c>
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <_fflush_r+0x50>)
 8001432:	429c      	cmp	r4, r3
 8001434:	bf08      	it	eq
 8001436:	68ec      	ldreq	r4, [r5, #12]
 8001438:	e7ec      	b.n	8001414 <_fflush_r+0x1c>
 800143a:	2000      	movs	r0, #0
 800143c:	bd38      	pop	{r3, r4, r5, pc}
 800143e:	bf00      	nop
 8001440:	08002504 	.word	0x08002504
 8001444:	08002524 	.word	0x08002524
 8001448:	080024e4 	.word	0x080024e4

0800144c <std>:
 800144c:	2300      	movs	r3, #0
 800144e:	b510      	push	{r4, lr}
 8001450:	4604      	mov	r4, r0
 8001452:	e9c0 3300 	strd	r3, r3, [r0]
 8001456:	6083      	str	r3, [r0, #8]
 8001458:	8181      	strh	r1, [r0, #12]
 800145a:	6643      	str	r3, [r0, #100]	; 0x64
 800145c:	81c2      	strh	r2, [r0, #14]
 800145e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001462:	6183      	str	r3, [r0, #24]
 8001464:	4619      	mov	r1, r3
 8001466:	2208      	movs	r2, #8
 8001468:	305c      	adds	r0, #92	; 0x5c
 800146a:	f7ff fdfb 	bl	8001064 <memset>
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <std+0x38>)
 8001470:	6263      	str	r3, [r4, #36]	; 0x24
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <std+0x3c>)
 8001474:	62a3      	str	r3, [r4, #40]	; 0x28
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <std+0x40>)
 8001478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <std+0x44>)
 800147c:	6224      	str	r4, [r4, #32]
 800147e:	6323      	str	r3, [r4, #48]	; 0x30
 8001480:	bd10      	pop	{r4, pc}
 8001482:	bf00      	nop
 8001484:	08001da9 	.word	0x08001da9
 8001488:	08001dcb 	.word	0x08001dcb
 800148c:	08001e03 	.word	0x08001e03
 8001490:	08001e27 	.word	0x08001e27

08001494 <_cleanup_r>:
 8001494:	4901      	ldr	r1, [pc, #4]	; (800149c <_cleanup_r+0x8>)
 8001496:	f000 b885 	b.w	80015a4 <_fwalk_reent>
 800149a:	bf00      	nop
 800149c:	080013f9 	.word	0x080013f9

080014a0 <__sfmoreglue>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	1e4a      	subs	r2, r1, #1
 80014a4:	2568      	movs	r5, #104	; 0x68
 80014a6:	4355      	muls	r5, r2
 80014a8:	460e      	mov	r6, r1
 80014aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014ae:	f000 f949 	bl	8001744 <_malloc_r>
 80014b2:	4604      	mov	r4, r0
 80014b4:	b140      	cbz	r0, 80014c8 <__sfmoreglue+0x28>
 80014b6:	2100      	movs	r1, #0
 80014b8:	e9c0 1600 	strd	r1, r6, [r0]
 80014bc:	300c      	adds	r0, #12
 80014be:	60a0      	str	r0, [r4, #8]
 80014c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014c4:	f7ff fdce 	bl	8001064 <memset>
 80014c8:	4620      	mov	r0, r4
 80014ca:	bd70      	pop	{r4, r5, r6, pc}

080014cc <__sinit>:
 80014cc:	6983      	ldr	r3, [r0, #24]
 80014ce:	b510      	push	{r4, lr}
 80014d0:	4604      	mov	r4, r0
 80014d2:	bb33      	cbnz	r3, 8001522 <__sinit+0x56>
 80014d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80014d8:	6503      	str	r3, [r0, #80]	; 0x50
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <__sinit+0x58>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <__sinit+0x5c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6282      	str	r2, [r0, #40]	; 0x28
 80014e2:	4298      	cmp	r0, r3
 80014e4:	bf04      	itt	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	6183      	streq	r3, [r0, #24]
 80014ea:	f000 f81f 	bl	800152c <__sfp>
 80014ee:	6060      	str	r0, [r4, #4]
 80014f0:	4620      	mov	r0, r4
 80014f2:	f000 f81b 	bl	800152c <__sfp>
 80014f6:	60a0      	str	r0, [r4, #8]
 80014f8:	4620      	mov	r0, r4
 80014fa:	f000 f817 	bl	800152c <__sfp>
 80014fe:	2200      	movs	r2, #0
 8001500:	60e0      	str	r0, [r4, #12]
 8001502:	2104      	movs	r1, #4
 8001504:	6860      	ldr	r0, [r4, #4]
 8001506:	f7ff ffa1 	bl	800144c <std>
 800150a:	2201      	movs	r2, #1
 800150c:	2109      	movs	r1, #9
 800150e:	68a0      	ldr	r0, [r4, #8]
 8001510:	f7ff ff9c 	bl	800144c <std>
 8001514:	2202      	movs	r2, #2
 8001516:	2112      	movs	r1, #18
 8001518:	68e0      	ldr	r0, [r4, #12]
 800151a:	f7ff ff97 	bl	800144c <std>
 800151e:	2301      	movs	r3, #1
 8001520:	61a3      	str	r3, [r4, #24]
 8001522:	bd10      	pop	{r4, pc}
 8001524:	080024e0 	.word	0x080024e0
 8001528:	08001495 	.word	0x08001495

0800152c <__sfp>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <__sfp+0x70>)
 8001530:	681e      	ldr	r6, [r3, #0]
 8001532:	69b3      	ldr	r3, [r6, #24]
 8001534:	4607      	mov	r7, r0
 8001536:	b913      	cbnz	r3, 800153e <__sfp+0x12>
 8001538:	4630      	mov	r0, r6
 800153a:	f7ff ffc7 	bl	80014cc <__sinit>
 800153e:	3648      	adds	r6, #72	; 0x48
 8001540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001544:	3b01      	subs	r3, #1
 8001546:	d503      	bpl.n	8001550 <__sfp+0x24>
 8001548:	6833      	ldr	r3, [r6, #0]
 800154a:	b133      	cbz	r3, 800155a <__sfp+0x2e>
 800154c:	6836      	ldr	r6, [r6, #0]
 800154e:	e7f7      	b.n	8001540 <__sfp+0x14>
 8001550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001554:	b16d      	cbz	r5, 8001572 <__sfp+0x46>
 8001556:	3468      	adds	r4, #104	; 0x68
 8001558:	e7f4      	b.n	8001544 <__sfp+0x18>
 800155a:	2104      	movs	r1, #4
 800155c:	4638      	mov	r0, r7
 800155e:	f7ff ff9f 	bl	80014a0 <__sfmoreglue>
 8001562:	6030      	str	r0, [r6, #0]
 8001564:	2800      	cmp	r0, #0
 8001566:	d1f1      	bne.n	800154c <__sfp+0x20>
 8001568:	230c      	movs	r3, #12
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4604      	mov	r4, r0
 800156e:	4620      	mov	r0, r4
 8001570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <__sfp+0x74>)
 8001574:	6665      	str	r5, [r4, #100]	; 0x64
 8001576:	e9c4 5500 	strd	r5, r5, [r4]
 800157a:	60a5      	str	r5, [r4, #8]
 800157c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001580:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001584:	2208      	movs	r2, #8
 8001586:	4629      	mov	r1, r5
 8001588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800158c:	f7ff fd6a 	bl	8001064 <memset>
 8001590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001598:	e7e9      	b.n	800156e <__sfp+0x42>
 800159a:	bf00      	nop
 800159c:	080024e0 	.word	0x080024e0
 80015a0:	ffff0001 	.word	0xffff0001

080015a4 <_fwalk_reent>:
 80015a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a8:	4680      	mov	r8, r0
 80015aa:	4689      	mov	r9, r1
 80015ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015b0:	2600      	movs	r6, #0
 80015b2:	b914      	cbnz	r4, 80015ba <_fwalk_reent+0x16>
 80015b4:	4630      	mov	r0, r6
 80015b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80015be:	3f01      	subs	r7, #1
 80015c0:	d501      	bpl.n	80015c6 <_fwalk_reent+0x22>
 80015c2:	6824      	ldr	r4, [r4, #0]
 80015c4:	e7f5      	b.n	80015b2 <_fwalk_reent+0xe>
 80015c6:	89ab      	ldrh	r3, [r5, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d907      	bls.n	80015dc <_fwalk_reent+0x38>
 80015cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015d0:	3301      	adds	r3, #1
 80015d2:	d003      	beq.n	80015dc <_fwalk_reent+0x38>
 80015d4:	4629      	mov	r1, r5
 80015d6:	4640      	mov	r0, r8
 80015d8:	47c8      	blx	r9
 80015da:	4306      	orrs	r6, r0
 80015dc:	3568      	adds	r5, #104	; 0x68
 80015de:	e7ee      	b.n	80015be <_fwalk_reent+0x1a>

080015e0 <__swhatbuf_r>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	460e      	mov	r6, r1
 80015e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e8:	2900      	cmp	r1, #0
 80015ea:	b096      	sub	sp, #88	; 0x58
 80015ec:	4614      	mov	r4, r2
 80015ee:	461d      	mov	r5, r3
 80015f0:	da07      	bge.n	8001602 <__swhatbuf_r+0x22>
 80015f2:	2300      	movs	r3, #0
 80015f4:	602b      	str	r3, [r5, #0]
 80015f6:	89b3      	ldrh	r3, [r6, #12]
 80015f8:	061a      	lsls	r2, r3, #24
 80015fa:	d410      	bmi.n	800161e <__swhatbuf_r+0x3e>
 80015fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001600:	e00e      	b.n	8001620 <__swhatbuf_r+0x40>
 8001602:	466a      	mov	r2, sp
 8001604:	f000 fc36 	bl	8001e74 <_fstat_r>
 8001608:	2800      	cmp	r0, #0
 800160a:	dbf2      	blt.n	80015f2 <__swhatbuf_r+0x12>
 800160c:	9a01      	ldr	r2, [sp, #4]
 800160e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001616:	425a      	negs	r2, r3
 8001618:	415a      	adcs	r2, r3
 800161a:	602a      	str	r2, [r5, #0]
 800161c:	e7ee      	b.n	80015fc <__swhatbuf_r+0x1c>
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	2000      	movs	r0, #0
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	b016      	add	sp, #88	; 0x58
 8001626:	bd70      	pop	{r4, r5, r6, pc}

08001628 <__smakebuf_r>:
 8001628:	898b      	ldrh	r3, [r1, #12]
 800162a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800162c:	079d      	lsls	r5, r3, #30
 800162e:	4606      	mov	r6, r0
 8001630:	460c      	mov	r4, r1
 8001632:	d507      	bpl.n	8001644 <__smakebuf_r+0x1c>
 8001634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	6123      	str	r3, [r4, #16]
 800163c:	2301      	movs	r3, #1
 800163e:	6163      	str	r3, [r4, #20]
 8001640:	b002      	add	sp, #8
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	ab01      	add	r3, sp, #4
 8001646:	466a      	mov	r2, sp
 8001648:	f7ff ffca 	bl	80015e0 <__swhatbuf_r>
 800164c:	9900      	ldr	r1, [sp, #0]
 800164e:	4605      	mov	r5, r0
 8001650:	4630      	mov	r0, r6
 8001652:	f000 f877 	bl	8001744 <_malloc_r>
 8001656:	b948      	cbnz	r0, 800166c <__smakebuf_r+0x44>
 8001658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800165c:	059a      	lsls	r2, r3, #22
 800165e:	d4ef      	bmi.n	8001640 <__smakebuf_r+0x18>
 8001660:	f023 0303 	bic.w	r3, r3, #3
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	e7e3      	b.n	8001634 <__smakebuf_r+0xc>
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <__smakebuf_r+0x7c>)
 800166e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	6020      	str	r0, [r4, #0]
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	6163      	str	r3, [r4, #20]
 800167e:	9b01      	ldr	r3, [sp, #4]
 8001680:	6120      	str	r0, [r4, #16]
 8001682:	b15b      	cbz	r3, 800169c <__smakebuf_r+0x74>
 8001684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001688:	4630      	mov	r0, r6
 800168a:	f000 fc05 	bl	8001e98 <_isatty_r>
 800168e:	b128      	cbz	r0, 800169c <__smakebuf_r+0x74>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	431d      	orrs	r5, r3
 80016a0:	81a5      	strh	r5, [r4, #12]
 80016a2:	e7cd      	b.n	8001640 <__smakebuf_r+0x18>
 80016a4:	08001495 	.word	0x08001495

080016a8 <_free_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4605      	mov	r5, r0
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d045      	beq.n	800173c <_free_r+0x94>
 80016b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b4:	1f0c      	subs	r4, r1, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bfb8      	it	lt
 80016ba:	18e4      	addlt	r4, r4, r3
 80016bc:	f000 fc0e 	bl	8001edc <__malloc_lock>
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <_free_r+0x98>)
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	4610      	mov	r0, r2
 80016c6:	b933      	cbnz	r3, 80016d6 <_free_r+0x2e>
 80016c8:	6063      	str	r3, [r4, #4]
 80016ca:	6014      	str	r4, [r2, #0]
 80016cc:	4628      	mov	r0, r5
 80016ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d2:	f000 bc04 	b.w	8001ede <__malloc_unlock>
 80016d6:	42a3      	cmp	r3, r4
 80016d8:	d90c      	bls.n	80016f4 <_free_r+0x4c>
 80016da:	6821      	ldr	r1, [r4, #0]
 80016dc:	1862      	adds	r2, r4, r1
 80016de:	4293      	cmp	r3, r2
 80016e0:	bf04      	itt	eq
 80016e2:	681a      	ldreq	r2, [r3, #0]
 80016e4:	685b      	ldreq	r3, [r3, #4]
 80016e6:	6063      	str	r3, [r4, #4]
 80016e8:	bf04      	itt	eq
 80016ea:	1852      	addeq	r2, r2, r1
 80016ec:	6022      	streq	r2, [r4, #0]
 80016ee:	6004      	str	r4, [r0, #0]
 80016f0:	e7ec      	b.n	80016cc <_free_r+0x24>
 80016f2:	4613      	mov	r3, r2
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	b10a      	cbz	r2, 80016fc <_free_r+0x54>
 80016f8:	42a2      	cmp	r2, r4
 80016fa:	d9fa      	bls.n	80016f2 <_free_r+0x4a>
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	1858      	adds	r0, r3, r1
 8001700:	42a0      	cmp	r0, r4
 8001702:	d10b      	bne.n	800171c <_free_r+0x74>
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	4401      	add	r1, r0
 8001708:	1858      	adds	r0, r3, r1
 800170a:	4282      	cmp	r2, r0
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	d1dd      	bne.n	80016cc <_free_r+0x24>
 8001710:	6810      	ldr	r0, [r2, #0]
 8001712:	6852      	ldr	r2, [r2, #4]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	4401      	add	r1, r0
 8001718:	6019      	str	r1, [r3, #0]
 800171a:	e7d7      	b.n	80016cc <_free_r+0x24>
 800171c:	d902      	bls.n	8001724 <_free_r+0x7c>
 800171e:	230c      	movs	r3, #12
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	e7d3      	b.n	80016cc <_free_r+0x24>
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	1821      	adds	r1, r4, r0
 8001728:	428a      	cmp	r2, r1
 800172a:	bf04      	itt	eq
 800172c:	6811      	ldreq	r1, [r2, #0]
 800172e:	6852      	ldreq	r2, [r2, #4]
 8001730:	6062      	str	r2, [r4, #4]
 8001732:	bf04      	itt	eq
 8001734:	1809      	addeq	r1, r1, r0
 8001736:	6021      	streq	r1, [r4, #0]
 8001738:	605c      	str	r4, [r3, #4]
 800173a:	e7c7      	b.n	80016cc <_free_r+0x24>
 800173c:	bd38      	pop	{r3, r4, r5, pc}
 800173e:	bf00      	nop
 8001740:	2000008c 	.word	0x2000008c

08001744 <_malloc_r>:
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	1ccd      	adds	r5, r1, #3
 8001748:	f025 0503 	bic.w	r5, r5, #3
 800174c:	3508      	adds	r5, #8
 800174e:	2d0c      	cmp	r5, #12
 8001750:	bf38      	it	cc
 8001752:	250c      	movcc	r5, #12
 8001754:	2d00      	cmp	r5, #0
 8001756:	4606      	mov	r6, r0
 8001758:	db01      	blt.n	800175e <_malloc_r+0x1a>
 800175a:	42a9      	cmp	r1, r5
 800175c:	d903      	bls.n	8001766 <_malloc_r+0x22>
 800175e:	230c      	movs	r3, #12
 8001760:	6033      	str	r3, [r6, #0]
 8001762:	2000      	movs	r0, #0
 8001764:	bd70      	pop	{r4, r5, r6, pc}
 8001766:	f000 fbb9 	bl	8001edc <__malloc_lock>
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <_malloc_r+0xac>)
 800176c:	6814      	ldr	r4, [r2, #0]
 800176e:	4621      	mov	r1, r4
 8001770:	b991      	cbnz	r1, 8001798 <_malloc_r+0x54>
 8001772:	4c20      	ldr	r4, [pc, #128]	; (80017f4 <_malloc_r+0xb0>)
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	b91b      	cbnz	r3, 8001780 <_malloc_r+0x3c>
 8001778:	4630      	mov	r0, r6
 800177a:	f000 fb05 	bl	8001d88 <_sbrk_r>
 800177e:	6020      	str	r0, [r4, #0]
 8001780:	4629      	mov	r1, r5
 8001782:	4630      	mov	r0, r6
 8001784:	f000 fb00 	bl	8001d88 <_sbrk_r>
 8001788:	1c43      	adds	r3, r0, #1
 800178a:	d124      	bne.n	80017d6 <_malloc_r+0x92>
 800178c:	230c      	movs	r3, #12
 800178e:	6033      	str	r3, [r6, #0]
 8001790:	4630      	mov	r0, r6
 8001792:	f000 fba4 	bl	8001ede <__malloc_unlock>
 8001796:	e7e4      	b.n	8001762 <_malloc_r+0x1e>
 8001798:	680b      	ldr	r3, [r1, #0]
 800179a:	1b5b      	subs	r3, r3, r5
 800179c:	d418      	bmi.n	80017d0 <_malloc_r+0x8c>
 800179e:	2b0b      	cmp	r3, #11
 80017a0:	d90f      	bls.n	80017c2 <_malloc_r+0x7e>
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	50cd      	str	r5, [r1, r3]
 80017a6:	18cc      	adds	r4, r1, r3
 80017a8:	4630      	mov	r0, r6
 80017aa:	f000 fb98 	bl	8001ede <__malloc_unlock>
 80017ae:	f104 000b 	add.w	r0, r4, #11
 80017b2:	1d23      	adds	r3, r4, #4
 80017b4:	f020 0007 	bic.w	r0, r0, #7
 80017b8:	1ac3      	subs	r3, r0, r3
 80017ba:	d0d3      	beq.n	8001764 <_malloc_r+0x20>
 80017bc:	425a      	negs	r2, r3
 80017be:	50e2      	str	r2, [r4, r3]
 80017c0:	e7d0      	b.n	8001764 <_malloc_r+0x20>
 80017c2:	428c      	cmp	r4, r1
 80017c4:	684b      	ldr	r3, [r1, #4]
 80017c6:	bf16      	itet	ne
 80017c8:	6063      	strne	r3, [r4, #4]
 80017ca:	6013      	streq	r3, [r2, #0]
 80017cc:	460c      	movne	r4, r1
 80017ce:	e7eb      	b.n	80017a8 <_malloc_r+0x64>
 80017d0:	460c      	mov	r4, r1
 80017d2:	6849      	ldr	r1, [r1, #4]
 80017d4:	e7cc      	b.n	8001770 <_malloc_r+0x2c>
 80017d6:	1cc4      	adds	r4, r0, #3
 80017d8:	f024 0403 	bic.w	r4, r4, #3
 80017dc:	42a0      	cmp	r0, r4
 80017de:	d005      	beq.n	80017ec <_malloc_r+0xa8>
 80017e0:	1a21      	subs	r1, r4, r0
 80017e2:	4630      	mov	r0, r6
 80017e4:	f000 fad0 	bl	8001d88 <_sbrk_r>
 80017e8:	3001      	adds	r0, #1
 80017ea:	d0cf      	beq.n	800178c <_malloc_r+0x48>
 80017ec:	6025      	str	r5, [r4, #0]
 80017ee:	e7db      	b.n	80017a8 <_malloc_r+0x64>
 80017f0:	2000008c 	.word	0x2000008c
 80017f4:	20000090 	.word	0x20000090

080017f8 <__sfputc_r>:
 80017f8:	6893      	ldr	r3, [r2, #8]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	b410      	push	{r4}
 8001800:	6093      	str	r3, [r2, #8]
 8001802:	da08      	bge.n	8001816 <__sfputc_r+0x1e>
 8001804:	6994      	ldr	r4, [r2, #24]
 8001806:	42a3      	cmp	r3, r4
 8001808:	db01      	blt.n	800180e <__sfputc_r+0x16>
 800180a:	290a      	cmp	r1, #10
 800180c:	d103      	bne.n	8001816 <__sfputc_r+0x1e>
 800180e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001812:	f7ff bcab 	b.w	800116c <__swbuf_r>
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	1c58      	adds	r0, r3, #1
 800181a:	6010      	str	r0, [r2, #0]
 800181c:	7019      	strb	r1, [r3, #0]
 800181e:	4608      	mov	r0, r1
 8001820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001824:	4770      	bx	lr

08001826 <__sfputs_r>:
 8001826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001828:	4606      	mov	r6, r0
 800182a:	460f      	mov	r7, r1
 800182c:	4614      	mov	r4, r2
 800182e:	18d5      	adds	r5, r2, r3
 8001830:	42ac      	cmp	r4, r5
 8001832:	d101      	bne.n	8001838 <__sfputs_r+0x12>
 8001834:	2000      	movs	r0, #0
 8001836:	e007      	b.n	8001848 <__sfputs_r+0x22>
 8001838:	463a      	mov	r2, r7
 800183a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff ffda 	bl	80017f8 <__sfputc_r>
 8001844:	1c43      	adds	r3, r0, #1
 8001846:	d1f3      	bne.n	8001830 <__sfputs_r+0xa>
 8001848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800184c <_vfiprintf_r>:
 800184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001850:	460c      	mov	r4, r1
 8001852:	b09d      	sub	sp, #116	; 0x74
 8001854:	4617      	mov	r7, r2
 8001856:	461d      	mov	r5, r3
 8001858:	4606      	mov	r6, r0
 800185a:	b118      	cbz	r0, 8001864 <_vfiprintf_r+0x18>
 800185c:	6983      	ldr	r3, [r0, #24]
 800185e:	b90b      	cbnz	r3, 8001864 <_vfiprintf_r+0x18>
 8001860:	f7ff fe34 	bl	80014cc <__sinit>
 8001864:	4b7c      	ldr	r3, [pc, #496]	; (8001a58 <_vfiprintf_r+0x20c>)
 8001866:	429c      	cmp	r4, r3
 8001868:	d158      	bne.n	800191c <_vfiprintf_r+0xd0>
 800186a:	6874      	ldr	r4, [r6, #4]
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	0718      	lsls	r0, r3, #28
 8001870:	d55e      	bpl.n	8001930 <_vfiprintf_r+0xe4>
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d05b      	beq.n	8001930 <_vfiprintf_r+0xe4>
 8001878:	2300      	movs	r3, #0
 800187a:	9309      	str	r3, [sp, #36]	; 0x24
 800187c:	2320      	movs	r3, #32
 800187e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001882:	2330      	movs	r3, #48	; 0x30
 8001884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001888:	9503      	str	r5, [sp, #12]
 800188a:	f04f 0b01 	mov.w	fp, #1
 800188e:	46b8      	mov	r8, r7
 8001890:	4645      	mov	r5, r8
 8001892:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001896:	b10b      	cbz	r3, 800189c <_vfiprintf_r+0x50>
 8001898:	2b25      	cmp	r3, #37	; 0x25
 800189a:	d154      	bne.n	8001946 <_vfiprintf_r+0xfa>
 800189c:	ebb8 0a07 	subs.w	sl, r8, r7
 80018a0:	d00b      	beq.n	80018ba <_vfiprintf_r+0x6e>
 80018a2:	4653      	mov	r3, sl
 80018a4:	463a      	mov	r2, r7
 80018a6:	4621      	mov	r1, r4
 80018a8:	4630      	mov	r0, r6
 80018aa:	f7ff ffbc 	bl	8001826 <__sfputs_r>
 80018ae:	3001      	adds	r0, #1
 80018b0:	f000 80c2 	beq.w	8001a38 <_vfiprintf_r+0x1ec>
 80018b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018b6:	4453      	add	r3, sl
 80018b8:	9309      	str	r3, [sp, #36]	; 0x24
 80018ba:	f898 3000 	ldrb.w	r3, [r8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80ba 	beq.w	8001a38 <_vfiprintf_r+0x1ec>
 80018c4:	2300      	movs	r3, #0
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018ce:	9304      	str	r3, [sp, #16]
 80018d0:	9307      	str	r3, [sp, #28]
 80018d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018d6:	931a      	str	r3, [sp, #104]	; 0x68
 80018d8:	46a8      	mov	r8, r5
 80018da:	2205      	movs	r2, #5
 80018dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80018e0:	485e      	ldr	r0, [pc, #376]	; (8001a5c <_vfiprintf_r+0x210>)
 80018e2:	f7fe fc9d 	bl	8000220 <memchr>
 80018e6:	9b04      	ldr	r3, [sp, #16]
 80018e8:	bb78      	cbnz	r0, 800194a <_vfiprintf_r+0xfe>
 80018ea:	06d9      	lsls	r1, r3, #27
 80018ec:	bf44      	itt	mi
 80018ee:	2220      	movmi	r2, #32
 80018f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018f4:	071a      	lsls	r2, r3, #28
 80018f6:	bf44      	itt	mi
 80018f8:	222b      	movmi	r2, #43	; 0x2b
 80018fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018fe:	782a      	ldrb	r2, [r5, #0]
 8001900:	2a2a      	cmp	r2, #42	; 0x2a
 8001902:	d02a      	beq.n	800195a <_vfiprintf_r+0x10e>
 8001904:	9a07      	ldr	r2, [sp, #28]
 8001906:	46a8      	mov	r8, r5
 8001908:	2000      	movs	r0, #0
 800190a:	250a      	movs	r5, #10
 800190c:	4641      	mov	r1, r8
 800190e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001912:	3b30      	subs	r3, #48	; 0x30
 8001914:	2b09      	cmp	r3, #9
 8001916:	d969      	bls.n	80019ec <_vfiprintf_r+0x1a0>
 8001918:	b360      	cbz	r0, 8001974 <_vfiprintf_r+0x128>
 800191a:	e024      	b.n	8001966 <_vfiprintf_r+0x11a>
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <_vfiprintf_r+0x214>)
 800191e:	429c      	cmp	r4, r3
 8001920:	d101      	bne.n	8001926 <_vfiprintf_r+0xda>
 8001922:	68b4      	ldr	r4, [r6, #8]
 8001924:	e7a2      	b.n	800186c <_vfiprintf_r+0x20>
 8001926:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <_vfiprintf_r+0x218>)
 8001928:	429c      	cmp	r4, r3
 800192a:	bf08      	it	eq
 800192c:	68f4      	ldreq	r4, [r6, #12]
 800192e:	e79d      	b.n	800186c <_vfiprintf_r+0x20>
 8001930:	4621      	mov	r1, r4
 8001932:	4630      	mov	r0, r6
 8001934:	f7ff fc6c 	bl	8001210 <__swsetup_r>
 8001938:	2800      	cmp	r0, #0
 800193a:	d09d      	beq.n	8001878 <_vfiprintf_r+0x2c>
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	b01d      	add	sp, #116	; 0x74
 8001942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001946:	46a8      	mov	r8, r5
 8001948:	e7a2      	b.n	8001890 <_vfiprintf_r+0x44>
 800194a:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <_vfiprintf_r+0x210>)
 800194c:	1a80      	subs	r0, r0, r2
 800194e:	fa0b f000 	lsl.w	r0, fp, r0
 8001952:	4318      	orrs	r0, r3
 8001954:	9004      	str	r0, [sp, #16]
 8001956:	4645      	mov	r5, r8
 8001958:	e7be      	b.n	80018d8 <_vfiprintf_r+0x8c>
 800195a:	9a03      	ldr	r2, [sp, #12]
 800195c:	1d11      	adds	r1, r2, #4
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	9103      	str	r1, [sp, #12]
 8001962:	2a00      	cmp	r2, #0
 8001964:	db01      	blt.n	800196a <_vfiprintf_r+0x11e>
 8001966:	9207      	str	r2, [sp, #28]
 8001968:	e004      	b.n	8001974 <_vfiprintf_r+0x128>
 800196a:	4252      	negs	r2, r2
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	9207      	str	r2, [sp, #28]
 8001972:	9304      	str	r3, [sp, #16]
 8001974:	f898 3000 	ldrb.w	r3, [r8]
 8001978:	2b2e      	cmp	r3, #46	; 0x2e
 800197a:	d10e      	bne.n	800199a <_vfiprintf_r+0x14e>
 800197c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001980:	2b2a      	cmp	r3, #42	; 0x2a
 8001982:	d138      	bne.n	80019f6 <_vfiprintf_r+0x1aa>
 8001984:	9b03      	ldr	r3, [sp, #12]
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	9203      	str	r2, [sp, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfb8      	it	lt
 8001990:	f04f 33ff 	movlt.w	r3, #4294967295
 8001994:	f108 0802 	add.w	r8, r8, #2
 8001998:	9305      	str	r3, [sp, #20]
 800199a:	4d33      	ldr	r5, [pc, #204]	; (8001a68 <_vfiprintf_r+0x21c>)
 800199c:	f898 1000 	ldrb.w	r1, [r8]
 80019a0:	2203      	movs	r2, #3
 80019a2:	4628      	mov	r0, r5
 80019a4:	f7fe fc3c 	bl	8000220 <memchr>
 80019a8:	b140      	cbz	r0, 80019bc <_vfiprintf_r+0x170>
 80019aa:	2340      	movs	r3, #64	; 0x40
 80019ac:	1b40      	subs	r0, r0, r5
 80019ae:	fa03 f000 	lsl.w	r0, r3, r0
 80019b2:	9b04      	ldr	r3, [sp, #16]
 80019b4:	4303      	orrs	r3, r0
 80019b6:	f108 0801 	add.w	r8, r8, #1
 80019ba:	9304      	str	r3, [sp, #16]
 80019bc:	f898 1000 	ldrb.w	r1, [r8]
 80019c0:	482a      	ldr	r0, [pc, #168]	; (8001a6c <_vfiprintf_r+0x220>)
 80019c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019c6:	2206      	movs	r2, #6
 80019c8:	f108 0701 	add.w	r7, r8, #1
 80019cc:	f7fe fc28 	bl	8000220 <memchr>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d037      	beq.n	8001a44 <_vfiprintf_r+0x1f8>
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <_vfiprintf_r+0x224>)
 80019d6:	bb1b      	cbnz	r3, 8001a20 <_vfiprintf_r+0x1d4>
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	3307      	adds	r3, #7
 80019dc:	f023 0307 	bic.w	r3, r3, #7
 80019e0:	3308      	adds	r3, #8
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019e6:	444b      	add	r3, r9
 80019e8:	9309      	str	r3, [sp, #36]	; 0x24
 80019ea:	e750      	b.n	800188e <_vfiprintf_r+0x42>
 80019ec:	fb05 3202 	mla	r2, r5, r2, r3
 80019f0:	2001      	movs	r0, #1
 80019f2:	4688      	mov	r8, r1
 80019f4:	e78a      	b.n	800190c <_vfiprintf_r+0xc0>
 80019f6:	2300      	movs	r3, #0
 80019f8:	f108 0801 	add.w	r8, r8, #1
 80019fc:	9305      	str	r3, [sp, #20]
 80019fe:	4619      	mov	r1, r3
 8001a00:	250a      	movs	r5, #10
 8001a02:	4640      	mov	r0, r8
 8001a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a08:	3a30      	subs	r2, #48	; 0x30
 8001a0a:	2a09      	cmp	r2, #9
 8001a0c:	d903      	bls.n	8001a16 <_vfiprintf_r+0x1ca>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0c3      	beq.n	800199a <_vfiprintf_r+0x14e>
 8001a12:	9105      	str	r1, [sp, #20]
 8001a14:	e7c1      	b.n	800199a <_vfiprintf_r+0x14e>
 8001a16:	fb05 2101 	mla	r1, r5, r1, r2
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	4680      	mov	r8, r0
 8001a1e:	e7f0      	b.n	8001a02 <_vfiprintf_r+0x1b6>
 8001a20:	ab03      	add	r3, sp, #12
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4622      	mov	r2, r4
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_vfiprintf_r+0x228>)
 8001a28:	a904      	add	r1, sp, #16
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f3af 8000 	nop.w
 8001a30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a34:	4681      	mov	r9, r0
 8001a36:	d1d5      	bne.n	80019e4 <_vfiprintf_r+0x198>
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	065b      	lsls	r3, r3, #25
 8001a3c:	f53f af7e 	bmi.w	800193c <_vfiprintf_r+0xf0>
 8001a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a42:	e77d      	b.n	8001940 <_vfiprintf_r+0xf4>
 8001a44:	ab03      	add	r3, sp, #12
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4622      	mov	r2, r4
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <_vfiprintf_r+0x228>)
 8001a4c:	a904      	add	r1, sp, #16
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f000 f888 	bl	8001b64 <_printf_i>
 8001a54:	e7ec      	b.n	8001a30 <_vfiprintf_r+0x1e4>
 8001a56:	bf00      	nop
 8001a58:	08002504 	.word	0x08002504
 8001a5c:	08002544 	.word	0x08002544
 8001a60:	08002524 	.word	0x08002524
 8001a64:	080024e4 	.word	0x080024e4
 8001a68:	0800254a 	.word	0x0800254a
 8001a6c:	0800254e 	.word	0x0800254e
 8001a70:	00000000 	.word	0x00000000
 8001a74:	08001827 	.word	0x08001827

08001a78 <_printf_common>:
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	4691      	mov	r9, r2
 8001a7e:	461f      	mov	r7, r3
 8001a80:	688a      	ldr	r2, [r1, #8]
 8001a82:	690b      	ldr	r3, [r1, #16]
 8001a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bfb8      	it	lt
 8001a8c:	4613      	movlt	r3, r2
 8001a8e:	f8c9 3000 	str.w	r3, [r9]
 8001a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a96:	4606      	mov	r6, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	b112      	cbz	r2, 8001aa2 <_printf_common+0x2a>
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f8c9 3000 	str.w	r3, [r9]
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	0699      	lsls	r1, r3, #26
 8001aa6:	bf42      	ittt	mi
 8001aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001aac:	3302      	addmi	r3, #2
 8001aae:	f8c9 3000 	strmi.w	r3, [r9]
 8001ab2:	6825      	ldr	r5, [r4, #0]
 8001ab4:	f015 0506 	ands.w	r5, r5, #6
 8001ab8:	d107      	bne.n	8001aca <_printf_common+0x52>
 8001aba:	f104 0a19 	add.w	sl, r4, #25
 8001abe:	68e3      	ldr	r3, [r4, #12]
 8001ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	42ab      	cmp	r3, r5
 8001ac8:	dc28      	bgt.n	8001b1c <_printf_common+0xa4>
 8001aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	3300      	adds	r3, #0
 8001ad2:	bf18      	it	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	0692      	lsls	r2, r2, #26
 8001ad8:	d42d      	bmi.n	8001b36 <_printf_common+0xbe>
 8001ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ade:	4639      	mov	r1, r7
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	47c0      	blx	r8
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	d020      	beq.n	8001b2a <_printf_common+0xb2>
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	68e5      	ldr	r5, [r4, #12]
 8001aec:	f8d9 2000 	ldr.w	r2, [r9]
 8001af0:	f003 0306 	and.w	r3, r3, #6
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	bf08      	it	eq
 8001af8:	1aad      	subeq	r5, r5, r2
 8001afa:	68a3      	ldr	r3, [r4, #8]
 8001afc:	6922      	ldr	r2, [r4, #16]
 8001afe:	bf0c      	ite	eq
 8001b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b04:	2500      	movne	r5, #0
 8001b06:	4293      	cmp	r3, r2
 8001b08:	bfc4      	itt	gt
 8001b0a:	1a9b      	subgt	r3, r3, r2
 8001b0c:	18ed      	addgt	r5, r5, r3
 8001b0e:	f04f 0900 	mov.w	r9, #0
 8001b12:	341a      	adds	r4, #26
 8001b14:	454d      	cmp	r5, r9
 8001b16:	d11a      	bne.n	8001b4e <_printf_common+0xd6>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e008      	b.n	8001b2e <_printf_common+0xb6>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4652      	mov	r2, sl
 8001b20:	4639      	mov	r1, r7
 8001b22:	4630      	mov	r0, r6
 8001b24:	47c0      	blx	r8
 8001b26:	3001      	adds	r0, #1
 8001b28:	d103      	bne.n	8001b32 <_printf_common+0xba>
 8001b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b32:	3501      	adds	r5, #1
 8001b34:	e7c3      	b.n	8001abe <_printf_common+0x46>
 8001b36:	18e1      	adds	r1, r4, r3
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	2030      	movs	r0, #48	; 0x30
 8001b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b40:	4422      	add	r2, r4
 8001b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	e7c5      	b.n	8001ada <_printf_common+0x62>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4622      	mov	r2, r4
 8001b52:	4639      	mov	r1, r7
 8001b54:	4630      	mov	r0, r6
 8001b56:	47c0      	blx	r8
 8001b58:	3001      	adds	r0, #1
 8001b5a:	d0e6      	beq.n	8001b2a <_printf_common+0xb2>
 8001b5c:	f109 0901 	add.w	r9, r9, #1
 8001b60:	e7d8      	b.n	8001b14 <_printf_common+0x9c>
	...

08001b64 <_printf_i>:
 8001b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	7e09      	ldrb	r1, [r1, #24]
 8001b70:	b085      	sub	sp, #20
 8001b72:	296e      	cmp	r1, #110	; 0x6e
 8001b74:	4617      	mov	r7, r2
 8001b76:	4606      	mov	r6, r0
 8001b78:	4698      	mov	r8, r3
 8001b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b7c:	f000 80b3 	beq.w	8001ce6 <_printf_i+0x182>
 8001b80:	d822      	bhi.n	8001bc8 <_printf_i+0x64>
 8001b82:	2963      	cmp	r1, #99	; 0x63
 8001b84:	d036      	beq.n	8001bf4 <_printf_i+0x90>
 8001b86:	d80a      	bhi.n	8001b9e <_printf_i+0x3a>
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	f000 80b9 	beq.w	8001d00 <_printf_i+0x19c>
 8001b8e:	2958      	cmp	r1, #88	; 0x58
 8001b90:	f000 8083 	beq.w	8001c9a <_printf_i+0x136>
 8001b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b9c:	e032      	b.n	8001c04 <_printf_i+0xa0>
 8001b9e:	2964      	cmp	r1, #100	; 0x64
 8001ba0:	d001      	beq.n	8001ba6 <_printf_i+0x42>
 8001ba2:	2969      	cmp	r1, #105	; 0x69
 8001ba4:	d1f6      	bne.n	8001b94 <_printf_i+0x30>
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	0605      	lsls	r5, r0, #24
 8001bac:	f103 0104 	add.w	r1, r3, #4
 8001bb0:	d52a      	bpl.n	8001c08 <_printf_i+0xa4>
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6011      	str	r1, [r2, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	da03      	bge.n	8001bc2 <_printf_i+0x5e>
 8001bba:	222d      	movs	r2, #45	; 0x2d
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bc2:	486f      	ldr	r0, [pc, #444]	; (8001d80 <_printf_i+0x21c>)
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	e039      	b.n	8001c3c <_printf_i+0xd8>
 8001bc8:	2973      	cmp	r1, #115	; 0x73
 8001bca:	f000 809d 	beq.w	8001d08 <_printf_i+0x1a4>
 8001bce:	d808      	bhi.n	8001be2 <_printf_i+0x7e>
 8001bd0:	296f      	cmp	r1, #111	; 0x6f
 8001bd2:	d020      	beq.n	8001c16 <_printf_i+0xb2>
 8001bd4:	2970      	cmp	r1, #112	; 0x70
 8001bd6:	d1dd      	bne.n	8001b94 <_printf_i+0x30>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f043 0320 	orr.w	r3, r3, #32
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	e003      	b.n	8001bea <_printf_i+0x86>
 8001be2:	2975      	cmp	r1, #117	; 0x75
 8001be4:	d017      	beq.n	8001c16 <_printf_i+0xb2>
 8001be6:	2978      	cmp	r1, #120	; 0x78
 8001be8:	d1d4      	bne.n	8001b94 <_printf_i+0x30>
 8001bea:	2378      	movs	r3, #120	; 0x78
 8001bec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bf0:	4864      	ldr	r0, [pc, #400]	; (8001d84 <_printf_i+0x220>)
 8001bf2:	e055      	b.n	8001ca0 <_printf_i+0x13c>
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	1d19      	adds	r1, r3, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6011      	str	r1, [r2, #0]
 8001bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c04:	2301      	movs	r3, #1
 8001c06:	e08c      	b.n	8001d22 <_printf_i+0x1be>
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6011      	str	r1, [r2, #0]
 8001c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c10:	bf18      	it	ne
 8001c12:	b21b      	sxthne	r3, r3
 8001c14:	e7cf      	b.n	8001bb6 <_printf_i+0x52>
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	6825      	ldr	r5, [r4, #0]
 8001c1a:	1d18      	adds	r0, r3, #4
 8001c1c:	6010      	str	r0, [r2, #0]
 8001c1e:	0628      	lsls	r0, r5, #24
 8001c20:	d501      	bpl.n	8001c26 <_printf_i+0xc2>
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e002      	b.n	8001c2c <_printf_i+0xc8>
 8001c26:	0668      	lsls	r0, r5, #25
 8001c28:	d5fb      	bpl.n	8001c22 <_printf_i+0xbe>
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	4854      	ldr	r0, [pc, #336]	; (8001d80 <_printf_i+0x21c>)
 8001c2e:	296f      	cmp	r1, #111	; 0x6f
 8001c30:	bf14      	ite	ne
 8001c32:	220a      	movne	r2, #10
 8001c34:	2208      	moveq	r2, #8
 8001c36:	2100      	movs	r1, #0
 8001c38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c3c:	6865      	ldr	r5, [r4, #4]
 8001c3e:	60a5      	str	r5, [r4, #8]
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	f2c0 8095 	blt.w	8001d70 <_printf_i+0x20c>
 8001c46:	6821      	ldr	r1, [r4, #0]
 8001c48:	f021 0104 	bic.w	r1, r1, #4
 8001c4c:	6021      	str	r1, [r4, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d13d      	bne.n	8001cce <_printf_i+0x16a>
 8001c52:	2d00      	cmp	r5, #0
 8001c54:	f040 808e 	bne.w	8001d74 <_printf_i+0x210>
 8001c58:	4665      	mov	r5, ip
 8001c5a:	2a08      	cmp	r2, #8
 8001c5c:	d10b      	bne.n	8001c76 <_printf_i+0x112>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	07db      	lsls	r3, r3, #31
 8001c62:	d508      	bpl.n	8001c76 <_printf_i+0x112>
 8001c64:	6923      	ldr	r3, [r4, #16]
 8001c66:	6862      	ldr	r2, [r4, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	bfde      	ittt	le
 8001c6c:	2330      	movle	r3, #48	; 0x30
 8001c6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c76:	ebac 0305 	sub.w	r3, ip, r5
 8001c7a:	6123      	str	r3, [r4, #16]
 8001c7c:	f8cd 8000 	str.w	r8, [sp]
 8001c80:	463b      	mov	r3, r7
 8001c82:	aa03      	add	r2, sp, #12
 8001c84:	4621      	mov	r1, r4
 8001c86:	4630      	mov	r0, r6
 8001c88:	f7ff fef6 	bl	8001a78 <_printf_common>
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	d14d      	bne.n	8001d2c <_printf_i+0x1c8>
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	b005      	add	sp, #20
 8001c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c9a:	4839      	ldr	r0, [pc, #228]	; (8001d80 <_printf_i+0x21c>)
 8001c9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	6821      	ldr	r1, [r4, #0]
 8001ca4:	1d1d      	adds	r5, r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6015      	str	r5, [r2, #0]
 8001caa:	060a      	lsls	r2, r1, #24
 8001cac:	d50b      	bpl.n	8001cc6 <_printf_i+0x162>
 8001cae:	07ca      	lsls	r2, r1, #31
 8001cb0:	bf44      	itt	mi
 8001cb2:	f041 0120 	orrmi.w	r1, r1, #32
 8001cb6:	6021      	strmi	r1, [r4, #0]
 8001cb8:	b91b      	cbnz	r3, 8001cc2 <_printf_i+0x15e>
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	f022 0220 	bic.w	r2, r2, #32
 8001cc0:	6022      	str	r2, [r4, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	e7b7      	b.n	8001c36 <_printf_i+0xd2>
 8001cc6:	064d      	lsls	r5, r1, #25
 8001cc8:	bf48      	it	mi
 8001cca:	b29b      	uxthmi	r3, r3
 8001ccc:	e7ef      	b.n	8001cae <_printf_i+0x14a>
 8001cce:	4665      	mov	r5, ip
 8001cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cd4:	fb02 3311 	mls	r3, r2, r1, r3
 8001cd8:	5cc3      	ldrb	r3, [r0, r3]
 8001cda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cde:	460b      	mov	r3, r1
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d1f5      	bne.n	8001cd0 <_printf_i+0x16c>
 8001ce4:	e7b9      	b.n	8001c5a <_printf_i+0xf6>
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	6825      	ldr	r5, [r4, #0]
 8001cea:	6961      	ldr	r1, [r4, #20]
 8001cec:	1d18      	adds	r0, r3, #4
 8001cee:	6010      	str	r0, [r2, #0]
 8001cf0:	0628      	lsls	r0, r5, #24
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	d501      	bpl.n	8001cfa <_printf_i+0x196>
 8001cf6:	6019      	str	r1, [r3, #0]
 8001cf8:	e002      	b.n	8001d00 <_printf_i+0x19c>
 8001cfa:	066a      	lsls	r2, r5, #25
 8001cfc:	d5fb      	bpl.n	8001cf6 <_printf_i+0x192>
 8001cfe:	8019      	strh	r1, [r3, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	6123      	str	r3, [r4, #16]
 8001d04:	4665      	mov	r5, ip
 8001d06:	e7b9      	b.n	8001c7c <_printf_i+0x118>
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	1d19      	adds	r1, r3, #4
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	681d      	ldr	r5, [r3, #0]
 8001d10:	6862      	ldr	r2, [r4, #4]
 8001d12:	2100      	movs	r1, #0
 8001d14:	4628      	mov	r0, r5
 8001d16:	f7fe fa83 	bl	8000220 <memchr>
 8001d1a:	b108      	cbz	r0, 8001d20 <_printf_i+0x1bc>
 8001d1c:	1b40      	subs	r0, r0, r5
 8001d1e:	6060      	str	r0, [r4, #4]
 8001d20:	6863      	ldr	r3, [r4, #4]
 8001d22:	6123      	str	r3, [r4, #16]
 8001d24:	2300      	movs	r3, #0
 8001d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d2a:	e7a7      	b.n	8001c7c <_printf_i+0x118>
 8001d2c:	6923      	ldr	r3, [r4, #16]
 8001d2e:	462a      	mov	r2, r5
 8001d30:	4639      	mov	r1, r7
 8001d32:	4630      	mov	r0, r6
 8001d34:	47c0      	blx	r8
 8001d36:	3001      	adds	r0, #1
 8001d38:	d0aa      	beq.n	8001c90 <_printf_i+0x12c>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	079b      	lsls	r3, r3, #30
 8001d3e:	d413      	bmi.n	8001d68 <_printf_i+0x204>
 8001d40:	68e0      	ldr	r0, [r4, #12]
 8001d42:	9b03      	ldr	r3, [sp, #12]
 8001d44:	4298      	cmp	r0, r3
 8001d46:	bfb8      	it	lt
 8001d48:	4618      	movlt	r0, r3
 8001d4a:	e7a3      	b.n	8001c94 <_printf_i+0x130>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	464a      	mov	r2, r9
 8001d50:	4639      	mov	r1, r7
 8001d52:	4630      	mov	r0, r6
 8001d54:	47c0      	blx	r8
 8001d56:	3001      	adds	r0, #1
 8001d58:	d09a      	beq.n	8001c90 <_printf_i+0x12c>
 8001d5a:	3501      	adds	r5, #1
 8001d5c:	68e3      	ldr	r3, [r4, #12]
 8001d5e:	9a03      	ldr	r2, [sp, #12]
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	dcf2      	bgt.n	8001d4c <_printf_i+0x1e8>
 8001d66:	e7eb      	b.n	8001d40 <_printf_i+0x1dc>
 8001d68:	2500      	movs	r5, #0
 8001d6a:	f104 0919 	add.w	r9, r4, #25
 8001d6e:	e7f5      	b.n	8001d5c <_printf_i+0x1f8>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ac      	bne.n	8001cce <_printf_i+0x16a>
 8001d74:	7803      	ldrb	r3, [r0, #0]
 8001d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d7e:	e76c      	b.n	8001c5a <_printf_i+0xf6>
 8001d80:	08002555 	.word	0x08002555
 8001d84:	08002566 	.word	0x08002566

08001d88 <_sbrk_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	4c06      	ldr	r4, [pc, #24]	; (8001da4 <_sbrk_r+0x1c>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4605      	mov	r5, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	6023      	str	r3, [r4, #0]
 8001d94:	f7fe fcf8 	bl	8000788 <_sbrk>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d102      	bne.n	8001da2 <_sbrk_r+0x1a>
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	b103      	cbz	r3, 8001da2 <_sbrk_r+0x1a>
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
 8001da4:	20000140 	.word	0x20000140

08001da8 <__sread>:
 8001da8:	b510      	push	{r4, lr}
 8001daa:	460c      	mov	r4, r1
 8001dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db0:	f000 f896 	bl	8001ee0 <_read_r>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	bfab      	itete	ge
 8001db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dba:	89a3      	ldrhlt	r3, [r4, #12]
 8001dbc:	181b      	addge	r3, r3, r0
 8001dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dc2:	bfac      	ite	ge
 8001dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dc6:	81a3      	strhlt	r3, [r4, #12]
 8001dc8:	bd10      	pop	{r4, pc}

08001dca <__swrite>:
 8001dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dce:	461f      	mov	r7, r3
 8001dd0:	898b      	ldrh	r3, [r1, #12]
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	4616      	mov	r6, r2
 8001dda:	d505      	bpl.n	8001de8 <__swrite+0x1e>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	2200      	movs	r2, #0
 8001de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de4:	f000 f868 	bl	8001eb8 <_lseek_r>
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	4632      	mov	r2, r6
 8001df6:	463b      	mov	r3, r7
 8001df8:	4628      	mov	r0, r5
 8001dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfe:	f000 b817 	b.w	8001e30 <_write_r>

08001e02 <__sseek>:
 8001e02:	b510      	push	{r4, lr}
 8001e04:	460c      	mov	r4, r1
 8001e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e0a:	f000 f855 	bl	8001eb8 <_lseek_r>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	bf15      	itete	ne
 8001e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e1e:	81a3      	strheq	r3, [r4, #12]
 8001e20:	bf18      	it	ne
 8001e22:	81a3      	strhne	r3, [r4, #12]
 8001e24:	bd10      	pop	{r4, pc}

08001e26 <__sclose>:
 8001e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e2a:	f000 b813 	b.w	8001e54 <_close_r>
	...

08001e30 <_write_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4c07      	ldr	r4, [pc, #28]	; (8001e50 <_write_r+0x20>)
 8001e34:	4605      	mov	r5, r0
 8001e36:	4608      	mov	r0, r1
 8001e38:	4611      	mov	r1, r2
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	6022      	str	r2, [r4, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f000 f911 	bl	8002066 <_write>
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	d102      	bne.n	8001e4e <_write_r+0x1e>
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	b103      	cbz	r3, 8001e4e <_write_r+0x1e>
 8001e4c:	602b      	str	r3, [r5, #0]
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
 8001e50:	20000140 	.word	0x20000140

08001e54 <_close_r>:
 8001e54:	b538      	push	{r3, r4, r5, lr}
 8001e56:	4c06      	ldr	r4, [pc, #24]	; (8001e70 <_close_r+0x1c>)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	6023      	str	r3, [r4, #0]
 8001e60:	f000 f930 	bl	80020c4 <_close>
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	d102      	bne.n	8001e6e <_close_r+0x1a>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	b103      	cbz	r3, 8001e6e <_close_r+0x1a>
 8001e6c:	602b      	str	r3, [r5, #0]
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
 8001e70:	20000140 	.word	0x20000140

08001e74 <_fstat_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4c07      	ldr	r4, [pc, #28]	; (8001e94 <_fstat_r+0x20>)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4605      	mov	r5, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	6023      	str	r3, [r4, #0]
 8001e82:	f000 f966 	bl	8002152 <_fstat>
 8001e86:	1c43      	adds	r3, r0, #1
 8001e88:	d102      	bne.n	8001e90 <_fstat_r+0x1c>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	b103      	cbz	r3, 8001e90 <_fstat_r+0x1c>
 8001e8e:	602b      	str	r3, [r5, #0]
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
 8001e92:	bf00      	nop
 8001e94:	20000140 	.word	0x20000140

08001e98 <_isatty_r>:
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4c06      	ldr	r4, [pc, #24]	; (8001eb4 <_isatty_r+0x1c>)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	6023      	str	r3, [r4, #0]
 8001ea4:	f000 faba 	bl	800241c <_isatty>
 8001ea8:	1c43      	adds	r3, r0, #1
 8001eaa:	d102      	bne.n	8001eb2 <_isatty_r+0x1a>
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	b103      	cbz	r3, 8001eb2 <_isatty_r+0x1a>
 8001eb0:	602b      	str	r3, [r5, #0]
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
 8001eb4:	20000140 	.word	0x20000140

08001eb8 <_lseek_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4c07      	ldr	r4, [pc, #28]	; (8001ed8 <_lseek_r+0x20>)
 8001ebc:	4605      	mov	r5, r0
 8001ebe:	4608      	mov	r0, r1
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	6022      	str	r2, [r4, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f000 f8bb 	bl	8002042 <_lseek>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d102      	bne.n	8001ed6 <_lseek_r+0x1e>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	b103      	cbz	r3, 8001ed6 <_lseek_r+0x1e>
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	20000140 	.word	0x20000140

08001edc <__malloc_lock>:
 8001edc:	4770      	bx	lr

08001ede <__malloc_unlock>:
 8001ede:	4770      	bx	lr

08001ee0 <_read_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4c07      	ldr	r4, [pc, #28]	; (8001f00 <_read_r+0x20>)
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	4611      	mov	r1, r2
 8001eea:	2200      	movs	r2, #0
 8001eec:	6022      	str	r2, [r4, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f000 f850 	bl	8001f94 <_read>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d102      	bne.n	8001efe <_read_r+0x1e>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	b103      	cbz	r3, 8001efe <_read_r+0x1e>
 8001efc:	602b      	str	r3, [r5, #0]
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
 8001f00:	20000140 	.word	0x20000140

08001f04 <findslot>:
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <findslot+0x2c>)
 8001f06:	b510      	push	{r4, lr}
 8001f08:	4604      	mov	r4, r0
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	b118      	cbz	r0, 8001f16 <findslot+0x12>
 8001f0e:	6983      	ldr	r3, [r0, #24]
 8001f10:	b90b      	cbnz	r3, 8001f16 <findslot+0x12>
 8001f12:	f7ff fadb 	bl	80014cc <__sinit>
 8001f16:	2c13      	cmp	r4, #19
 8001f18:	d807      	bhi.n	8001f2a <findslot+0x26>
 8001f1a:	4806      	ldr	r0, [pc, #24]	; (8001f34 <findslot+0x30>)
 8001f1c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001f20:	3301      	adds	r3, #1
 8001f22:	d002      	beq.n	8001f2a <findslot+0x26>
 8001f24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	e7fc      	b.n	8001f28 <findslot+0x24>
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000
 8001f34:	200000a0 	.word	0x200000a0

08001f38 <checkerror>:
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3a:	1c43      	adds	r3, r0, #1
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	d109      	bne.n	8001f54 <checkerror+0x1c>
 8001f40:	f7ff f866 	bl	8001010 <__errno>
 8001f44:	2413      	movs	r4, #19
 8001f46:	4606      	mov	r6, r0
 8001f48:	2700      	movs	r7, #0
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	4639      	mov	r1, r7
 8001f4e:	beab      	bkpt	0x00ab
 8001f50:	4604      	mov	r4, r0
 8001f52:	6034      	str	r4, [r6, #0]
 8001f54:	4628      	mov	r0, r5
 8001f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f58 <error>:
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	f7ff f858 	bl	8001010 <__errno>
 8001f60:	2413      	movs	r4, #19
 8001f62:	4606      	mov	r6, r0
 8001f64:	2700      	movs	r7, #0
 8001f66:	4620      	mov	r0, r4
 8001f68:	4639      	mov	r1, r7
 8001f6a:	beab      	bkpt	0x00ab
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	6034      	str	r4, [r6, #0]
 8001f70:	4628      	mov	r0, r5
 8001f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f74 <_swiread>:
 8001f74:	b530      	push	{r4, r5, lr}
 8001f76:	b085      	sub	sp, #20
 8001f78:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f7c:	9203      	str	r2, [sp, #12]
 8001f7e:	2406      	movs	r4, #6
 8001f80:	ad01      	add	r5, sp, #4
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	beab      	bkpt	0x00ab
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff ffd4 	bl	8001f38 <checkerror>
 8001f90:	b005      	add	sp, #20
 8001f92:	bd30      	pop	{r4, r5, pc}

08001f94 <_read>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	460e      	mov	r6, r1
 8001f98:	4615      	mov	r5, r2
 8001f9a:	f7ff ffb3 	bl	8001f04 <findslot>
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	b930      	cbnz	r0, 8001fb0 <_read+0x1c>
 8001fa2:	f7ff f835 	bl	8001010 <__errno>
 8001fa6:	2309      	movs	r3, #9
 8001fa8:	6003      	str	r3, [r0, #0]
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
 8001fb0:	462a      	mov	r2, r5
 8001fb2:	4631      	mov	r1, r6
 8001fb4:	6800      	ldr	r0, [r0, #0]
 8001fb6:	f7ff ffdd 	bl	8001f74 <_swiread>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	bf1f      	itttt	ne
 8001fbe:	6863      	ldrne	r3, [r4, #4]
 8001fc0:	1a28      	subne	r0, r5, r0
 8001fc2:	181b      	addne	r3, r3, r0
 8001fc4:	6063      	strne	r3, [r4, #4]
 8001fc6:	e7f2      	b.n	8001fae <_read+0x1a>

08001fc8 <_swilseek>:
 8001fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fca:	460c      	mov	r4, r1
 8001fcc:	4616      	mov	r6, r2
 8001fce:	f7ff ff99 	bl	8001f04 <findslot>
 8001fd2:	4605      	mov	r5, r0
 8001fd4:	b940      	cbnz	r0, 8001fe8 <_swilseek+0x20>
 8001fd6:	f7ff f81b 	bl	8001010 <__errno>
 8001fda:	2309      	movs	r3, #9
 8001fdc:	6003      	str	r3, [r0, #0]
 8001fde:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	b003      	add	sp, #12
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe8:	2e02      	cmp	r6, #2
 8001fea:	d903      	bls.n	8001ff4 <_swilseek+0x2c>
 8001fec:	f7ff f810 	bl	8001010 <__errno>
 8001ff0:	2316      	movs	r3, #22
 8001ff2:	e7f3      	b.n	8001fdc <_swilseek+0x14>
 8001ff4:	2e01      	cmp	r6, #1
 8001ff6:	d112      	bne.n	800201e <_swilseek+0x56>
 8001ff8:	6843      	ldr	r3, [r0, #4]
 8001ffa:	18e4      	adds	r4, r4, r3
 8001ffc:	d4f6      	bmi.n	8001fec <_swilseek+0x24>
 8001ffe:	682b      	ldr	r3, [r5, #0]
 8002000:	260a      	movs	r6, #10
 8002002:	e9cd 3400 	strd	r3, r4, [sp]
 8002006:	466f      	mov	r7, sp
 8002008:	4630      	mov	r0, r6
 800200a:	4639      	mov	r1, r7
 800200c:	beab      	bkpt	0x00ab
 800200e:	4606      	mov	r6, r0
 8002010:	4630      	mov	r0, r6
 8002012:	f7ff ff91 	bl	8001f38 <checkerror>
 8002016:	2800      	cmp	r0, #0
 8002018:	dbe1      	blt.n	8001fde <_swilseek+0x16>
 800201a:	606c      	str	r4, [r5, #4]
 800201c:	e7e1      	b.n	8001fe2 <_swilseek+0x1a>
 800201e:	2e02      	cmp	r6, #2
 8002020:	d1ed      	bne.n	8001ffe <_swilseek+0x36>
 8002022:	af02      	add	r7, sp, #8
 8002024:	6803      	ldr	r3, [r0, #0]
 8002026:	f847 3d08 	str.w	r3, [r7, #-8]!
 800202a:	260c      	movs	r6, #12
 800202c:	4630      	mov	r0, r6
 800202e:	4639      	mov	r1, r7
 8002030:	beab      	bkpt	0x00ab
 8002032:	4606      	mov	r6, r0
 8002034:	4630      	mov	r0, r6
 8002036:	f7ff ff7f 	bl	8001f38 <checkerror>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	d0cf      	beq.n	8001fde <_swilseek+0x16>
 800203e:	4404      	add	r4, r0
 8002040:	e7dd      	b.n	8001ffe <_swilseek+0x36>

08002042 <_lseek>:
 8002042:	f7ff bfc1 	b.w	8001fc8 <_swilseek>

08002046 <_swiwrite>:
 8002046:	b530      	push	{r4, r5, lr}
 8002048:	b085      	sub	sp, #20
 800204a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800204e:	9203      	str	r2, [sp, #12]
 8002050:	2405      	movs	r4, #5
 8002052:	ad01      	add	r5, sp, #4
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	beab      	bkpt	0x00ab
 800205a:	4604      	mov	r4, r0
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff ff6b 	bl	8001f38 <checkerror>
 8002062:	b005      	add	sp, #20
 8002064:	bd30      	pop	{r4, r5, pc}

08002066 <_write>:
 8002066:	b570      	push	{r4, r5, r6, lr}
 8002068:	460e      	mov	r6, r1
 800206a:	4615      	mov	r5, r2
 800206c:	f7ff ff4a 	bl	8001f04 <findslot>
 8002070:	4604      	mov	r4, r0
 8002072:	b930      	cbnz	r0, 8002082 <_write+0x1c>
 8002074:	f7fe ffcc 	bl	8001010 <__errno>
 8002078:	2309      	movs	r3, #9
 800207a:	6003      	str	r3, [r0, #0]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	462a      	mov	r2, r5
 8002084:	4631      	mov	r1, r6
 8002086:	6800      	ldr	r0, [r0, #0]
 8002088:	f7ff ffdd 	bl	8002046 <_swiwrite>
 800208c:	1e02      	subs	r2, r0, #0
 800208e:	dbf5      	blt.n	800207c <_write+0x16>
 8002090:	6863      	ldr	r3, [r4, #4]
 8002092:	1aa8      	subs	r0, r5, r2
 8002094:	4403      	add	r3, r0
 8002096:	42aa      	cmp	r2, r5
 8002098:	6063      	str	r3, [r4, #4]
 800209a:	d1f1      	bne.n	8002080 <_write+0x1a>
 800209c:	2000      	movs	r0, #0
 800209e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020a2:	f7ff bf59 	b.w	8001f58 <error>

080020a6 <_swiclose>:
 80020a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020a8:	ad02      	add	r5, sp, #8
 80020aa:	2402      	movs	r4, #2
 80020ac:	f845 0d04 	str.w	r0, [r5, #-4]!
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	beab      	bkpt	0x00ab
 80020b6:	4604      	mov	r4, r0
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff ff3d 	bl	8001f38 <checkerror>
 80020be:	b003      	add	sp, #12
 80020c0:	bd30      	pop	{r4, r5, pc}
	...

080020c4 <_close>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4605      	mov	r5, r0
 80020c8:	f7ff ff1c 	bl	8001f04 <findslot>
 80020cc:	4604      	mov	r4, r0
 80020ce:	b930      	cbnz	r0, 80020de <_close+0x1a>
 80020d0:	f7fe ff9e 	bl	8001010 <__errno>
 80020d4:	2309      	movs	r3, #9
 80020d6:	6003      	str	r3, [r0, #0]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	bd38      	pop	{r3, r4, r5, pc}
 80020de:	3d01      	subs	r5, #1
 80020e0:	2d01      	cmp	r5, #1
 80020e2:	d809      	bhi.n	80020f8 <_close+0x34>
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <_close+0x48>)
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d104      	bne.n	80020f8 <_close+0x34>
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	6003      	str	r3, [r0, #0]
 80020f4:	2000      	movs	r0, #0
 80020f6:	e7f1      	b.n	80020dc <_close+0x18>
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	f7ff ffd4 	bl	80020a6 <_swiclose>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d1ec      	bne.n	80020dc <_close+0x18>
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	6023      	str	r3, [r4, #0]
 8002108:	e7e8      	b.n	80020dc <_close+0x18>
 800210a:	bf00      	nop
 800210c:	200000a0 	.word	0x200000a0

08002110 <_swistat>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	460c      	mov	r4, r1
 8002114:	f7ff fef6 	bl	8001f04 <findslot>
 8002118:	4606      	mov	r6, r0
 800211a:	b930      	cbnz	r0, 800212a <_swistat+0x1a>
 800211c:	f7fe ff78 	bl	8001010 <__errno>
 8002120:	2309      	movs	r3, #9
 8002122:	6003      	str	r3, [r0, #0]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	bd70      	pop	{r4, r5, r6, pc}
 800212a:	6863      	ldr	r3, [r4, #4]
 800212c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002130:	6063      	str	r3, [r4, #4]
 8002132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002136:	6463      	str	r3, [r4, #68]	; 0x44
 8002138:	250c      	movs	r5, #12
 800213a:	4628      	mov	r0, r5
 800213c:	4631      	mov	r1, r6
 800213e:	beab      	bkpt	0x00ab
 8002140:	4605      	mov	r5, r0
 8002142:	4628      	mov	r0, r5
 8002144:	f7ff fef8 	bl	8001f38 <checkerror>
 8002148:	1c43      	adds	r3, r0, #1
 800214a:	bf1c      	itt	ne
 800214c:	6120      	strne	r0, [r4, #16]
 800214e:	2000      	movne	r0, #0
 8002150:	e7ea      	b.n	8002128 <_swistat+0x18>

08002152 <_fstat>:
 8002152:	460b      	mov	r3, r1
 8002154:	b510      	push	{r4, lr}
 8002156:	2100      	movs	r1, #0
 8002158:	4604      	mov	r4, r0
 800215a:	2258      	movs	r2, #88	; 0x58
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ff81 	bl	8001064 <memset>
 8002162:	4601      	mov	r1, r0
 8002164:	4620      	mov	r0, r4
 8002166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800216a:	f7ff bfd1 	b.w	8002110 <_swistat>

0800216e <_stat>:
 800216e:	b538      	push	{r3, r4, r5, lr}
 8002170:	460d      	mov	r5, r1
 8002172:	4604      	mov	r4, r0
 8002174:	2258      	movs	r2, #88	; 0x58
 8002176:	2100      	movs	r1, #0
 8002178:	4628      	mov	r0, r5
 800217a:	f7fe ff73 	bl	8001064 <memset>
 800217e:	4620      	mov	r0, r4
 8002180:	2100      	movs	r1, #0
 8002182:	f000 f811 	bl	80021a8 <_swiopen>
 8002186:	1c43      	adds	r3, r0, #1
 8002188:	4604      	mov	r4, r0
 800218a:	d00b      	beq.n	80021a4 <_stat+0x36>
 800218c:	686b      	ldr	r3, [r5, #4]
 800218e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002192:	606b      	str	r3, [r5, #4]
 8002194:	4629      	mov	r1, r5
 8002196:	f7ff ffbb 	bl	8002110 <_swistat>
 800219a:	4605      	mov	r5, r0
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff ff91 	bl	80020c4 <_close>
 80021a2:	462c      	mov	r4, r5
 80021a4:	4620      	mov	r0, r4
 80021a6:	bd38      	pop	{r3, r4, r5, pc}

080021a8 <_swiopen>:
 80021a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <_swiopen+0xb4>)
 80021ae:	b096      	sub	sp, #88	; 0x58
 80021b0:	4682      	mov	sl, r0
 80021b2:	460e      	mov	r6, r1
 80021b4:	2500      	movs	r5, #0
 80021b6:	4698      	mov	r8, r3
 80021b8:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80021bc:	1c61      	adds	r1, r4, #1
 80021be:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80021c2:	d036      	beq.n	8002232 <_swiopen+0x8a>
 80021c4:	3501      	adds	r5, #1
 80021c6:	2d14      	cmp	r5, #20
 80021c8:	d1f6      	bne.n	80021b8 <_swiopen+0x10>
 80021ca:	f7fe ff21 	bl	8001010 <__errno>
 80021ce:	2318      	movs	r3, #24
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	f04f 34ff 	mov.w	r4, #4294967295
 80021d6:	e03c      	b.n	8002252 <_swiopen+0xaa>
 80021d8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80021dc:	f240 6301 	movw	r3, #1537	; 0x601
 80021e0:	07b2      	lsls	r2, r6, #30
 80021e2:	bf48      	it	mi
 80021e4:	f044 0402 	orrmi.w	r4, r4, #2
 80021e8:	421e      	tst	r6, r3
 80021ea:	bf18      	it	ne
 80021ec:	f044 0404 	orrne.w	r4, r4, #4
 80021f0:	0733      	lsls	r3, r6, #28
 80021f2:	bf48      	it	mi
 80021f4:	f024 0404 	bicmi.w	r4, r4, #4
 80021f8:	4650      	mov	r0, sl
 80021fa:	bf48      	it	mi
 80021fc:	f044 0408 	orrmi.w	r4, r4, #8
 8002200:	f8cd a000 	str.w	sl, [sp]
 8002204:	f7fe f804 	bl	8000210 <strlen>
 8002208:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800220c:	2401      	movs	r4, #1
 800220e:	4620      	mov	r0, r4
 8002210:	4649      	mov	r1, r9
 8002212:	beab      	bkpt	0x00ab
 8002214:	4604      	mov	r4, r0
 8002216:	2c00      	cmp	r4, #0
 8002218:	db06      	blt.n	8002228 <_swiopen+0x80>
 800221a:	4447      	add	r7, r8
 800221c:	2300      	movs	r3, #0
 800221e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	462c      	mov	r4, r5
 8002226:	e014      	b.n	8002252 <_swiopen+0xaa>
 8002228:	4620      	mov	r0, r4
 800222a:	f7ff fe95 	bl	8001f58 <error>
 800222e:	4604      	mov	r4, r0
 8002230:	e00f      	b.n	8002252 <_swiopen+0xaa>
 8002232:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002236:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800223a:	46e9      	mov	r9, sp
 800223c:	d1cc      	bne.n	80021d8 <_swiopen+0x30>
 800223e:	4649      	mov	r1, r9
 8002240:	4650      	mov	r0, sl
 8002242:	f7ff ff94 	bl	800216e <_stat>
 8002246:	3001      	adds	r0, #1
 8002248:	d0c6      	beq.n	80021d8 <_swiopen+0x30>
 800224a:	f7fe fee1 	bl	8001010 <__errno>
 800224e:	2311      	movs	r3, #17
 8002250:	6003      	str	r3, [r0, #0]
 8002252:	4620      	mov	r0, r4
 8002254:	b016      	add	sp, #88	; 0x58
 8002256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800225a:	bf00      	nop
 800225c:	200000a0 	.word	0x200000a0

08002260 <_get_semihosting_exts>:
 8002260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002264:	4607      	mov	r7, r0
 8002266:	4688      	mov	r8, r1
 8002268:	4829      	ldr	r0, [pc, #164]	; (8002310 <_get_semihosting_exts+0xb0>)
 800226a:	2100      	movs	r1, #0
 800226c:	4615      	mov	r5, r2
 800226e:	f7ff ff9b 	bl	80021a8 <_swiopen>
 8002272:	462a      	mov	r2, r5
 8002274:	4604      	mov	r4, r0
 8002276:	2100      	movs	r1, #0
 8002278:	4638      	mov	r0, r7
 800227a:	f7fe fef3 	bl	8001064 <memset>
 800227e:	1c63      	adds	r3, r4, #1
 8002280:	d015      	beq.n	80022ae <_get_semihosting_exts+0x4e>
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff fe3e 	bl	8001f04 <findslot>
 8002288:	260c      	movs	r6, #12
 800228a:	4681      	mov	r9, r0
 800228c:	4630      	mov	r0, r6
 800228e:	4649      	mov	r1, r9
 8002290:	beab      	bkpt	0x00ab
 8002292:	4606      	mov	r6, r0
 8002294:	4630      	mov	r0, r6
 8002296:	f7ff fe4f 	bl	8001f38 <checkerror>
 800229a:	2803      	cmp	r0, #3
 800229c:	dd02      	ble.n	80022a4 <_get_semihosting_exts+0x44>
 800229e:	3803      	subs	r0, #3
 80022a0:	42a8      	cmp	r0, r5
 80022a2:	dc08      	bgt.n	80022b6 <_get_semihosting_exts+0x56>
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff ff0d 	bl	80020c4 <_close>
 80022aa:	f04f 34ff 	mov.w	r4, #4294967295
 80022ae:	4620      	mov	r0, r4
 80022b0:	b003      	add	sp, #12
 80022b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022b6:	2204      	movs	r2, #4
 80022b8:	eb0d 0102 	add.w	r1, sp, r2
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff fe69 	bl	8001f94 <_read>
 80022c2:	2803      	cmp	r0, #3
 80022c4:	ddee      	ble.n	80022a4 <_get_semihosting_exts+0x44>
 80022c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022ca:	2b53      	cmp	r3, #83	; 0x53
 80022cc:	d1ea      	bne.n	80022a4 <_get_semihosting_exts+0x44>
 80022ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80022d2:	2b48      	cmp	r3, #72	; 0x48
 80022d4:	d1e6      	bne.n	80022a4 <_get_semihosting_exts+0x44>
 80022d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022da:	2b46      	cmp	r3, #70	; 0x46
 80022dc:	d1e2      	bne.n	80022a4 <_get_semihosting_exts+0x44>
 80022de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022e2:	2b42      	cmp	r3, #66	; 0x42
 80022e4:	d1de      	bne.n	80022a4 <_get_semihosting_exts+0x44>
 80022e6:	2201      	movs	r2, #1
 80022e8:	4641      	mov	r1, r8
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff fe6c 	bl	8001fc8 <_swilseek>
 80022f0:	2800      	cmp	r0, #0
 80022f2:	dbd7      	blt.n	80022a4 <_get_semihosting_exts+0x44>
 80022f4:	462a      	mov	r2, r5
 80022f6:	4639      	mov	r1, r7
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff fe4b 	bl	8001f94 <_read>
 80022fe:	4605      	mov	r5, r0
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff fedf 	bl	80020c4 <_close>
 8002306:	4628      	mov	r0, r5
 8002308:	f7ff fe16 	bl	8001f38 <checkerror>
 800230c:	4604      	mov	r4, r0
 800230e:	e7ce      	b.n	80022ae <_get_semihosting_exts+0x4e>
 8002310:	08002577 	.word	0x08002577

08002314 <initialise_semihosting_exts>:
 8002314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002316:	4d0a      	ldr	r5, [pc, #40]	; (8002340 <initialise_semihosting_exts+0x2c>)
 8002318:	4c0a      	ldr	r4, [pc, #40]	; (8002344 <initialise_semihosting_exts+0x30>)
 800231a:	2100      	movs	r1, #0
 800231c:	2201      	movs	r2, #1
 800231e:	a801      	add	r0, sp, #4
 8002320:	6029      	str	r1, [r5, #0]
 8002322:	6022      	str	r2, [r4, #0]
 8002324:	f7ff ff9c 	bl	8002260 <_get_semihosting_exts>
 8002328:	2800      	cmp	r0, #0
 800232a:	dd07      	ble.n	800233c <initialise_semihosting_exts+0x28>
 800232c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	602a      	str	r2, [r5, #0]
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	b003      	add	sp, #12
 800233e:	bd30      	pop	{r4, r5, pc}
 8002340:	20000064 	.word	0x20000064
 8002344:	20000068 	.word	0x20000068

08002348 <_has_ext_stdout_stderr>:
 8002348:	b510      	push	{r4, lr}
 800234a:	4c04      	ldr	r4, [pc, #16]	; (800235c <_has_ext_stdout_stderr+0x14>)
 800234c:	6822      	ldr	r2, [r4, #0]
 800234e:	2a00      	cmp	r2, #0
 8002350:	da01      	bge.n	8002356 <_has_ext_stdout_stderr+0xe>
 8002352:	f7ff ffdf 	bl	8002314 <initialise_semihosting_exts>
 8002356:	6820      	ldr	r0, [r4, #0]
 8002358:	bd10      	pop	{r4, pc}
 800235a:	bf00      	nop
 800235c:	20000068 	.word	0x20000068

08002360 <initialise_monitor_handles>:
 8002360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002364:	b085      	sub	sp, #20
 8002366:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002418 <initialise_monitor_handles+0xb8>
 800236a:	f8cd 9004 	str.w	r9, [sp, #4]
 800236e:	2303      	movs	r3, #3
 8002370:	2400      	movs	r4, #0
 8002372:	9303      	str	r3, [sp, #12]
 8002374:	f10d 0804 	add.w	r8, sp, #4
 8002378:	9402      	str	r4, [sp, #8]
 800237a:	2501      	movs	r5, #1
 800237c:	4628      	mov	r0, r5
 800237e:	4641      	mov	r1, r8
 8002380:	beab      	bkpt	0x00ab
 8002382:	4605      	mov	r5, r0
 8002384:	4e20      	ldr	r6, [pc, #128]	; (8002408 <initialise_monitor_handles+0xa8>)
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <initialise_monitor_handles+0xac>)
 8002388:	6035      	str	r5, [r6, #0]
 800238a:	4623      	mov	r3, r4
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	4614      	mov	r4, r2
 8002392:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002396:	3301      	adds	r3, #1
 8002398:	2b14      	cmp	r3, #20
 800239a:	d1fa      	bne.n	8002392 <initialise_monitor_handles+0x32>
 800239c:	f7ff ffd4 	bl	8002348 <_has_ext_stdout_stderr>
 80023a0:	4d1b      	ldr	r5, [pc, #108]	; (8002410 <initialise_monitor_handles+0xb0>)
 80023a2:	b1d0      	cbz	r0, 80023da <initialise_monitor_handles+0x7a>
 80023a4:	f04f 0a03 	mov.w	sl, #3
 80023a8:	2304      	movs	r3, #4
 80023aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80023ae:	2701      	movs	r7, #1
 80023b0:	f8cd a00c 	str.w	sl, [sp, #12]
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	4638      	mov	r0, r7
 80023b8:	4641      	mov	r1, r8
 80023ba:	beab      	bkpt	0x00ab
 80023bc:	4683      	mov	fp, r0
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <initialise_monitor_handles+0xb4>)
 80023c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80023c4:	f8c3 b000 	str.w	fp, [r3]
 80023c8:	2308      	movs	r3, #8
 80023ca:	f8cd a00c 	str.w	sl, [sp, #12]
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	4638      	mov	r0, r7
 80023d2:	4641      	mov	r1, r8
 80023d4:	beab      	bkpt	0x00ab
 80023d6:	4607      	mov	r7, r0
 80023d8:	602f      	str	r7, [r5, #0]
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	bf02      	ittt	eq
 80023e0:	4b0c      	ldreq	r3, [pc, #48]	; (8002414 <initialise_monitor_handles+0xb4>)
 80023e2:	681b      	ldreq	r3, [r3, #0]
 80023e4:	602b      	streq	r3, [r5, #0]
 80023e6:	6833      	ldr	r3, [r6, #0]
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	2600      	movs	r6, #0
 80023ec:	6066      	str	r6, [r4, #4]
 80023ee:	f7ff ffab 	bl	8002348 <_has_ext_stdout_stderr>
 80023f2:	b130      	cbz	r0, 8002402 <initialise_monitor_handles+0xa2>
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <initialise_monitor_handles+0xb4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80023fc:	682b      	ldr	r3, [r5, #0]
 80023fe:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002402:	b005      	add	sp, #20
 8002404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002408:	20000098 	.word	0x20000098
 800240c:	200000a0 	.word	0x200000a0
 8002410:	20000094 	.word	0x20000094
 8002414:	2000009c 	.word	0x2000009c
 8002418:	0800258d 	.word	0x0800258d

0800241c <_isatty>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	f7ff fd71 	bl	8001f04 <findslot>
 8002422:	2509      	movs	r5, #9
 8002424:	4604      	mov	r4, r0
 8002426:	b920      	cbnz	r0, 8002432 <_isatty+0x16>
 8002428:	f7fe fdf2 	bl	8001010 <__errno>
 800242c:	6005      	str	r5, [r0, #0]
 800242e:	4620      	mov	r0, r4
 8002430:	bd70      	pop	{r4, r5, r6, pc}
 8002432:	4628      	mov	r0, r5
 8002434:	4621      	mov	r1, r4
 8002436:	beab      	bkpt	0x00ab
 8002438:	4604      	mov	r4, r0
 800243a:	2c01      	cmp	r4, #1
 800243c:	d0f7      	beq.n	800242e <_isatty+0x12>
 800243e:	f7fe fde7 	bl	8001010 <__errno>
 8002442:	2400      	movs	r4, #0
 8002444:	4606      	mov	r6, r0
 8002446:	2513      	movs	r5, #19
 8002448:	4628      	mov	r0, r5
 800244a:	4621      	mov	r1, r4
 800244c:	beab      	bkpt	0x00ab
 800244e:	4605      	mov	r5, r0
 8002450:	6035      	str	r5, [r6, #0]
 8002452:	e7ec      	b.n	800242e <_isatty+0x12>

08002454 <_init>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	bf00      	nop
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr

08002460 <_fini>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	bf00      	nop
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr
