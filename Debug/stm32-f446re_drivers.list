
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002394  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002688  08002688  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002688  08002688  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002688  08002688  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000006c  080026fc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080026fc  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002805  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000752  00000000  00000000  000228a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  000231d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002db7  00000000  00000000  00023360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b49  00000000  00000000  00026117  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b364  00000000  00000000  00027c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011a4  00000000  00000000  00033040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800254c 	.word	0x0800254c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800254c 	.word	0x0800254c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <delay>:
// Globals
I2C_Handle_t I2C1Handle;
/*
 * PUPD LED control
 */
void delay(int value) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e002      	b.n	80002d4 <delay+0x14>
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d3f8      	bcc.n	80002ce <delay+0xe>
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <I2C1_GPIO_Init>:
/*
 * PB8 = SCL
 * PB9 = SDA
 * Alt Func mode = 4
 */
void I2C1_GPIO_Init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <I2C1_GPIO_Init+0x40>)
 80002f0:	607b      	str	r3, [r7, #4]

	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002f2:	2302      	movs	r3, #2
 80002f4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 80002f6:	2304      	movs	r3, #4
 80002f8:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_OPEN_DRAIN;
 80002fa:	2301      	movs	r3, #1
 80002fc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 80002fe:	2301      	movs	r3, #1
 8000300:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000302:	2302      	movs	r3, #2
 8000304:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8000306:	2308      	movs	r3, #8
 8000308:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f9e7 	bl	80006e0 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000312:	2309      	movs	r3, #9
 8000314:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f9e1 	bl	80006e0 <GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020400 	.word	0x40020400

0800032c <I2C1_Init>:

void I2C1_Init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <I2C1_Init+0x2c>)
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <I2C1_Init+0x30>)
 8000334:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <I2C1_Init+0x2c>)
 8000338:	2201      	movs	r2, #1
 800033a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = I2C_MASTER_ADDR;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <I2C1_Init+0x2c>)
 800033e:	2261      	movs	r2, #97	; 0x61
 8000340:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_CYCLE_2;
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <I2C1_Init+0x2c>)
 8000344:	2200      	movs	r2, #0
 8000346:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <I2C1_Init+0x2c>)
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <I2C1_Init+0x34>)
 800034c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <I2C1_Init+0x2c>)
 8000350:	f000 fc98 	bl	8000c84 <I2C_Init>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000140 	.word	0x20000140
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	220c      	movs	r2, #12
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fef3 	bl	800115c <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <GPIO_Button_Init+0x38>)
 8000378:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800037a:	230d      	movs	r3, #13
 800037c:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 800037e:	2300      	movs	r3, #0
 8000380:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000382:	2302      	movs	r3, #2
 8000384:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 8000386:	2300      	movs	r3, #0
 8000388:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f9a7 	bl	80006e0 <GPIO_Init>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40020800 	.word	0x40020800

080003a0 <main>:

int main(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af02      	add	r7, sp, #8
	initialise_monitor_handles();
 80003a6:	f002 f857 	bl	8002458 <initialise_monitor_handles>
	printf("Semihosting successful\n");
 80003aa:	4837      	ldr	r0, [pc, #220]	; (8000488 <main+0xe8>)
 80003ac:	f000 ff52 	bl	8001254 <puts>
	GPIO_Button_Init();
 80003b0:	f7ff ffd8 	bl	8000364 <GPIO_Button_Init>
	I2C1_GPIO_Init();
 80003b4:	f7ff ff98 	bl	80002e8 <I2C1_GPIO_Init>
	I2C1_Init();
 80003b8:	f7ff ffb8 	bl	800032c <I2C1_Init>
	I2C_PeripheralControl(I2C1, ENABLE);
 80003bc:	2101      	movs	r1, #1
 80003be:	4833      	ldr	r0, [pc, #204]	; (800048c <main+0xec>)
 80003c0:	f000 fce4 	bl	8000d8c <I2C_PeripheralControl>
	// enable ack ater PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003c4:	2101      	movs	r1, #1
 80003c6:	4831      	ldr	r0, [pc, #196]	; (800048c <main+0xec>)
 80003c8:	f000 fdfc 	bl	8000fc4 <I2C_ManageAcking>

	uint8_t data_length = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t commandcode = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t RxBuffer[32];
	while (1) {
		// wait till button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 80003d8:	bf00      	nop
 80003da:	210d      	movs	r1, #13
 80003dc:	482c      	ldr	r0, [pc, #176]	; (8000490 <main+0xf0>)
 80003de:	f000 fb19 	bl	8000a14 <GPIO_ReadFromInputPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1f8      	bne.n	80003da <main+0x3a>
		delay(500000);
 80003e8:	482a      	ldr	r0, [pc, #168]	; (8000494 <main+0xf4>)
 80003ea:	f7ff ff69 	bl	80002c0 <delay>

		// get data length
		commandcode = 0x51;
 80003ee:	2351      	movs	r3, #81	; 0x51
 80003f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE);
 80003f4:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80003f8:	2301      	movs	r3, #1
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2368      	movs	r3, #104	; 0x68
 80003fe:	2201      	movs	r2, #1
 8000400:	4825      	ldr	r0, [pc, #148]	; (8000498 <main+0xf8>)
 8000402:	f000 fcdf 	bl	8000dc4 <I2C_MasterSendData>
		delay(500000);
 8000406:	4823      	ldr	r0, [pc, #140]	; (8000494 <main+0xf4>)
 8000408:	f7ff ff5a 	bl	80002c0 <delay>

		// receive data length from the arduino
		I2C_MasterReceiveData(&I2C1Handle, &data_length, 1, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE);
 800040c:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000410:	2301      	movs	r3, #1
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2368      	movs	r3, #104	; 0x68
 8000416:	2201      	movs	r2, #1
 8000418:	481f      	ldr	r0, [pc, #124]	; (8000498 <main+0xf8>)
 800041a:	f000 fd35 	bl	8000e88 <I2C_MasterReceiveData>
		printf("The size of the data is %d\n", data_length);
 800041e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000422:	4619      	mov	r1, r3
 8000424:	481d      	ldr	r0, [pc, #116]	; (800049c <main+0xfc>)
 8000426:	f000 fea1 	bl	800116c <iprintf>
		delay(500000);
 800042a:	481a      	ldr	r0, [pc, #104]	; (8000494 <main+0xf4>)
 800042c:	f7ff ff48 	bl	80002c0 <delay>

		commandcode = 0x52;
 8000430:	2352      	movs	r3, #82	; 0x52
 8000432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE);
 8000436:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800043a:	2301      	movs	r3, #1
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	2368      	movs	r3, #104	; 0x68
 8000440:	2201      	movs	r2, #1
 8000442:	4815      	ldr	r0, [pc, #84]	; (8000498 <main+0xf8>)
 8000444:	f000 fcbe 	bl	8000dc4 <I2C_MasterSendData>
		delay(500000);
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <main+0xf4>)
 800044a:	f7ff ff39 	bl	80002c0 <delay>

		// receive the entirety of the data from the arduino
		I2C_MasterReceiveData(&I2C1Handle, RxBuffer, data_length, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE);
 800044e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000452:	461a      	mov	r2, r3
 8000454:	1d39      	adds	r1, r7, #4
 8000456:	2301      	movs	r3, #1
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2368      	movs	r3, #104	; 0x68
 800045c:	480e      	ldr	r0, [pc, #56]	; (8000498 <main+0xf8>)
 800045e:	f000 fd13 	bl	8000e88 <I2C_MasterReceiveData>
		RxBuffer[data_length+1] = '\0';
 8000462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000466:	3301      	adds	r3, #1
 8000468:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800046c:	4413      	add	r3, r2
 800046e:	2200      	movs	r2, #0
 8000470:	f803 2c24 	strb.w	r2, [r3, #-36]
		printf("The message is %s\n", RxBuffer);
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4809      	ldr	r0, [pc, #36]	; (80004a0 <main+0x100>)
 800047a:	f000 fe77 	bl	800116c <iprintf>
		delay(500000);
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <main+0xf4>)
 8000480:	f7ff ff1e 	bl	80002c0 <delay>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 8000484:	e7a8      	b.n	80003d8 <main+0x38>
 8000486:	bf00      	nop
 8000488:	08002564 	.word	0x08002564
 800048c:	40005400 	.word	0x40005400
 8000490:	40020800 	.word	0x40020800
 8000494:	0007a120 	.word	0x0007a120
 8000498:	20000140 	.word	0x20000140
 800049c:	0800257c 	.word	0x0800257c
 80004a0:	08002598 	.word	0x08002598

080004a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_sbrk+0x50>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x16>
		heap_end = &end;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <_sbrk+0x50>)
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <_sbrk+0x54>)
 80004b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <_sbrk+0x50>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <_sbrk+0x50>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4413      	add	r3, r2
 80004c8:	466a      	mov	r2, sp
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d907      	bls.n	80004de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004ce:	f000 fe1b 	bl	8001108 <__errno>
 80004d2:	4602      	mov	r2, r0
 80004d4:	230c      	movs	r3, #12
 80004d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	e006      	b.n	80004ec <_sbrk+0x48>
	}

	heap_end += incr;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <_sbrk+0x50>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <_sbrk+0x50>)
 80004e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000088 	.word	0x20000088
 80004f8:	20000168 	.word	0x20000168

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490e      	ldr	r1, [pc, #56]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0b      	ldr	r4, [pc, #44]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000526:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 fdf3 	bl	8001114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff ff37 	bl	80003a0 <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000540:	08002690 	.word	0x08002690
  ldr r2, =_sbss
 8000544:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000548:	20000164 	.word	0x20000164

0800054c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>
	...

08000550 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d157      	bne.n	8000612 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a55      	ldr	r2, [pc, #340]	; (80006bc <GPIO_PeriClockControl+0x16c>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d106      	bne.n	8000578 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800056a:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a54      	ldr	r2, [pc, #336]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 8000576:	e09b      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a52      	ldr	r2, [pc, #328]	; (80006c4 <GPIO_PeriClockControl+0x174>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000580:	4b4f      	ldr	r3, [pc, #316]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a4e      	ldr	r2, [pc, #312]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058c:	e090      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a4d      	ldr	r2, [pc, #308]	; (80006c8 <GPIO_PeriClockControl+0x178>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 8000596:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a49      	ldr	r2, [pc, #292]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a2:	e085      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a49      	ldr	r2, [pc, #292]	; (80006cc <GPIO_PeriClockControl+0x17c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d106      	bne.n	80005ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 80005ac:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	4a43      	ldr	r2, [pc, #268]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b8:	e07a      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a44      	ldr	r2, [pc, #272]	; (80006d0 <GPIO_PeriClockControl+0x180>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a3e      	ldr	r2, [pc, #248]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005c8:	f043 0310 	orr.w	r3, r3, #16
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ce:	e06f      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a40      	ldr	r2, [pc, #256]	; (80006d4 <GPIO_PeriClockControl+0x184>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80005d8:	4b39      	ldr	r3, [pc, #228]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	4a38      	ldr	r2, [pc, #224]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e4:	e064      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a3b      	ldr	r2, [pc, #236]	; (80006d8 <GPIO_PeriClockControl+0x188>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a33      	ldr	r2, [pc, #204]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80005f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fa:	e059      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a37      	ldr	r2, [pc, #220]	; (80006dc <GPIO_PeriClockControl+0x18c>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d155      	bne.n	80006b0 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000610:	e04e      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a29      	ldr	r2, [pc, #164]	; (80006bc <GPIO_PeriClockControl+0x16c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d105      	bne.n	8000626 <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 800061a:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000624:	e044      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <GPIO_PeriClockControl+0x174>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d105      	bne.n	800063a <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000634:	2200      	movs	r2, #0
 8000636:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000638:	e03a      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <GPIO_PeriClockControl+0x178>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d105      	bne.n	800064e <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000648:	2200      	movs	r2, #0
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800064c:	e030      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <GPIO_PeriClockControl+0x17c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d105      	bne.n	8000662 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000660:	e026      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <GPIO_PeriClockControl+0x180>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d105      	bne.n	8000676 <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000674:	e01c      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <GPIO_PeriClockControl+0x184>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d105      	bne.n	800068a <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000688:	e012      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <GPIO_PeriClockControl+0x188>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d105      	bne.n	800069e <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800069c:	e008      	b.n	80006b0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <GPIO_PeriClockControl+0x18c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d104      	bne.n	80006b0 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <GPIO_PeriClockControl+0x170>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40021400 	.word	0x40021400
 80006d8:	40021800 	.word	0x40021800
 80006dc:	40021c00 	.word	0x40021c00

080006e0 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff2c 	bl	8000550 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d822      	bhi.n	8000746 <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	400a      	ands	r2, r1
 800072e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	430a      	orrs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e0c3      	b.n	80008ce <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d117      	bne.n	800077e <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <GPIO_Init+0x198>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	4611      	mov	r1, r2
 800075e:	4a46      	ldr	r2, [pc, #280]	; (8000878 <GPIO_Init+0x198>)
 8000760:	430b      	orrs	r3, r1
 8000762:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000764:	4b44      	ldr	r3, [pc, #272]	; (8000878 <GPIO_Init+0x198>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	43d2      	mvns	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a40      	ldr	r2, [pc, #256]	; (8000878 <GPIO_Init+0x198>)
 8000778:	400b      	ands	r3, r1
 800077a:	6093      	str	r3, [r2, #8]
 800077c:	e036      	b.n	80007ec <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d117      	bne.n	80007b6 <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <GPIO_Init+0x198>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7912      	ldrb	r2, [r2, #4]
 800078e:	4611      	mov	r1, r2
 8000790:	2201      	movs	r2, #1
 8000792:	408a      	lsls	r2, r1
 8000794:	4611      	mov	r1, r2
 8000796:	4a38      	ldr	r2, [pc, #224]	; (8000878 <GPIO_Init+0x198>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <GPIO_Init+0x198>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a32      	ldr	r2, [pc, #200]	; (8000878 <GPIO_Init+0x198>)
 80007b0:	430b      	orrs	r3, r1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e01a      	b.n	80007ec <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d116      	bne.n	80007ec <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <GPIO_Init+0x198>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	7912      	ldrb	r2, [r2, #4]
 80007c6:	4611      	mov	r1, r2
 80007c8:	2201      	movs	r2, #1
 80007ca:	408a      	lsls	r2, r1
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <GPIO_Init+0x198>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <GPIO_Init+0x198>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	7912      	ldrb	r2, [r2, #4]
 80007dc:	4611      	mov	r1, r2
 80007de:	2201      	movs	r2, #1
 80007e0:	408a      	lsls	r2, r1
 80007e2:	43d2      	mvns	r2, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <GPIO_Init+0x198>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80007fe:	4a1f      	ldr	r2, [pc, #124]	; (800087c <GPIO_Init+0x19c>)
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	3302      	adds	r3, #2
 8000804:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	491c      	ldr	r1, [pc, #112]	; (8000880 <GPIO_Init+0x1a0>)
 800080e:	428b      	cmp	r3, r1
 8000810:	d046      	beq.n	80008a0 <GPIO_Init+0x1c0>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <GPIO_Init+0x1a4>)
 8000818:	428b      	cmp	r3, r1
 800081a:	d02b      	beq.n	8000874 <GPIO_Init+0x194>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4919      	ldr	r1, [pc, #100]	; (8000888 <GPIO_Init+0x1a8>)
 8000822:	428b      	cmp	r3, r1
 8000824:	d024      	beq.n	8000870 <GPIO_Init+0x190>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4918      	ldr	r1, [pc, #96]	; (800088c <GPIO_Init+0x1ac>)
 800082c:	428b      	cmp	r3, r1
 800082e:	d01d      	beq.n	800086c <GPIO_Init+0x18c>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4916      	ldr	r1, [pc, #88]	; (8000890 <GPIO_Init+0x1b0>)
 8000836:	428b      	cmp	r3, r1
 8000838:	d016      	beq.n	8000868 <GPIO_Init+0x188>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4915      	ldr	r1, [pc, #84]	; (8000894 <GPIO_Init+0x1b4>)
 8000840:	428b      	cmp	r3, r1
 8000842:	d00f      	beq.n	8000864 <GPIO_Init+0x184>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4913      	ldr	r1, [pc, #76]	; (8000898 <GPIO_Init+0x1b8>)
 800084a:	428b      	cmp	r3, r1
 800084c:	d008      	beq.n	8000860 <GPIO_Init+0x180>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4912      	ldr	r1, [pc, #72]	; (800089c <GPIO_Init+0x1bc>)
 8000854:	428b      	cmp	r3, r1
 8000856:	d101      	bne.n	800085c <GPIO_Init+0x17c>
 8000858:	2307      	movs	r3, #7
 800085a:	e022      	b.n	80008a2 <GPIO_Init+0x1c2>
 800085c:	2300      	movs	r3, #0
 800085e:	e020      	b.n	80008a2 <GPIO_Init+0x1c2>
 8000860:	2306      	movs	r3, #6
 8000862:	e01e      	b.n	80008a2 <GPIO_Init+0x1c2>
 8000864:	2305      	movs	r3, #5
 8000866:	e01c      	b.n	80008a2 <GPIO_Init+0x1c2>
 8000868:	2304      	movs	r3, #4
 800086a:	e01a      	b.n	80008a2 <GPIO_Init+0x1c2>
 800086c:	2303      	movs	r3, #3
 800086e:	e018      	b.n	80008a2 <GPIO_Init+0x1c2>
 8000870:	2302      	movs	r3, #2
 8000872:	e016      	b.n	80008a2 <GPIO_Init+0x1c2>
 8000874:	2301      	movs	r3, #1
 8000876:	e014      	b.n	80008a2 <GPIO_Init+0x1c2>
 8000878:	40013c00 	.word	0x40013c00
 800087c:	40013800 	.word	0x40013800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40021000 	.word	0x40021000
 8000894:	40021400 	.word	0x40021400
 8000898:	40021800 	.word	0x40021800
 800089c:	40021c00 	.word	0x40021c00
 80008a0:	2300      	movs	r3, #0
 80008a2:	7cb9      	ldrb	r1, [r7, #18]
 80008a4:	0089      	lsls	r1, r1, #2
 80008a6:	408b      	lsls	r3, r1
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	4957      	ldr	r1, [pc, #348]	; (8000a0c <GPIO_Init+0x32c>)
 80008ae:	7cfb      	ldrb	r3, [r7, #19]
 80008b0:	4002      	ands	r2, r0
 80008b2:	3302      	adds	r3, #2
 80008b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008b8:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <GPIO_Init+0x330>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	7912      	ldrb	r2, [r2, #4]
 80008c0:	4611      	mov	r1, r2
 80008c2:	2201      	movs	r2, #1
 80008c4:	408a      	lsls	r2, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <GPIO_Init+0x330>)
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2103      	movs	r1, #3
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	400a      	ands	r2, r1
 80008fc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6899      	ldr	r1, [r3, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	430a      	orrs	r2, r1
 800090c:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	79db      	ldrb	r3, [r3, #7]
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2103      	movs	r1, #3
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	400a      	ands	r2, r1
 8000940:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68d9      	ldr	r1, [r3, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	430a      	orrs	r2, r1
 8000950:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	4619      	mov	r1, r3
 8000972:	2301      	movs	r3, #1
 8000974:	408b      	lsls	r3, r1
 8000976:	43db      	mvns	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	400a      	ands	r2, r1
 8000980:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6859      	ldr	r1, [r3, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	430a      	orrs	r2, r1
 8000990:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d132      	bne.n	8000a04 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	f003 0307 	and.w	r3, r3, #7
 80009b0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	3208      	adds	r2, #8
 80009ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	210f      	movs	r1, #15
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4011      	ands	r1, r2
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	3208      	adds	r2, #8
 80009d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	3208      	adds	r2, #8
 80009e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7a5b      	ldrb	r3, [r3, #9]
 80009ea:	4619      	mov	r1, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4311      	orrs	r1, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	3208      	adds	r2, #8
 8000a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	40013c00 	.word	0x40013c00

08000a14 <GPIO_ReadFromInputPin>:
 * desc: reads the input pin of a GPIOx peripheral (specified by pinNumber)
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: 2 byte pin register data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	uint8_t out;
	out = (uint8_t)((pGPIOx->IDR >> pinNumber) & 1);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691a      	ldr	r2, [r3, #16]
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
	return out;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <RCC_GetPLLOutputClock>:
 * RCC Get PLL Output Clock
 * desc: gets the pll output clock
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPLLOutputClock() {
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
	 * Definitions:
	 * 	PLLP = main PLL division factor for main system clock
	 * 	PLLN = main PLL multiplication factor for VCO
	 * 	PLLM = division factor for the main PLL input clock
	 */
	uint8_t pll_div_factors[4] = {2, 4, 6, 8};
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <RCC_GetPLLOutputClock+0x88>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	607b      	str	r3, [r7, #4]

	uint32_t clk_src, clk_vco, plln, clk_pll = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
	uint8_t pllp, pllm = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	75bb      	strb	r3, [r7, #22]

	temp = (RCC->PLLCFGR << 22) & 1;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <RCC_GetPLLOutputClock+0x8c>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75bb      	strb	r3, [r7, #22]
	if (temp) {
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <RCC_GetPLLOutputClock+0x2c>
		// HSI clock selected as PLL
		clk_src = 16000000;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <RCC_GetPLLOutputClock+0x90>)
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	e001      	b.n	8000a70 <RCC_GetPLLOutputClock+0x30>
	} else {
		// HSE clock selected as PLL
		clk_src = 8000000;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <RCC_GetPLLOutputClock+0x94>)
 8000a6e:	61fb      	str	r3, [r7, #28]
	}

	plln = (RCC->PLLCFGR << 6) & 0x1FF;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <RCC_GetPLLOutputClock+0x8c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a7a:	613b      	str	r3, [r7, #16]
	pllm = (RCC->PLLCFGR << 0) & 0x3F;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <RCC_GetPLLOutputClock+0x8c>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a86:	75fb      	strb	r3, [r7, #23]

	clk_vco = clk_src * (plln / pllm);
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	60fb      	str	r3, [r7, #12]

	temp = (RCC->PLLCFGR << 16) & 0x3;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <RCC_GetPLLOutputClock+0x8c>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75bb      	strb	r3, [r7, #22]
	pllp = pll_div_factors[temp];
 8000aa0:	7dbb      	ldrb	r3, [r7, #22]
 8000aa2:	f107 0220 	add.w	r2, r7, #32
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000aac:	72fb      	strb	r3, [r7, #11]
	clk_pll = clk_vco / pllp;
 8000aae:	7afb      	ldrb	r3, [r7, #11]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	61bb      	str	r3, [r7, #24]

	return clk_pll;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	080025ac 	.word	0x080025ac
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	00f42400 	.word	0x00f42400
 8000ad4:	007a1200 	.word	0x007a1200

08000ad8 <RCC_GetPCLK1Value>:
 * RCC Get PLL PCLK1 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK1Value(void) {
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <RCC_GetPCLK1Value+0xec>)
 8000af0:	f107 0408 	add.w	r4, r7, #8
 8000af4:	461d      	mov	r5, r3
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre1_div_factors[4] = {2, 4, 8, 16};
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <RCC_GetPCLK1Value+0xf0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << 2) & 0x3;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <RCC_GetPCLK1Value+0xf4>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 8000b1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <RCC_GetPCLK1Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <RCC_GetPCLK1Value+0xf8>)
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
 8000b26:	e00d      	b.n	8000b44 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 1) {
 8000b28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d102      	bne.n	8000b36 <RCC_GetPCLK1Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <RCC_GetPCLK1Value+0xfc>)
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
 8000b34:	e006      	b.n	8000b44 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 2) {
 8000b36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d102      	bne.n	8000b44 <RCC_GetPCLK1Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 8000b3e:	f7ff ff7f 	bl	8000a40 <RCC_GetPLLOutputClock>
 8000b42:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << 4) & 0xF;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <RCC_GetPCLK1Value+0xf4>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 8000b56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d802      	bhi.n	8000b64 <RCC_GetPCLK1Value+0x8c>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
 8000b62:	e009      	b.n	8000b78 <RCC_GetPCLK1Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000b64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b70:	4413      	add	r3, r2
 8000b72:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << 10) & 0x7;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <RCC_GetPCLK1Value+0xf4>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000b82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d803      	bhi.n	8000b92 <RCC_GetPCLK1Value+0xba>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b90:	e009      	b.n	8000ba6 <RCC_GetPCLK1Value+0xce>
	else clk_apb = ppre1_div_factors[temp - 4];
 8000b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b96:	3b04      	subs	r3, #4
 8000b98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk1 = (clk_sys / clk_ahb) / clk_apb;
 8000ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk1;
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3738      	adds	r7, #56	; 0x38
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	080025b0 	.word	0x080025b0
 8000bc8:	080025d0 	.word	0x080025d0
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	00f42400 	.word	0x00f42400
 8000bd4:	007a1200 	.word	0x007a1200

08000bd8 <I2C_PeriClockControl>:
 * desc: enables the I2C peripheral clock for a specific I2C peripheral
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d120      	bne.n	8000c2c <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <I2C_PeriClockControl+0x9c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI;
		}
	}
}
 8000bfe:	e032      	b.n	8000c66 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <I2C_PeriClockControl+0xa4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d106      	bne.n	8000c16 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c14:	e027      	b.n	8000c66 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <I2C_PeriClockControl+0xa8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d123      	bne.n	8000c66 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_EN;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c2a:	e01c      	b.n	8000c66 <I2C_PeriClockControl+0x8e>
		if (pI2Cx == I2C1) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <I2C_PeriClockControl+0x9c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d105      	bne.n	8000c40 <I2C_PeriClockControl+0x68>
			I2C1_PCLK_DI;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c3e:	e012      	b.n	8000c66 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <I2C_PeriClockControl+0xa4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d105      	bne.n	8000c54 <I2C_PeriClockControl+0x7c>
			I2C2_PCLK_DI;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c52:	e008      	b.n	8000c66 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <I2C_PeriClockControl+0xa8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d104      	bne.n	8000c66 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_DI;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <I2C_PeriClockControl+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40005400 	.word	0x40005400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40005800 	.word	0x40005800
 8000c80:	40005c00 	.word	0x40005c00

08000c84 <I2C_Init>:
 * I2C Peripheral Initialization
 * desc: initializes an I2C peripheral
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint32_t temp_reg = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff9e 	bl	8000bd8 <I2C_PeriClockControl>

	// Configure I2C with the peripheral clocks frequency
	// only 5 bits are valid
	temp_reg = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	temp_reg |= RCC_GetPCLK1Value() / 1000000U;
 8000ca0:	f7ff ff1a 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <I2C_Init+0xfc>)
 8000ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cac:	0c9b      	lsrs	r3, r3, #18
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = temp_reg & 0x3F;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cbe:	605a      	str	r2, [r3, #4]

	// Specify the address of the device we are going to communicate with
	temp_reg = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
	temp_reg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7a1b      	ldrb	r3, [r3, #8]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
	temp_reg |= (1 << I2C_OAR1_BIT14);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = temp_reg;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	609a      	str	r2, [r3, #8]

	// Configure the speed of the serial clock
	uint16_t ccr_val = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	817b      	strh	r3, [r7, #10]
	temp_reg = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a25      	ldr	r2, [pc, #148]	; (8000d84 <I2C_Init+0x100>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d80f      	bhi.n	8000d14 <I2C_Init+0x90>
		// slow (standard) mode
		ccr_val = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000cf4:	f7ff fef0 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d04:	817b      	strh	r3, [r7, #10]
		temp_reg |= (ccr_val & 0xFFF);
 8000d06:	897b      	ldrh	r3, [r7, #10]
 8000d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00a      	b.n	8000d2a <I2C_Init+0xa6>
	} else {
		// fast mode
		temp_reg |= (1 << I2C_CCR_FS);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1a:	60fb      	str	r3, [r7, #12]
		temp_reg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7a9b      	ldrb	r3, [r3, #10]
 8000d20:	039b      	lsls	r3, r3, #14
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = temp_reg;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	61da      	str	r2, [r3, #28]


	// Configure the rise time for I2C pins through TRISE
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <I2C_Init+0x100>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d109      	bne.n	8000d50 <I2C_Init+0xcc>
		temp_reg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000d3c:	f7ff fecc 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <I2C_Init+0xfc>)
 8000d44:	fba3 2302 	umull	r2, r3, r3, r2
 8000d48:	0c9b      	lsrs	r3, r3, #18
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	e00d      	b.n	8000d6c <I2C_Init+0xe8>
	}
	else {
		temp_reg = ((RCC_GetPCLK1Value() * 300) / 1000000000U + 1);
 8000d50:	f7ff fec2 	bl	8000ad8 <RCC_GetPCLK1Value>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d5a:	fb03 f302 	mul.w	r3, r3, r2
 8000d5e:	0a5b      	lsrs	r3, r3, #9
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <I2C_Init+0x104>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	09db      	lsrs	r3, r3, #7
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (temp_reg & 0x3F);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d76:	621a      	str	r2, [r3, #32]
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	000186a0 	.word	0x000186a0
 8000d88:	00044b83 	.word	0x00044b83

08000d8c <I2C_PeripheralControl>:
 * desc: enables or disables the I2C peripheral (which enables all I2C devices?)
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == ENABLE) {
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d106      	bne.n	8000dac <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f043 0201 	orr.w	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000daa:	e005      	b.n	8000db8 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 0201 	bic.w	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <I2C_MasterSendData>:
 * input3: the size of the message to be sent
 * input4: uint8 slave address data
 * input5: an enable/disable flag for repeated starts
 * output: none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len, uint8_t slave_addr, uint8_t repeated_start_flag) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	70fb      	strb	r3, [r7, #3]
	// Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f910 	bl	8000ffc <I2C_GenerateStartCondition>

	// confirm the start condition. Note that SB is cleared by reading. SCL is low until SB is cleared
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_SB_FLAG));
 8000ddc:	bf00      	nop
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2101      	movs	r1, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f8d9 	bl	8000f9c <I2C_GetFlagStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f6      	beq.n	8000dde <I2C_MasterSendData+0x1a>

	// send the address and the instruction
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, slave_addr);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f91f 	bl	800103c <I2C_ExecuteAddressPhaseWrite>

	// validate that the address was sent by checking ADDR bit
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_ADDR_FLAG));
 8000dfe:	bf00      	nop
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f8c8 	bl	8000f9c <I2C_GetFlagStatus>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f6      	beq.n	8000e00 <I2C_MasterSendData+0x3c>

	// SCL will be held low until ADDR cleared
	I2C_ClearADDRFlag(pI2CHandle);
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f000 f93e 	bl	8001094 <I2C_ClearADDRFlag>

	// send data
	while(len--) {
 8000e18:	e011      	b.n	8000e3e <I2C_MasterSendData+0x7a>
		while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_TXE_FLAG));
 8000e1a:	bf00      	nop
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f8ba 	bl	8000f9c <I2C_GetFlagStatus>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f6      	beq.n	8000e1c <I2C_MasterSendData+0x58>
		// note that DR and pTxBuffer are both uint32_t
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
	while(len--) {
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e8      	bne.n	8000e1a <I2C_MasterSendData+0x56>
	}

	// when the transmission is complete, wait for TXE=1 and BTF=1 before sending the STOP
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_TXE_FLAG));
 8000e48:	bf00      	nop
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f8a3 	bl	8000f9c <I2C_GetFlagStatus>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f6      	beq.n	8000e4a <I2C_MasterSendData+0x86>
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_BTF_FLAG));
 8000e5c:	bf00      	nop
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f899 	bl	8000f9c <I2C_GetFlagStatus>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f6      	beq.n	8000e5e <I2C_MasterSendData+0x9a>

	// send the stop condition
	if (repeated_start_flag == I2C_REPEATED_START_DISABLE ) I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e70:	7e3b      	ldrb	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <I2C_MasterSendData+0xbc>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f8ce 	bl	800101c <I2C_GenerateStopCondition>

}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <I2C_MasterReceiveData>:
 * input3: the size of the message to be sent
 * input4: uint8 slave address data
 * input5: an enable/disable flag for repeated starts
 * output: none
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t len, uint8_t slave_addr, uint8_t repeated_start_flag) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	70fb      	strb	r3, [r7, #3]
	// Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f8ae 	bl	8000ffc <I2C_GenerateStartCondition>

	// confirm the start condition
	while ( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_SB_FLAG) );
 8000ea0:	bf00      	nop
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f877 	bl	8000f9c <I2C_GetFlagStatus>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f6      	beq.n	8000ea2 <I2C_MasterReceiveData+0x1a>

	// send the address and the instruction to the slave addr
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, slave_addr);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f8d3 	bl	8001068 <I2C_ExecuteAddressPhaseRead>

	// validate that the addr was sent
	while ( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_ADDR_FLAG) );
 8000ec2:	bf00      	nop
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f866 	bl	8000f9c <I2C_GetFlagStatus>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f6      	beq.n	8000ec4 <I2C_MasterReceiveData+0x3c>

	// handle the single byte receive data case
	if (len == 1) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d11d      	bne.n	8000f18 <I2C_MasterReceiveData+0x90>
		// NACK before clearing addr
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f86e 	bl	8000fc4 <I2C_ManageAcking>
		I2C_ClearADDRFlag(pI2CHandle);
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 f8d3 	bl	8001094 <I2C_ClearADDRFlag>

		// wait for RXNE
		while ( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_STATUS_RXNE_FLAG) );
 8000eee:	bf00      	nop
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f850 	bl	8000f9c <I2C_GetFlagStatus>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f6      	beq.n	8000ef0 <I2C_MasterReceiveData+0x68>

		// send stop
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f888 	bl	800101c <I2C_GenerateStopCondition>

		// read from buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	701a      	strb	r2, [r3, #0]
	}

	// handle reading multiple bytes
	if (len > 1) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d930      	bls.n	8000f80 <I2C_MasterReceiveData+0xf8>
		// clear addr
		I2C_ClearADDRFlag(pI2CHandle);
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f8b8 	bl	8001094 <I2C_ClearADDRFlag>

		// read from buffer
		for (uint32_t i = len ; i > 0 ; i--) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e027      	b.n	8000f7a <I2C_MasterReceiveData+0xf2>
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_STATUS_RXNE_FLAG) );
 8000f2a:	bf00      	nop
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f832 	bl	8000f9c <I2C_GetFlagStatus>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f6      	beq.n	8000f2c <I2C_MasterReceiveData+0xa4>
			if(i == 2) {
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d10e      	bne.n	8000f62 <I2C_MasterReceiveData+0xda>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f83a 	bl	8000fc4 <I2C_ManageAcking>
				if (repeated_start_flag == I2C_REPEATED_START_DISABLE) I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <I2C_MasterReceiveData+0xda>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f85d 	bl	800101c <I2C_GenerateStopCondition>
			}
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
		for (uint32_t i = len ; i > 0 ; i--) {
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1d4      	bne.n	8000f2a <I2C_MasterReceiveData+0xa2>
		}
	}
	// reenable ACK
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	7a5b      	ldrb	r3, [r3, #9]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d105      	bne.n	8000f94 <I2C_MasterReceiveData+0x10c>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f818 	bl	8000fc4 <I2C_ManageAcking>
	}
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <I2C_GetFlagStatus>:
 * desc: checks the status of a user specified register
 * input1: I2C register pointer mapped to an I2C peripheral
 * input2: an uint32_t status to check for
 * output: the flag register's status
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t flag_name) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & flag_name) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <I2C_ManageAcking>:
 * desc: handles the enabling/disabling of I2C ACKing
 * input1: I2C register pointer mapped to an I2C peripheral
 * input2: a flag for enabling/disabling
 * output: none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == I2C_ACK_ENABLE) {
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d106      	bne.n	8000fe4 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000fe2:	e005      	b.n	8000ff0 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <I2C_GenerateStartCondition>:
		// notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
	}
}

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	70fb      	strb	r3, [r7, #3]
	slave_addr &= ~(1);
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	70fb      	strb	r3, [r7, #3]
	slave_addr |= 1;
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 8001082:	78fa      	ldrb	r2, [r7, #3]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	611a      	str	r2, [r3, #16]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <I2C_ClearADDRFlag>:

// clear ack before receipt
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	uint32_t clear_read = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
	// check if device is master or slave mode
	// master mode conditional
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01f      	beq.n	80010ee <I2C_ClearADDRFlag+0x5a>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7f1b      	ldrb	r3, [r3, #28]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d112      	bne.n	80010dc <I2C_ClearADDRFlag+0x48>
			if (pI2CHandle->RxSize == 1) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7f9b      	ldrb	r3, [r3, #30]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d11f      	bne.n	80010fe <I2C_ClearADDRFlag+0x6a>
				// disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff7d 	bl	8000fc4 <I2C_ManageAcking>
				// then clear addr
				// SR->ADDR is cleared by reading SR1 and SR2
				clear_read = pI2CHandle->pI2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	60fb      	str	r3, [r7, #12]
				clear_read = pI2CHandle->pI2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	60fb      	str	r3, [r7, #12]
		clear_read = pI2CHandle->pI2Cx->SR1;
		clear_read = pI2CHandle->pI2Cx->SR2;
		(void)clear_read;
	}

}
 80010da:	e010      	b.n	80010fe <I2C_ClearADDRFlag+0x6a>
			clear_read = pI2CHandle->pI2Cx->SR1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	60fb      	str	r3, [r7, #12]
			clear_read = pI2CHandle->pI2Cx->SR2;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	60fb      	str	r3, [r7, #12]
}
 80010ec:	e007      	b.n	80010fe <I2C_ClearADDRFlag+0x6a>
		clear_read = pI2CHandle->pI2Cx->SR1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	60fb      	str	r3, [r7, #12]
		clear_read = pI2CHandle->pI2Cx->SR2;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	60fb      	str	r3, [r7, #12]
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <__errno>:
 8001108:	4b01      	ldr	r3, [pc, #4]	; (8001110 <__errno+0x8>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <__libc_init_array>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	4e0d      	ldr	r6, [pc, #52]	; (800114c <__libc_init_array+0x38>)
 8001118:	4c0d      	ldr	r4, [pc, #52]	; (8001150 <__libc_init_array+0x3c>)
 800111a:	1ba4      	subs	r4, r4, r6
 800111c:	10a4      	asrs	r4, r4, #2
 800111e:	2500      	movs	r5, #0
 8001120:	42a5      	cmp	r5, r4
 8001122:	d109      	bne.n	8001138 <__libc_init_array+0x24>
 8001124:	4e0b      	ldr	r6, [pc, #44]	; (8001154 <__libc_init_array+0x40>)
 8001126:	4c0c      	ldr	r4, [pc, #48]	; (8001158 <__libc_init_array+0x44>)
 8001128:	f001 fa10 	bl	800254c <_init>
 800112c:	1ba4      	subs	r4, r4, r6
 800112e:	10a4      	asrs	r4, r4, #2
 8001130:	2500      	movs	r5, #0
 8001132:	42a5      	cmp	r5, r4
 8001134:	d105      	bne.n	8001142 <__libc_init_array+0x2e>
 8001136:	bd70      	pop	{r4, r5, r6, pc}
 8001138:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800113c:	4798      	blx	r3
 800113e:	3501      	adds	r5, #1
 8001140:	e7ee      	b.n	8001120 <__libc_init_array+0xc>
 8001142:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001146:	4798      	blx	r3
 8001148:	3501      	adds	r5, #1
 800114a:	e7f2      	b.n	8001132 <__libc_init_array+0x1e>
 800114c:	08002688 	.word	0x08002688
 8001150:	08002688 	.word	0x08002688
 8001154:	08002688 	.word	0x08002688
 8001158:	0800268c 	.word	0x0800268c

0800115c <memset>:
 800115c:	4402      	add	r2, r0
 800115e:	4603      	mov	r3, r0
 8001160:	4293      	cmp	r3, r2
 8001162:	d100      	bne.n	8001166 <memset+0xa>
 8001164:	4770      	bx	lr
 8001166:	f803 1b01 	strb.w	r1, [r3], #1
 800116a:	e7f9      	b.n	8001160 <memset+0x4>

0800116c <iprintf>:
 800116c:	b40f      	push	{r0, r1, r2, r3}
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <iprintf+0x2c>)
 8001170:	b513      	push	{r0, r1, r4, lr}
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	b124      	cbz	r4, 8001180 <iprintf+0x14>
 8001176:	69a3      	ldr	r3, [r4, #24]
 8001178:	b913      	cbnz	r3, 8001180 <iprintf+0x14>
 800117a:	4620      	mov	r0, r4
 800117c:	f000 fa22 	bl	80015c4 <__sinit>
 8001180:	ab05      	add	r3, sp, #20
 8001182:	9a04      	ldr	r2, [sp, #16]
 8001184:	68a1      	ldr	r1, [r4, #8]
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	4620      	mov	r0, r4
 800118a:	f000 fbdb 	bl	8001944 <_vfiprintf_r>
 800118e:	b002      	add	sp, #8
 8001190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001194:	b004      	add	sp, #16
 8001196:	4770      	bx	lr
 8001198:	20000000 	.word	0x20000000

0800119c <_puts_r>:
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	460e      	mov	r6, r1
 80011a0:	4605      	mov	r5, r0
 80011a2:	b118      	cbz	r0, 80011ac <_puts_r+0x10>
 80011a4:	6983      	ldr	r3, [r0, #24]
 80011a6:	b90b      	cbnz	r3, 80011ac <_puts_r+0x10>
 80011a8:	f000 fa0c 	bl	80015c4 <__sinit>
 80011ac:	69ab      	ldr	r3, [r5, #24]
 80011ae:	68ac      	ldr	r4, [r5, #8]
 80011b0:	b913      	cbnz	r3, 80011b8 <_puts_r+0x1c>
 80011b2:	4628      	mov	r0, r5
 80011b4:	f000 fa06 	bl	80015c4 <__sinit>
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <_puts_r+0xac>)
 80011ba:	429c      	cmp	r4, r3
 80011bc:	d117      	bne.n	80011ee <_puts_r+0x52>
 80011be:	686c      	ldr	r4, [r5, #4]
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	071b      	lsls	r3, r3, #28
 80011c4:	d51d      	bpl.n	8001202 <_puts_r+0x66>
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	b1db      	cbz	r3, 8001202 <_puts_r+0x66>
 80011ca:	3e01      	subs	r6, #1
 80011cc:	68a3      	ldr	r3, [r4, #8]
 80011ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011d2:	3b01      	subs	r3, #1
 80011d4:	60a3      	str	r3, [r4, #8]
 80011d6:	b9e9      	cbnz	r1, 8001214 <_puts_r+0x78>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da2e      	bge.n	800123a <_puts_r+0x9e>
 80011dc:	4622      	mov	r2, r4
 80011de:	210a      	movs	r1, #10
 80011e0:	4628      	mov	r0, r5
 80011e2:	f000 f83f 	bl	8001264 <__swbuf_r>
 80011e6:	3001      	adds	r0, #1
 80011e8:	d011      	beq.n	800120e <_puts_r+0x72>
 80011ea:	200a      	movs	r0, #10
 80011ec:	e011      	b.n	8001212 <_puts_r+0x76>
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <_puts_r+0xb0>)
 80011f0:	429c      	cmp	r4, r3
 80011f2:	d101      	bne.n	80011f8 <_puts_r+0x5c>
 80011f4:	68ac      	ldr	r4, [r5, #8]
 80011f6:	e7e3      	b.n	80011c0 <_puts_r+0x24>
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_puts_r+0xb4>)
 80011fa:	429c      	cmp	r4, r3
 80011fc:	bf08      	it	eq
 80011fe:	68ec      	ldreq	r4, [r5, #12]
 8001200:	e7de      	b.n	80011c0 <_puts_r+0x24>
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	f000 f87f 	bl	8001308 <__swsetup_r>
 800120a:	2800      	cmp	r0, #0
 800120c:	d0dd      	beq.n	80011ca <_puts_r+0x2e>
 800120e:	f04f 30ff 	mov.w	r0, #4294967295
 8001212:	bd70      	pop	{r4, r5, r6, pc}
 8001214:	2b00      	cmp	r3, #0
 8001216:	da04      	bge.n	8001222 <_puts_r+0x86>
 8001218:	69a2      	ldr	r2, [r4, #24]
 800121a:	429a      	cmp	r2, r3
 800121c:	dc06      	bgt.n	800122c <_puts_r+0x90>
 800121e:	290a      	cmp	r1, #10
 8001220:	d004      	beq.n	800122c <_puts_r+0x90>
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	6022      	str	r2, [r4, #0]
 8001228:	7019      	strb	r1, [r3, #0]
 800122a:	e7cf      	b.n	80011cc <_puts_r+0x30>
 800122c:	4622      	mov	r2, r4
 800122e:	4628      	mov	r0, r5
 8001230:	f000 f818 	bl	8001264 <__swbuf_r>
 8001234:	3001      	adds	r0, #1
 8001236:	d1c9      	bne.n	80011cc <_puts_r+0x30>
 8001238:	e7e9      	b.n	800120e <_puts_r+0x72>
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	200a      	movs	r0, #10
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	6022      	str	r2, [r4, #0]
 8001242:	7018      	strb	r0, [r3, #0]
 8001244:	e7e5      	b.n	8001212 <_puts_r+0x76>
 8001246:	bf00      	nop
 8001248:	080025f8 	.word	0x080025f8
 800124c:	08002618 	.word	0x08002618
 8001250:	080025d8 	.word	0x080025d8

08001254 <puts>:
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <puts+0xc>)
 8001256:	4601      	mov	r1, r0
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f7ff bf9f 	b.w	800119c <_puts_r>
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <__swbuf_r>:
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001266:	460e      	mov	r6, r1
 8001268:	4614      	mov	r4, r2
 800126a:	4605      	mov	r5, r0
 800126c:	b118      	cbz	r0, 8001276 <__swbuf_r+0x12>
 800126e:	6983      	ldr	r3, [r0, #24]
 8001270:	b90b      	cbnz	r3, 8001276 <__swbuf_r+0x12>
 8001272:	f000 f9a7 	bl	80015c4 <__sinit>
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <__swbuf_r+0x98>)
 8001278:	429c      	cmp	r4, r3
 800127a:	d12a      	bne.n	80012d2 <__swbuf_r+0x6e>
 800127c:	686c      	ldr	r4, [r5, #4]
 800127e:	69a3      	ldr	r3, [r4, #24]
 8001280:	60a3      	str	r3, [r4, #8]
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	071a      	lsls	r2, r3, #28
 8001286:	d52e      	bpl.n	80012e6 <__swbuf_r+0x82>
 8001288:	6923      	ldr	r3, [r4, #16]
 800128a:	b363      	cbz	r3, 80012e6 <__swbuf_r+0x82>
 800128c:	6923      	ldr	r3, [r4, #16]
 800128e:	6820      	ldr	r0, [r4, #0]
 8001290:	1ac0      	subs	r0, r0, r3
 8001292:	6963      	ldr	r3, [r4, #20]
 8001294:	b2f6      	uxtb	r6, r6
 8001296:	4283      	cmp	r3, r0
 8001298:	4637      	mov	r7, r6
 800129a:	dc04      	bgt.n	80012a6 <__swbuf_r+0x42>
 800129c:	4621      	mov	r1, r4
 800129e:	4628      	mov	r0, r5
 80012a0:	f000 f926 	bl	80014f0 <_fflush_r>
 80012a4:	bb28      	cbnz	r0, 80012f2 <__swbuf_r+0x8e>
 80012a6:	68a3      	ldr	r3, [r4, #8]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	60a3      	str	r3, [r4, #8]
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	6022      	str	r2, [r4, #0]
 80012b2:	701e      	strb	r6, [r3, #0]
 80012b4:	6963      	ldr	r3, [r4, #20]
 80012b6:	3001      	adds	r0, #1
 80012b8:	4283      	cmp	r3, r0
 80012ba:	d004      	beq.n	80012c6 <__swbuf_r+0x62>
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	07db      	lsls	r3, r3, #31
 80012c0:	d519      	bpl.n	80012f6 <__swbuf_r+0x92>
 80012c2:	2e0a      	cmp	r6, #10
 80012c4:	d117      	bne.n	80012f6 <__swbuf_r+0x92>
 80012c6:	4621      	mov	r1, r4
 80012c8:	4628      	mov	r0, r5
 80012ca:	f000 f911 	bl	80014f0 <_fflush_r>
 80012ce:	b190      	cbz	r0, 80012f6 <__swbuf_r+0x92>
 80012d0:	e00f      	b.n	80012f2 <__swbuf_r+0x8e>
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <__swbuf_r+0x9c>)
 80012d4:	429c      	cmp	r4, r3
 80012d6:	d101      	bne.n	80012dc <__swbuf_r+0x78>
 80012d8:	68ac      	ldr	r4, [r5, #8]
 80012da:	e7d0      	b.n	800127e <__swbuf_r+0x1a>
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <__swbuf_r+0xa0>)
 80012de:	429c      	cmp	r4, r3
 80012e0:	bf08      	it	eq
 80012e2:	68ec      	ldreq	r4, [r5, #12]
 80012e4:	e7cb      	b.n	800127e <__swbuf_r+0x1a>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f000 f80d 	bl	8001308 <__swsetup_r>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d0cc      	beq.n	800128c <__swbuf_r+0x28>
 80012f2:	f04f 37ff 	mov.w	r7, #4294967295
 80012f6:	4638      	mov	r0, r7
 80012f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	080025f8 	.word	0x080025f8
 8001300:	08002618 	.word	0x08002618
 8001304:	080025d8 	.word	0x080025d8

08001308 <__swsetup_r>:
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <__swsetup_r+0xcc>)
 800130a:	b570      	push	{r4, r5, r6, lr}
 800130c:	681d      	ldr	r5, [r3, #0]
 800130e:	4606      	mov	r6, r0
 8001310:	460c      	mov	r4, r1
 8001312:	b125      	cbz	r5, 800131e <__swsetup_r+0x16>
 8001314:	69ab      	ldr	r3, [r5, #24]
 8001316:	b913      	cbnz	r3, 800131e <__swsetup_r+0x16>
 8001318:	4628      	mov	r0, r5
 800131a:	f000 f953 	bl	80015c4 <__sinit>
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <__swsetup_r+0xd0>)
 8001320:	429c      	cmp	r4, r3
 8001322:	d10f      	bne.n	8001344 <__swsetup_r+0x3c>
 8001324:	686c      	ldr	r4, [r5, #4]
 8001326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800132a:	b29a      	uxth	r2, r3
 800132c:	0715      	lsls	r5, r2, #28
 800132e:	d42c      	bmi.n	800138a <__swsetup_r+0x82>
 8001330:	06d0      	lsls	r0, r2, #27
 8001332:	d411      	bmi.n	8001358 <__swsetup_r+0x50>
 8001334:	2209      	movs	r2, #9
 8001336:	6032      	str	r2, [r6, #0]
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	f04f 30ff 	mov.w	r0, #4294967295
 8001342:	e03e      	b.n	80013c2 <__swsetup_r+0xba>
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <__swsetup_r+0xd4>)
 8001346:	429c      	cmp	r4, r3
 8001348:	d101      	bne.n	800134e <__swsetup_r+0x46>
 800134a:	68ac      	ldr	r4, [r5, #8]
 800134c:	e7eb      	b.n	8001326 <__swsetup_r+0x1e>
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <__swsetup_r+0xd8>)
 8001350:	429c      	cmp	r4, r3
 8001352:	bf08      	it	eq
 8001354:	68ec      	ldreq	r4, [r5, #12]
 8001356:	e7e6      	b.n	8001326 <__swsetup_r+0x1e>
 8001358:	0751      	lsls	r1, r2, #29
 800135a:	d512      	bpl.n	8001382 <__swsetup_r+0x7a>
 800135c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800135e:	b141      	cbz	r1, 8001372 <__swsetup_r+0x6a>
 8001360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001364:	4299      	cmp	r1, r3
 8001366:	d002      	beq.n	800136e <__swsetup_r+0x66>
 8001368:	4630      	mov	r0, r6
 800136a:	f000 fa19 	bl	80017a0 <_free_r>
 800136e:	2300      	movs	r3, #0
 8001370:	6363      	str	r3, [r4, #52]	; 0x34
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001378:	81a3      	strh	r3, [r4, #12]
 800137a:	2300      	movs	r3, #0
 800137c:	6063      	str	r3, [r4, #4]
 800137e:	6923      	ldr	r3, [r4, #16]
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	81a3      	strh	r3, [r4, #12]
 800138a:	6923      	ldr	r3, [r4, #16]
 800138c:	b94b      	cbnz	r3, 80013a2 <__swsetup_r+0x9a>
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001398:	d003      	beq.n	80013a2 <__swsetup_r+0x9a>
 800139a:	4621      	mov	r1, r4
 800139c:	4630      	mov	r0, r6
 800139e:	f000 f9bf 	bl	8001720 <__smakebuf_r>
 80013a2:	89a2      	ldrh	r2, [r4, #12]
 80013a4:	f012 0301 	ands.w	r3, r2, #1
 80013a8:	d00c      	beq.n	80013c4 <__swsetup_r+0xbc>
 80013aa:	2300      	movs	r3, #0
 80013ac:	60a3      	str	r3, [r4, #8]
 80013ae:	6963      	ldr	r3, [r4, #20]
 80013b0:	425b      	negs	r3, r3
 80013b2:	61a3      	str	r3, [r4, #24]
 80013b4:	6923      	ldr	r3, [r4, #16]
 80013b6:	b953      	cbnz	r3, 80013ce <__swsetup_r+0xc6>
 80013b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80013c0:	d1ba      	bne.n	8001338 <__swsetup_r+0x30>
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	0792      	lsls	r2, r2, #30
 80013c6:	bf58      	it	pl
 80013c8:	6963      	ldrpl	r3, [r4, #20]
 80013ca:	60a3      	str	r3, [r4, #8]
 80013cc:	e7f2      	b.n	80013b4 <__swsetup_r+0xac>
 80013ce:	2000      	movs	r0, #0
 80013d0:	e7f7      	b.n	80013c2 <__swsetup_r+0xba>
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	080025f8 	.word	0x080025f8
 80013dc:	08002618 	.word	0x08002618
 80013e0:	080025d8 	.word	0x080025d8

080013e4 <__sflush_r>:
 80013e4:	898a      	ldrh	r2, [r1, #12]
 80013e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ea:	4605      	mov	r5, r0
 80013ec:	0710      	lsls	r0, r2, #28
 80013ee:	460c      	mov	r4, r1
 80013f0:	d458      	bmi.n	80014a4 <__sflush_r+0xc0>
 80013f2:	684b      	ldr	r3, [r1, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	dc05      	bgt.n	8001404 <__sflush_r+0x20>
 80013f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc02      	bgt.n	8001404 <__sflush_r+0x20>
 80013fe:	2000      	movs	r0, #0
 8001400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001406:	2e00      	cmp	r6, #0
 8001408:	d0f9      	beq.n	80013fe <__sflush_r+0x1a>
 800140a:	2300      	movs	r3, #0
 800140c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001410:	682f      	ldr	r7, [r5, #0]
 8001412:	6a21      	ldr	r1, [r4, #32]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	d032      	beq.n	800147e <__sflush_r+0x9a>
 8001418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800141a:	89a3      	ldrh	r3, [r4, #12]
 800141c:	075a      	lsls	r2, r3, #29
 800141e:	d505      	bpl.n	800142c <__sflush_r+0x48>
 8001420:	6863      	ldr	r3, [r4, #4]
 8001422:	1ac0      	subs	r0, r0, r3
 8001424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001426:	b10b      	cbz	r3, 800142c <__sflush_r+0x48>
 8001428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142a:	1ac0      	subs	r0, r0, r3
 800142c:	2300      	movs	r3, #0
 800142e:	4602      	mov	r2, r0
 8001430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001432:	6a21      	ldr	r1, [r4, #32]
 8001434:	4628      	mov	r0, r5
 8001436:	47b0      	blx	r6
 8001438:	1c43      	adds	r3, r0, #1
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	d106      	bne.n	800144c <__sflush_r+0x68>
 800143e:	6829      	ldr	r1, [r5, #0]
 8001440:	291d      	cmp	r1, #29
 8001442:	d848      	bhi.n	80014d6 <__sflush_r+0xf2>
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <__sflush_r+0x108>)
 8001446:	40ca      	lsrs	r2, r1
 8001448:	07d6      	lsls	r6, r2, #31
 800144a:	d544      	bpl.n	80014d6 <__sflush_r+0xf2>
 800144c:	2200      	movs	r2, #0
 800144e:	6062      	str	r2, [r4, #4]
 8001450:	04d9      	lsls	r1, r3, #19
 8001452:	6922      	ldr	r2, [r4, #16]
 8001454:	6022      	str	r2, [r4, #0]
 8001456:	d504      	bpl.n	8001462 <__sflush_r+0x7e>
 8001458:	1c42      	adds	r2, r0, #1
 800145a:	d101      	bne.n	8001460 <__sflush_r+0x7c>
 800145c:	682b      	ldr	r3, [r5, #0]
 800145e:	b903      	cbnz	r3, 8001462 <__sflush_r+0x7e>
 8001460:	6560      	str	r0, [r4, #84]	; 0x54
 8001462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001464:	602f      	str	r7, [r5, #0]
 8001466:	2900      	cmp	r1, #0
 8001468:	d0c9      	beq.n	80013fe <__sflush_r+0x1a>
 800146a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800146e:	4299      	cmp	r1, r3
 8001470:	d002      	beq.n	8001478 <__sflush_r+0x94>
 8001472:	4628      	mov	r0, r5
 8001474:	f000 f994 	bl	80017a0 <_free_r>
 8001478:	2000      	movs	r0, #0
 800147a:	6360      	str	r0, [r4, #52]	; 0x34
 800147c:	e7c0      	b.n	8001400 <__sflush_r+0x1c>
 800147e:	2301      	movs	r3, #1
 8001480:	4628      	mov	r0, r5
 8001482:	47b0      	blx	r6
 8001484:	1c41      	adds	r1, r0, #1
 8001486:	d1c8      	bne.n	800141a <__sflush_r+0x36>
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0c5      	beq.n	800141a <__sflush_r+0x36>
 800148e:	2b1d      	cmp	r3, #29
 8001490:	d001      	beq.n	8001496 <__sflush_r+0xb2>
 8001492:	2b16      	cmp	r3, #22
 8001494:	d101      	bne.n	800149a <__sflush_r+0xb6>
 8001496:	602f      	str	r7, [r5, #0]
 8001498:	e7b1      	b.n	80013fe <__sflush_r+0x1a>
 800149a:	89a3      	ldrh	r3, [r4, #12]
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	81a3      	strh	r3, [r4, #12]
 80014a2:	e7ad      	b.n	8001400 <__sflush_r+0x1c>
 80014a4:	690f      	ldr	r7, [r1, #16]
 80014a6:	2f00      	cmp	r7, #0
 80014a8:	d0a9      	beq.n	80013fe <__sflush_r+0x1a>
 80014aa:	0793      	lsls	r3, r2, #30
 80014ac:	680e      	ldr	r6, [r1, #0]
 80014ae:	bf08      	it	eq
 80014b0:	694b      	ldreq	r3, [r1, #20]
 80014b2:	600f      	str	r7, [r1, #0]
 80014b4:	bf18      	it	ne
 80014b6:	2300      	movne	r3, #0
 80014b8:	eba6 0807 	sub.w	r8, r6, r7
 80014bc:	608b      	str	r3, [r1, #8]
 80014be:	f1b8 0f00 	cmp.w	r8, #0
 80014c2:	dd9c      	ble.n	80013fe <__sflush_r+0x1a>
 80014c4:	4643      	mov	r3, r8
 80014c6:	463a      	mov	r2, r7
 80014c8:	6a21      	ldr	r1, [r4, #32]
 80014ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014cc:	4628      	mov	r0, r5
 80014ce:	47b0      	blx	r6
 80014d0:	2800      	cmp	r0, #0
 80014d2:	dc06      	bgt.n	80014e2 <__sflush_r+0xfe>
 80014d4:	89a3      	ldrh	r3, [r4, #12]
 80014d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014da:	81a3      	strh	r3, [r4, #12]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	e78e      	b.n	8001400 <__sflush_r+0x1c>
 80014e2:	4407      	add	r7, r0
 80014e4:	eba8 0800 	sub.w	r8, r8, r0
 80014e8:	e7e9      	b.n	80014be <__sflush_r+0xda>
 80014ea:	bf00      	nop
 80014ec:	20400001 	.word	0x20400001

080014f0 <_fflush_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	690b      	ldr	r3, [r1, #16]
 80014f4:	4605      	mov	r5, r0
 80014f6:	460c      	mov	r4, r1
 80014f8:	b1db      	cbz	r3, 8001532 <_fflush_r+0x42>
 80014fa:	b118      	cbz	r0, 8001504 <_fflush_r+0x14>
 80014fc:	6983      	ldr	r3, [r0, #24]
 80014fe:	b90b      	cbnz	r3, 8001504 <_fflush_r+0x14>
 8001500:	f000 f860 	bl	80015c4 <__sinit>
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <_fflush_r+0x48>)
 8001506:	429c      	cmp	r4, r3
 8001508:	d109      	bne.n	800151e <_fflush_r+0x2e>
 800150a:	686c      	ldr	r4, [r5, #4]
 800150c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001510:	b17b      	cbz	r3, 8001532 <_fflush_r+0x42>
 8001512:	4621      	mov	r1, r4
 8001514:	4628      	mov	r0, r5
 8001516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800151a:	f7ff bf63 	b.w	80013e4 <__sflush_r>
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_fflush_r+0x4c>)
 8001520:	429c      	cmp	r4, r3
 8001522:	d101      	bne.n	8001528 <_fflush_r+0x38>
 8001524:	68ac      	ldr	r4, [r5, #8]
 8001526:	e7f1      	b.n	800150c <_fflush_r+0x1c>
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <_fflush_r+0x50>)
 800152a:	429c      	cmp	r4, r3
 800152c:	bf08      	it	eq
 800152e:	68ec      	ldreq	r4, [r5, #12]
 8001530:	e7ec      	b.n	800150c <_fflush_r+0x1c>
 8001532:	2000      	movs	r0, #0
 8001534:	bd38      	pop	{r3, r4, r5, pc}
 8001536:	bf00      	nop
 8001538:	080025f8 	.word	0x080025f8
 800153c:	08002618 	.word	0x08002618
 8001540:	080025d8 	.word	0x080025d8

08001544 <std>:
 8001544:	2300      	movs	r3, #0
 8001546:	b510      	push	{r4, lr}
 8001548:	4604      	mov	r4, r0
 800154a:	e9c0 3300 	strd	r3, r3, [r0]
 800154e:	6083      	str	r3, [r0, #8]
 8001550:	8181      	strh	r1, [r0, #12]
 8001552:	6643      	str	r3, [r0, #100]	; 0x64
 8001554:	81c2      	strh	r2, [r0, #14]
 8001556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800155a:	6183      	str	r3, [r0, #24]
 800155c:	4619      	mov	r1, r3
 800155e:	2208      	movs	r2, #8
 8001560:	305c      	adds	r0, #92	; 0x5c
 8001562:	f7ff fdfb 	bl	800115c <memset>
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <std+0x38>)
 8001568:	6263      	str	r3, [r4, #36]	; 0x24
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <std+0x3c>)
 800156c:	62a3      	str	r3, [r4, #40]	; 0x28
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <std+0x40>)
 8001570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <std+0x44>)
 8001574:	6224      	str	r4, [r4, #32]
 8001576:	6323      	str	r3, [r4, #48]	; 0x30
 8001578:	bd10      	pop	{r4, pc}
 800157a:	bf00      	nop
 800157c:	08001ea1 	.word	0x08001ea1
 8001580:	08001ec3 	.word	0x08001ec3
 8001584:	08001efb 	.word	0x08001efb
 8001588:	08001f1f 	.word	0x08001f1f

0800158c <_cleanup_r>:
 800158c:	4901      	ldr	r1, [pc, #4]	; (8001594 <_cleanup_r+0x8>)
 800158e:	f000 b885 	b.w	800169c <_fwalk_reent>
 8001592:	bf00      	nop
 8001594:	080014f1 	.word	0x080014f1

08001598 <__sfmoreglue>:
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	1e4a      	subs	r2, r1, #1
 800159c:	2568      	movs	r5, #104	; 0x68
 800159e:	4355      	muls	r5, r2
 80015a0:	460e      	mov	r6, r1
 80015a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015a6:	f000 f949 	bl	800183c <_malloc_r>
 80015aa:	4604      	mov	r4, r0
 80015ac:	b140      	cbz	r0, 80015c0 <__sfmoreglue+0x28>
 80015ae:	2100      	movs	r1, #0
 80015b0:	e9c0 1600 	strd	r1, r6, [r0]
 80015b4:	300c      	adds	r0, #12
 80015b6:	60a0      	str	r0, [r4, #8]
 80015b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015bc:	f7ff fdce 	bl	800115c <memset>
 80015c0:	4620      	mov	r0, r4
 80015c2:	bd70      	pop	{r4, r5, r6, pc}

080015c4 <__sinit>:
 80015c4:	6983      	ldr	r3, [r0, #24]
 80015c6:	b510      	push	{r4, lr}
 80015c8:	4604      	mov	r4, r0
 80015ca:	bb33      	cbnz	r3, 800161a <__sinit+0x56>
 80015cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80015d0:	6503      	str	r3, [r0, #80]	; 0x50
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <__sinit+0x58>)
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <__sinit+0x5c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6282      	str	r2, [r0, #40]	; 0x28
 80015da:	4298      	cmp	r0, r3
 80015dc:	bf04      	itt	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	6183      	streq	r3, [r0, #24]
 80015e2:	f000 f81f 	bl	8001624 <__sfp>
 80015e6:	6060      	str	r0, [r4, #4]
 80015e8:	4620      	mov	r0, r4
 80015ea:	f000 f81b 	bl	8001624 <__sfp>
 80015ee:	60a0      	str	r0, [r4, #8]
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 f817 	bl	8001624 <__sfp>
 80015f6:	2200      	movs	r2, #0
 80015f8:	60e0      	str	r0, [r4, #12]
 80015fa:	2104      	movs	r1, #4
 80015fc:	6860      	ldr	r0, [r4, #4]
 80015fe:	f7ff ffa1 	bl	8001544 <std>
 8001602:	2201      	movs	r2, #1
 8001604:	2109      	movs	r1, #9
 8001606:	68a0      	ldr	r0, [r4, #8]
 8001608:	f7ff ff9c 	bl	8001544 <std>
 800160c:	2202      	movs	r2, #2
 800160e:	2112      	movs	r1, #18
 8001610:	68e0      	ldr	r0, [r4, #12]
 8001612:	f7ff ff97 	bl	8001544 <std>
 8001616:	2301      	movs	r3, #1
 8001618:	61a3      	str	r3, [r4, #24]
 800161a:	bd10      	pop	{r4, pc}
 800161c:	080025d4 	.word	0x080025d4
 8001620:	0800158d 	.word	0x0800158d

08001624 <__sfp>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <__sfp+0x70>)
 8001628:	681e      	ldr	r6, [r3, #0]
 800162a:	69b3      	ldr	r3, [r6, #24]
 800162c:	4607      	mov	r7, r0
 800162e:	b913      	cbnz	r3, 8001636 <__sfp+0x12>
 8001630:	4630      	mov	r0, r6
 8001632:	f7ff ffc7 	bl	80015c4 <__sinit>
 8001636:	3648      	adds	r6, #72	; 0x48
 8001638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800163c:	3b01      	subs	r3, #1
 800163e:	d503      	bpl.n	8001648 <__sfp+0x24>
 8001640:	6833      	ldr	r3, [r6, #0]
 8001642:	b133      	cbz	r3, 8001652 <__sfp+0x2e>
 8001644:	6836      	ldr	r6, [r6, #0]
 8001646:	e7f7      	b.n	8001638 <__sfp+0x14>
 8001648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800164c:	b16d      	cbz	r5, 800166a <__sfp+0x46>
 800164e:	3468      	adds	r4, #104	; 0x68
 8001650:	e7f4      	b.n	800163c <__sfp+0x18>
 8001652:	2104      	movs	r1, #4
 8001654:	4638      	mov	r0, r7
 8001656:	f7ff ff9f 	bl	8001598 <__sfmoreglue>
 800165a:	6030      	str	r0, [r6, #0]
 800165c:	2800      	cmp	r0, #0
 800165e:	d1f1      	bne.n	8001644 <__sfp+0x20>
 8001660:	230c      	movs	r3, #12
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4604      	mov	r4, r0
 8001666:	4620      	mov	r0, r4
 8001668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <__sfp+0x74>)
 800166c:	6665      	str	r5, [r4, #100]	; 0x64
 800166e:	e9c4 5500 	strd	r5, r5, [r4]
 8001672:	60a5      	str	r5, [r4, #8]
 8001674:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001678:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800167c:	2208      	movs	r2, #8
 800167e:	4629      	mov	r1, r5
 8001680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001684:	f7ff fd6a 	bl	800115c <memset>
 8001688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800168c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001690:	e7e9      	b.n	8001666 <__sfp+0x42>
 8001692:	bf00      	nop
 8001694:	080025d4 	.word	0x080025d4
 8001698:	ffff0001 	.word	0xffff0001

0800169c <_fwalk_reent>:
 800169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a0:	4680      	mov	r8, r0
 80016a2:	4689      	mov	r9, r1
 80016a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016a8:	2600      	movs	r6, #0
 80016aa:	b914      	cbnz	r4, 80016b2 <_fwalk_reent+0x16>
 80016ac:	4630      	mov	r0, r6
 80016ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80016b6:	3f01      	subs	r7, #1
 80016b8:	d501      	bpl.n	80016be <_fwalk_reent+0x22>
 80016ba:	6824      	ldr	r4, [r4, #0]
 80016bc:	e7f5      	b.n	80016aa <_fwalk_reent+0xe>
 80016be:	89ab      	ldrh	r3, [r5, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d907      	bls.n	80016d4 <_fwalk_reent+0x38>
 80016c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016c8:	3301      	adds	r3, #1
 80016ca:	d003      	beq.n	80016d4 <_fwalk_reent+0x38>
 80016cc:	4629      	mov	r1, r5
 80016ce:	4640      	mov	r0, r8
 80016d0:	47c8      	blx	r9
 80016d2:	4306      	orrs	r6, r0
 80016d4:	3568      	adds	r5, #104	; 0x68
 80016d6:	e7ee      	b.n	80016b6 <_fwalk_reent+0x1a>

080016d8 <__swhatbuf_r>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	460e      	mov	r6, r1
 80016dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e0:	2900      	cmp	r1, #0
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	4614      	mov	r4, r2
 80016e6:	461d      	mov	r5, r3
 80016e8:	da07      	bge.n	80016fa <__swhatbuf_r+0x22>
 80016ea:	2300      	movs	r3, #0
 80016ec:	602b      	str	r3, [r5, #0]
 80016ee:	89b3      	ldrh	r3, [r6, #12]
 80016f0:	061a      	lsls	r2, r3, #24
 80016f2:	d410      	bmi.n	8001716 <__swhatbuf_r+0x3e>
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	e00e      	b.n	8001718 <__swhatbuf_r+0x40>
 80016fa:	466a      	mov	r2, sp
 80016fc:	f000 fc36 	bl	8001f6c <_fstat_r>
 8001700:	2800      	cmp	r0, #0
 8001702:	dbf2      	blt.n	80016ea <__swhatbuf_r+0x12>
 8001704:	9a01      	ldr	r2, [sp, #4]
 8001706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800170a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800170e:	425a      	negs	r2, r3
 8001710:	415a      	adcs	r2, r3
 8001712:	602a      	str	r2, [r5, #0]
 8001714:	e7ee      	b.n	80016f4 <__swhatbuf_r+0x1c>
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	2000      	movs	r0, #0
 800171a:	6023      	str	r3, [r4, #0]
 800171c:	b016      	add	sp, #88	; 0x58
 800171e:	bd70      	pop	{r4, r5, r6, pc}

08001720 <__smakebuf_r>:
 8001720:	898b      	ldrh	r3, [r1, #12]
 8001722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001724:	079d      	lsls	r5, r3, #30
 8001726:	4606      	mov	r6, r0
 8001728:	460c      	mov	r4, r1
 800172a:	d507      	bpl.n	800173c <__smakebuf_r+0x1c>
 800172c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001730:	6023      	str	r3, [r4, #0]
 8001732:	6123      	str	r3, [r4, #16]
 8001734:	2301      	movs	r3, #1
 8001736:	6163      	str	r3, [r4, #20]
 8001738:	b002      	add	sp, #8
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	ab01      	add	r3, sp, #4
 800173e:	466a      	mov	r2, sp
 8001740:	f7ff ffca 	bl	80016d8 <__swhatbuf_r>
 8001744:	9900      	ldr	r1, [sp, #0]
 8001746:	4605      	mov	r5, r0
 8001748:	4630      	mov	r0, r6
 800174a:	f000 f877 	bl	800183c <_malloc_r>
 800174e:	b948      	cbnz	r0, 8001764 <__smakebuf_r+0x44>
 8001750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001754:	059a      	lsls	r2, r3, #22
 8001756:	d4ef      	bmi.n	8001738 <__smakebuf_r+0x18>
 8001758:	f023 0303 	bic.w	r3, r3, #3
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	81a3      	strh	r3, [r4, #12]
 8001762:	e7e3      	b.n	800172c <__smakebuf_r+0xc>
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <__smakebuf_r+0x7c>)
 8001766:	62b3      	str	r3, [r6, #40]	; 0x28
 8001768:	89a3      	ldrh	r3, [r4, #12]
 800176a:	6020      	str	r0, [r4, #0]
 800176c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001770:	81a3      	strh	r3, [r4, #12]
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	6163      	str	r3, [r4, #20]
 8001776:	9b01      	ldr	r3, [sp, #4]
 8001778:	6120      	str	r0, [r4, #16]
 800177a:	b15b      	cbz	r3, 8001794 <__smakebuf_r+0x74>
 800177c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001780:	4630      	mov	r0, r6
 8001782:	f000 fc05 	bl	8001f90 <_isatty_r>
 8001786:	b128      	cbz	r0, 8001794 <__smakebuf_r+0x74>
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	81a3      	strh	r3, [r4, #12]
 8001794:	89a3      	ldrh	r3, [r4, #12]
 8001796:	431d      	orrs	r5, r3
 8001798:	81a5      	strh	r5, [r4, #12]
 800179a:	e7cd      	b.n	8001738 <__smakebuf_r+0x18>
 800179c:	0800158d 	.word	0x0800158d

080017a0 <_free_r>:
 80017a0:	b538      	push	{r3, r4, r5, lr}
 80017a2:	4605      	mov	r5, r0
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d045      	beq.n	8001834 <_free_r+0x94>
 80017a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017ac:	1f0c      	subs	r4, r1, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bfb8      	it	lt
 80017b2:	18e4      	addlt	r4, r4, r3
 80017b4:	f000 fc0e 	bl	8001fd4 <__malloc_lock>
 80017b8:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <_free_r+0x98>)
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	4610      	mov	r0, r2
 80017be:	b933      	cbnz	r3, 80017ce <_free_r+0x2e>
 80017c0:	6063      	str	r3, [r4, #4]
 80017c2:	6014      	str	r4, [r2, #0]
 80017c4:	4628      	mov	r0, r5
 80017c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017ca:	f000 bc04 	b.w	8001fd6 <__malloc_unlock>
 80017ce:	42a3      	cmp	r3, r4
 80017d0:	d90c      	bls.n	80017ec <_free_r+0x4c>
 80017d2:	6821      	ldr	r1, [r4, #0]
 80017d4:	1862      	adds	r2, r4, r1
 80017d6:	4293      	cmp	r3, r2
 80017d8:	bf04      	itt	eq
 80017da:	681a      	ldreq	r2, [r3, #0]
 80017dc:	685b      	ldreq	r3, [r3, #4]
 80017de:	6063      	str	r3, [r4, #4]
 80017e0:	bf04      	itt	eq
 80017e2:	1852      	addeq	r2, r2, r1
 80017e4:	6022      	streq	r2, [r4, #0]
 80017e6:	6004      	str	r4, [r0, #0]
 80017e8:	e7ec      	b.n	80017c4 <_free_r+0x24>
 80017ea:	4613      	mov	r3, r2
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	b10a      	cbz	r2, 80017f4 <_free_r+0x54>
 80017f0:	42a2      	cmp	r2, r4
 80017f2:	d9fa      	bls.n	80017ea <_free_r+0x4a>
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	1858      	adds	r0, r3, r1
 80017f8:	42a0      	cmp	r0, r4
 80017fa:	d10b      	bne.n	8001814 <_free_r+0x74>
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	4401      	add	r1, r0
 8001800:	1858      	adds	r0, r3, r1
 8001802:	4282      	cmp	r2, r0
 8001804:	6019      	str	r1, [r3, #0]
 8001806:	d1dd      	bne.n	80017c4 <_free_r+0x24>
 8001808:	6810      	ldr	r0, [r2, #0]
 800180a:	6852      	ldr	r2, [r2, #4]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	4401      	add	r1, r0
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	e7d7      	b.n	80017c4 <_free_r+0x24>
 8001814:	d902      	bls.n	800181c <_free_r+0x7c>
 8001816:	230c      	movs	r3, #12
 8001818:	602b      	str	r3, [r5, #0]
 800181a:	e7d3      	b.n	80017c4 <_free_r+0x24>
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	1821      	adds	r1, r4, r0
 8001820:	428a      	cmp	r2, r1
 8001822:	bf04      	itt	eq
 8001824:	6811      	ldreq	r1, [r2, #0]
 8001826:	6852      	ldreq	r2, [r2, #4]
 8001828:	6062      	str	r2, [r4, #4]
 800182a:	bf04      	itt	eq
 800182c:	1809      	addeq	r1, r1, r0
 800182e:	6021      	streq	r1, [r4, #0]
 8001830:	605c      	str	r4, [r3, #4]
 8001832:	e7c7      	b.n	80017c4 <_free_r+0x24>
 8001834:	bd38      	pop	{r3, r4, r5, pc}
 8001836:	bf00      	nop
 8001838:	2000008c 	.word	0x2000008c

0800183c <_malloc_r>:
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	1ccd      	adds	r5, r1, #3
 8001840:	f025 0503 	bic.w	r5, r5, #3
 8001844:	3508      	adds	r5, #8
 8001846:	2d0c      	cmp	r5, #12
 8001848:	bf38      	it	cc
 800184a:	250c      	movcc	r5, #12
 800184c:	2d00      	cmp	r5, #0
 800184e:	4606      	mov	r6, r0
 8001850:	db01      	blt.n	8001856 <_malloc_r+0x1a>
 8001852:	42a9      	cmp	r1, r5
 8001854:	d903      	bls.n	800185e <_malloc_r+0x22>
 8001856:	230c      	movs	r3, #12
 8001858:	6033      	str	r3, [r6, #0]
 800185a:	2000      	movs	r0, #0
 800185c:	bd70      	pop	{r4, r5, r6, pc}
 800185e:	f000 fbb9 	bl	8001fd4 <__malloc_lock>
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <_malloc_r+0xac>)
 8001864:	6814      	ldr	r4, [r2, #0]
 8001866:	4621      	mov	r1, r4
 8001868:	b991      	cbnz	r1, 8001890 <_malloc_r+0x54>
 800186a:	4c20      	ldr	r4, [pc, #128]	; (80018ec <_malloc_r+0xb0>)
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	b91b      	cbnz	r3, 8001878 <_malloc_r+0x3c>
 8001870:	4630      	mov	r0, r6
 8001872:	f000 fb05 	bl	8001e80 <_sbrk_r>
 8001876:	6020      	str	r0, [r4, #0]
 8001878:	4629      	mov	r1, r5
 800187a:	4630      	mov	r0, r6
 800187c:	f000 fb00 	bl	8001e80 <_sbrk_r>
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	d124      	bne.n	80018ce <_malloc_r+0x92>
 8001884:	230c      	movs	r3, #12
 8001886:	6033      	str	r3, [r6, #0]
 8001888:	4630      	mov	r0, r6
 800188a:	f000 fba4 	bl	8001fd6 <__malloc_unlock>
 800188e:	e7e4      	b.n	800185a <_malloc_r+0x1e>
 8001890:	680b      	ldr	r3, [r1, #0]
 8001892:	1b5b      	subs	r3, r3, r5
 8001894:	d418      	bmi.n	80018c8 <_malloc_r+0x8c>
 8001896:	2b0b      	cmp	r3, #11
 8001898:	d90f      	bls.n	80018ba <_malloc_r+0x7e>
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	50cd      	str	r5, [r1, r3]
 800189e:	18cc      	adds	r4, r1, r3
 80018a0:	4630      	mov	r0, r6
 80018a2:	f000 fb98 	bl	8001fd6 <__malloc_unlock>
 80018a6:	f104 000b 	add.w	r0, r4, #11
 80018aa:	1d23      	adds	r3, r4, #4
 80018ac:	f020 0007 	bic.w	r0, r0, #7
 80018b0:	1ac3      	subs	r3, r0, r3
 80018b2:	d0d3      	beq.n	800185c <_malloc_r+0x20>
 80018b4:	425a      	negs	r2, r3
 80018b6:	50e2      	str	r2, [r4, r3]
 80018b8:	e7d0      	b.n	800185c <_malloc_r+0x20>
 80018ba:	428c      	cmp	r4, r1
 80018bc:	684b      	ldr	r3, [r1, #4]
 80018be:	bf16      	itet	ne
 80018c0:	6063      	strne	r3, [r4, #4]
 80018c2:	6013      	streq	r3, [r2, #0]
 80018c4:	460c      	movne	r4, r1
 80018c6:	e7eb      	b.n	80018a0 <_malloc_r+0x64>
 80018c8:	460c      	mov	r4, r1
 80018ca:	6849      	ldr	r1, [r1, #4]
 80018cc:	e7cc      	b.n	8001868 <_malloc_r+0x2c>
 80018ce:	1cc4      	adds	r4, r0, #3
 80018d0:	f024 0403 	bic.w	r4, r4, #3
 80018d4:	42a0      	cmp	r0, r4
 80018d6:	d005      	beq.n	80018e4 <_malloc_r+0xa8>
 80018d8:	1a21      	subs	r1, r4, r0
 80018da:	4630      	mov	r0, r6
 80018dc:	f000 fad0 	bl	8001e80 <_sbrk_r>
 80018e0:	3001      	adds	r0, #1
 80018e2:	d0cf      	beq.n	8001884 <_malloc_r+0x48>
 80018e4:	6025      	str	r5, [r4, #0]
 80018e6:	e7db      	b.n	80018a0 <_malloc_r+0x64>
 80018e8:	2000008c 	.word	0x2000008c
 80018ec:	20000090 	.word	0x20000090

080018f0 <__sfputc_r>:
 80018f0:	6893      	ldr	r3, [r2, #8]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	b410      	push	{r4}
 80018f8:	6093      	str	r3, [r2, #8]
 80018fa:	da08      	bge.n	800190e <__sfputc_r+0x1e>
 80018fc:	6994      	ldr	r4, [r2, #24]
 80018fe:	42a3      	cmp	r3, r4
 8001900:	db01      	blt.n	8001906 <__sfputc_r+0x16>
 8001902:	290a      	cmp	r1, #10
 8001904:	d103      	bne.n	800190e <__sfputc_r+0x1e>
 8001906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800190a:	f7ff bcab 	b.w	8001264 <__swbuf_r>
 800190e:	6813      	ldr	r3, [r2, #0]
 8001910:	1c58      	adds	r0, r3, #1
 8001912:	6010      	str	r0, [r2, #0]
 8001914:	7019      	strb	r1, [r3, #0]
 8001916:	4608      	mov	r0, r1
 8001918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800191c:	4770      	bx	lr

0800191e <__sfputs_r>:
 800191e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001920:	4606      	mov	r6, r0
 8001922:	460f      	mov	r7, r1
 8001924:	4614      	mov	r4, r2
 8001926:	18d5      	adds	r5, r2, r3
 8001928:	42ac      	cmp	r4, r5
 800192a:	d101      	bne.n	8001930 <__sfputs_r+0x12>
 800192c:	2000      	movs	r0, #0
 800192e:	e007      	b.n	8001940 <__sfputs_r+0x22>
 8001930:	463a      	mov	r2, r7
 8001932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001936:	4630      	mov	r0, r6
 8001938:	f7ff ffda 	bl	80018f0 <__sfputc_r>
 800193c:	1c43      	adds	r3, r0, #1
 800193e:	d1f3      	bne.n	8001928 <__sfputs_r+0xa>
 8001940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001944 <_vfiprintf_r>:
 8001944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001948:	460c      	mov	r4, r1
 800194a:	b09d      	sub	sp, #116	; 0x74
 800194c:	4617      	mov	r7, r2
 800194e:	461d      	mov	r5, r3
 8001950:	4606      	mov	r6, r0
 8001952:	b118      	cbz	r0, 800195c <_vfiprintf_r+0x18>
 8001954:	6983      	ldr	r3, [r0, #24]
 8001956:	b90b      	cbnz	r3, 800195c <_vfiprintf_r+0x18>
 8001958:	f7ff fe34 	bl	80015c4 <__sinit>
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <_vfiprintf_r+0x20c>)
 800195e:	429c      	cmp	r4, r3
 8001960:	d158      	bne.n	8001a14 <_vfiprintf_r+0xd0>
 8001962:	6874      	ldr	r4, [r6, #4]
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	0718      	lsls	r0, r3, #28
 8001968:	d55e      	bpl.n	8001a28 <_vfiprintf_r+0xe4>
 800196a:	6923      	ldr	r3, [r4, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d05b      	beq.n	8001a28 <_vfiprintf_r+0xe4>
 8001970:	2300      	movs	r3, #0
 8001972:	9309      	str	r3, [sp, #36]	; 0x24
 8001974:	2320      	movs	r3, #32
 8001976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800197a:	2330      	movs	r3, #48	; 0x30
 800197c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001980:	9503      	str	r5, [sp, #12]
 8001982:	f04f 0b01 	mov.w	fp, #1
 8001986:	46b8      	mov	r8, r7
 8001988:	4645      	mov	r5, r8
 800198a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800198e:	b10b      	cbz	r3, 8001994 <_vfiprintf_r+0x50>
 8001990:	2b25      	cmp	r3, #37	; 0x25
 8001992:	d154      	bne.n	8001a3e <_vfiprintf_r+0xfa>
 8001994:	ebb8 0a07 	subs.w	sl, r8, r7
 8001998:	d00b      	beq.n	80019b2 <_vfiprintf_r+0x6e>
 800199a:	4653      	mov	r3, sl
 800199c:	463a      	mov	r2, r7
 800199e:	4621      	mov	r1, r4
 80019a0:	4630      	mov	r0, r6
 80019a2:	f7ff ffbc 	bl	800191e <__sfputs_r>
 80019a6:	3001      	adds	r0, #1
 80019a8:	f000 80c2 	beq.w	8001b30 <_vfiprintf_r+0x1ec>
 80019ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ae:	4453      	add	r3, sl
 80019b0:	9309      	str	r3, [sp, #36]	; 0x24
 80019b2:	f898 3000 	ldrb.w	r3, [r8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80ba 	beq.w	8001b30 <_vfiprintf_r+0x1ec>
 80019bc:	2300      	movs	r3, #0
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019c6:	9304      	str	r3, [sp, #16]
 80019c8:	9307      	str	r3, [sp, #28]
 80019ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019ce:	931a      	str	r3, [sp, #104]	; 0x68
 80019d0:	46a8      	mov	r8, r5
 80019d2:	2205      	movs	r2, #5
 80019d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80019d8:	485e      	ldr	r0, [pc, #376]	; (8001b54 <_vfiprintf_r+0x210>)
 80019da:	f7fe fc19 	bl	8000210 <memchr>
 80019de:	9b04      	ldr	r3, [sp, #16]
 80019e0:	bb78      	cbnz	r0, 8001a42 <_vfiprintf_r+0xfe>
 80019e2:	06d9      	lsls	r1, r3, #27
 80019e4:	bf44      	itt	mi
 80019e6:	2220      	movmi	r2, #32
 80019e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019ec:	071a      	lsls	r2, r3, #28
 80019ee:	bf44      	itt	mi
 80019f0:	222b      	movmi	r2, #43	; 0x2b
 80019f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019f6:	782a      	ldrb	r2, [r5, #0]
 80019f8:	2a2a      	cmp	r2, #42	; 0x2a
 80019fa:	d02a      	beq.n	8001a52 <_vfiprintf_r+0x10e>
 80019fc:	9a07      	ldr	r2, [sp, #28]
 80019fe:	46a8      	mov	r8, r5
 8001a00:	2000      	movs	r0, #0
 8001a02:	250a      	movs	r5, #10
 8001a04:	4641      	mov	r1, r8
 8001a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a0a:	3b30      	subs	r3, #48	; 0x30
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d969      	bls.n	8001ae4 <_vfiprintf_r+0x1a0>
 8001a10:	b360      	cbz	r0, 8001a6c <_vfiprintf_r+0x128>
 8001a12:	e024      	b.n	8001a5e <_vfiprintf_r+0x11a>
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <_vfiprintf_r+0x214>)
 8001a16:	429c      	cmp	r4, r3
 8001a18:	d101      	bne.n	8001a1e <_vfiprintf_r+0xda>
 8001a1a:	68b4      	ldr	r4, [r6, #8]
 8001a1c:	e7a2      	b.n	8001964 <_vfiprintf_r+0x20>
 8001a1e:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <_vfiprintf_r+0x218>)
 8001a20:	429c      	cmp	r4, r3
 8001a22:	bf08      	it	eq
 8001a24:	68f4      	ldreq	r4, [r6, #12]
 8001a26:	e79d      	b.n	8001964 <_vfiprintf_r+0x20>
 8001a28:	4621      	mov	r1, r4
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f7ff fc6c 	bl	8001308 <__swsetup_r>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d09d      	beq.n	8001970 <_vfiprintf_r+0x2c>
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	b01d      	add	sp, #116	; 0x74
 8001a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a3e:	46a8      	mov	r8, r5
 8001a40:	e7a2      	b.n	8001988 <_vfiprintf_r+0x44>
 8001a42:	4a44      	ldr	r2, [pc, #272]	; (8001b54 <_vfiprintf_r+0x210>)
 8001a44:	1a80      	subs	r0, r0, r2
 8001a46:	fa0b f000 	lsl.w	r0, fp, r0
 8001a4a:	4318      	orrs	r0, r3
 8001a4c:	9004      	str	r0, [sp, #16]
 8001a4e:	4645      	mov	r5, r8
 8001a50:	e7be      	b.n	80019d0 <_vfiprintf_r+0x8c>
 8001a52:	9a03      	ldr	r2, [sp, #12]
 8001a54:	1d11      	adds	r1, r2, #4
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	9103      	str	r1, [sp, #12]
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	db01      	blt.n	8001a62 <_vfiprintf_r+0x11e>
 8001a5e:	9207      	str	r2, [sp, #28]
 8001a60:	e004      	b.n	8001a6c <_vfiprintf_r+0x128>
 8001a62:	4252      	negs	r2, r2
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	9207      	str	r2, [sp, #28]
 8001a6a:	9304      	str	r3, [sp, #16]
 8001a6c:	f898 3000 	ldrb.w	r3, [r8]
 8001a70:	2b2e      	cmp	r3, #46	; 0x2e
 8001a72:	d10e      	bne.n	8001a92 <_vfiprintf_r+0x14e>
 8001a74:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a78:	2b2a      	cmp	r3, #42	; 0x2a
 8001a7a:	d138      	bne.n	8001aee <_vfiprintf_r+0x1aa>
 8001a7c:	9b03      	ldr	r3, [sp, #12]
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	9203      	str	r2, [sp, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bfb8      	it	lt
 8001a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a8c:	f108 0802 	add.w	r8, r8, #2
 8001a90:	9305      	str	r3, [sp, #20]
 8001a92:	4d33      	ldr	r5, [pc, #204]	; (8001b60 <_vfiprintf_r+0x21c>)
 8001a94:	f898 1000 	ldrb.w	r1, [r8]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f7fe fbb8 	bl	8000210 <memchr>
 8001aa0:	b140      	cbz	r0, 8001ab4 <_vfiprintf_r+0x170>
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	1b40      	subs	r0, r0, r5
 8001aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8001aaa:	9b04      	ldr	r3, [sp, #16]
 8001aac:	4303      	orrs	r3, r0
 8001aae:	f108 0801 	add.w	r8, r8, #1
 8001ab2:	9304      	str	r3, [sp, #16]
 8001ab4:	f898 1000 	ldrb.w	r1, [r8]
 8001ab8:	482a      	ldr	r0, [pc, #168]	; (8001b64 <_vfiprintf_r+0x220>)
 8001aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001abe:	2206      	movs	r2, #6
 8001ac0:	f108 0701 	add.w	r7, r8, #1
 8001ac4:	f7fe fba4 	bl	8000210 <memchr>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d037      	beq.n	8001b3c <_vfiprintf_r+0x1f8>
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <_vfiprintf_r+0x224>)
 8001ace:	bb1b      	cbnz	r3, 8001b18 <_vfiprintf_r+0x1d4>
 8001ad0:	9b03      	ldr	r3, [sp, #12]
 8001ad2:	3307      	adds	r3, #7
 8001ad4:	f023 0307 	bic.w	r3, r3, #7
 8001ad8:	3308      	adds	r3, #8
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ade:	444b      	add	r3, r9
 8001ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ae2:	e750      	b.n	8001986 <_vfiprintf_r+0x42>
 8001ae4:	fb05 3202 	mla	r2, r5, r2, r3
 8001ae8:	2001      	movs	r0, #1
 8001aea:	4688      	mov	r8, r1
 8001aec:	e78a      	b.n	8001a04 <_vfiprintf_r+0xc0>
 8001aee:	2300      	movs	r3, #0
 8001af0:	f108 0801 	add.w	r8, r8, #1
 8001af4:	9305      	str	r3, [sp, #20]
 8001af6:	4619      	mov	r1, r3
 8001af8:	250a      	movs	r5, #10
 8001afa:	4640      	mov	r0, r8
 8001afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b00:	3a30      	subs	r2, #48	; 0x30
 8001b02:	2a09      	cmp	r2, #9
 8001b04:	d903      	bls.n	8001b0e <_vfiprintf_r+0x1ca>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0c3      	beq.n	8001a92 <_vfiprintf_r+0x14e>
 8001b0a:	9105      	str	r1, [sp, #20]
 8001b0c:	e7c1      	b.n	8001a92 <_vfiprintf_r+0x14e>
 8001b0e:	fb05 2101 	mla	r1, r5, r1, r2
 8001b12:	2301      	movs	r3, #1
 8001b14:	4680      	mov	r8, r0
 8001b16:	e7f0      	b.n	8001afa <_vfiprintf_r+0x1b6>
 8001b18:	ab03      	add	r3, sp, #12
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_vfiprintf_r+0x228>)
 8001b20:	a904      	add	r1, sp, #16
 8001b22:	4630      	mov	r0, r6
 8001b24:	f3af 8000 	nop.w
 8001b28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b2c:	4681      	mov	r9, r0
 8001b2e:	d1d5      	bne.n	8001adc <_vfiprintf_r+0x198>
 8001b30:	89a3      	ldrh	r3, [r4, #12]
 8001b32:	065b      	lsls	r3, r3, #25
 8001b34:	f53f af7e 	bmi.w	8001a34 <_vfiprintf_r+0xf0>
 8001b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b3a:	e77d      	b.n	8001a38 <_vfiprintf_r+0xf4>
 8001b3c:	ab03      	add	r3, sp, #12
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4622      	mov	r2, r4
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <_vfiprintf_r+0x228>)
 8001b44:	a904      	add	r1, sp, #16
 8001b46:	4630      	mov	r0, r6
 8001b48:	f000 f888 	bl	8001c5c <_printf_i>
 8001b4c:	e7ec      	b.n	8001b28 <_vfiprintf_r+0x1e4>
 8001b4e:	bf00      	nop
 8001b50:	080025f8 	.word	0x080025f8
 8001b54:	08002638 	.word	0x08002638
 8001b58:	08002618 	.word	0x08002618
 8001b5c:	080025d8 	.word	0x080025d8
 8001b60:	0800263e 	.word	0x0800263e
 8001b64:	08002642 	.word	0x08002642
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	0800191f 	.word	0x0800191f

08001b70 <_printf_common>:
 8001b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b74:	4691      	mov	r9, r2
 8001b76:	461f      	mov	r7, r3
 8001b78:	688a      	ldr	r2, [r1, #8]
 8001b7a:	690b      	ldr	r3, [r1, #16]
 8001b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	bfb8      	it	lt
 8001b84:	4613      	movlt	r3, r2
 8001b86:	f8c9 3000 	str.w	r3, [r9]
 8001b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b8e:	4606      	mov	r6, r0
 8001b90:	460c      	mov	r4, r1
 8001b92:	b112      	cbz	r2, 8001b9a <_printf_common+0x2a>
 8001b94:	3301      	adds	r3, #1
 8001b96:	f8c9 3000 	str.w	r3, [r9]
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	0699      	lsls	r1, r3, #26
 8001b9e:	bf42      	ittt	mi
 8001ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ba4:	3302      	addmi	r3, #2
 8001ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8001baa:	6825      	ldr	r5, [r4, #0]
 8001bac:	f015 0506 	ands.w	r5, r5, #6
 8001bb0:	d107      	bne.n	8001bc2 <_printf_common+0x52>
 8001bb2:	f104 0a19 	add.w	sl, r4, #25
 8001bb6:	68e3      	ldr	r3, [r4, #12]
 8001bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	dc28      	bgt.n	8001c14 <_printf_common+0xa4>
 8001bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	3300      	adds	r3, #0
 8001bca:	bf18      	it	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	0692      	lsls	r2, r2, #26
 8001bd0:	d42d      	bmi.n	8001c2e <_printf_common+0xbe>
 8001bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bd6:	4639      	mov	r1, r7
 8001bd8:	4630      	mov	r0, r6
 8001bda:	47c0      	blx	r8
 8001bdc:	3001      	adds	r0, #1
 8001bde:	d020      	beq.n	8001c22 <_printf_common+0xb2>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	68e5      	ldr	r5, [r4, #12]
 8001be4:	f8d9 2000 	ldr.w	r2, [r9]
 8001be8:	f003 0306 	and.w	r3, r3, #6
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	bf08      	it	eq
 8001bf0:	1aad      	subeq	r5, r5, r2
 8001bf2:	68a3      	ldr	r3, [r4, #8]
 8001bf4:	6922      	ldr	r2, [r4, #16]
 8001bf6:	bf0c      	ite	eq
 8001bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bfc:	2500      	movne	r5, #0
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	bfc4      	itt	gt
 8001c02:	1a9b      	subgt	r3, r3, r2
 8001c04:	18ed      	addgt	r5, r5, r3
 8001c06:	f04f 0900 	mov.w	r9, #0
 8001c0a:	341a      	adds	r4, #26
 8001c0c:	454d      	cmp	r5, r9
 8001c0e:	d11a      	bne.n	8001c46 <_printf_common+0xd6>
 8001c10:	2000      	movs	r0, #0
 8001c12:	e008      	b.n	8001c26 <_printf_common+0xb6>
 8001c14:	2301      	movs	r3, #1
 8001c16:	4652      	mov	r2, sl
 8001c18:	4639      	mov	r1, r7
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	47c0      	blx	r8
 8001c1e:	3001      	adds	r0, #1
 8001c20:	d103      	bne.n	8001c2a <_printf_common+0xba>
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295
 8001c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c2a:	3501      	adds	r5, #1
 8001c2c:	e7c3      	b.n	8001bb6 <_printf_common+0x46>
 8001c2e:	18e1      	adds	r1, r4, r3
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	2030      	movs	r0, #48	; 0x30
 8001c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c38:	4422      	add	r2, r4
 8001c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c42:	3302      	adds	r3, #2
 8001c44:	e7c5      	b.n	8001bd2 <_printf_common+0x62>
 8001c46:	2301      	movs	r3, #1
 8001c48:	4622      	mov	r2, r4
 8001c4a:	4639      	mov	r1, r7
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	47c0      	blx	r8
 8001c50:	3001      	adds	r0, #1
 8001c52:	d0e6      	beq.n	8001c22 <_printf_common+0xb2>
 8001c54:	f109 0901 	add.w	r9, r9, #1
 8001c58:	e7d8      	b.n	8001c0c <_printf_common+0x9c>
	...

08001c5c <_printf_i>:
 8001c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c64:	460c      	mov	r4, r1
 8001c66:	7e09      	ldrb	r1, [r1, #24]
 8001c68:	b085      	sub	sp, #20
 8001c6a:	296e      	cmp	r1, #110	; 0x6e
 8001c6c:	4617      	mov	r7, r2
 8001c6e:	4606      	mov	r6, r0
 8001c70:	4698      	mov	r8, r3
 8001c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c74:	f000 80b3 	beq.w	8001dde <_printf_i+0x182>
 8001c78:	d822      	bhi.n	8001cc0 <_printf_i+0x64>
 8001c7a:	2963      	cmp	r1, #99	; 0x63
 8001c7c:	d036      	beq.n	8001cec <_printf_i+0x90>
 8001c7e:	d80a      	bhi.n	8001c96 <_printf_i+0x3a>
 8001c80:	2900      	cmp	r1, #0
 8001c82:	f000 80b9 	beq.w	8001df8 <_printf_i+0x19c>
 8001c86:	2958      	cmp	r1, #88	; 0x58
 8001c88:	f000 8083 	beq.w	8001d92 <_printf_i+0x136>
 8001c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c94:	e032      	b.n	8001cfc <_printf_i+0xa0>
 8001c96:	2964      	cmp	r1, #100	; 0x64
 8001c98:	d001      	beq.n	8001c9e <_printf_i+0x42>
 8001c9a:	2969      	cmp	r1, #105	; 0x69
 8001c9c:	d1f6      	bne.n	8001c8c <_printf_i+0x30>
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	0605      	lsls	r5, r0, #24
 8001ca4:	f103 0104 	add.w	r1, r3, #4
 8001ca8:	d52a      	bpl.n	8001d00 <_printf_i+0xa4>
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da03      	bge.n	8001cba <_printf_i+0x5e>
 8001cb2:	222d      	movs	r2, #45	; 0x2d
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001cba:	486f      	ldr	r0, [pc, #444]	; (8001e78 <_printf_i+0x21c>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	e039      	b.n	8001d34 <_printf_i+0xd8>
 8001cc0:	2973      	cmp	r1, #115	; 0x73
 8001cc2:	f000 809d 	beq.w	8001e00 <_printf_i+0x1a4>
 8001cc6:	d808      	bhi.n	8001cda <_printf_i+0x7e>
 8001cc8:	296f      	cmp	r1, #111	; 0x6f
 8001cca:	d020      	beq.n	8001d0e <_printf_i+0xb2>
 8001ccc:	2970      	cmp	r1, #112	; 0x70
 8001cce:	d1dd      	bne.n	8001c8c <_printf_i+0x30>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	6023      	str	r3, [r4, #0]
 8001cd8:	e003      	b.n	8001ce2 <_printf_i+0x86>
 8001cda:	2975      	cmp	r1, #117	; 0x75
 8001cdc:	d017      	beq.n	8001d0e <_printf_i+0xb2>
 8001cde:	2978      	cmp	r1, #120	; 0x78
 8001ce0:	d1d4      	bne.n	8001c8c <_printf_i+0x30>
 8001ce2:	2378      	movs	r3, #120	; 0x78
 8001ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ce8:	4864      	ldr	r0, [pc, #400]	; (8001e7c <_printf_i+0x220>)
 8001cea:	e055      	b.n	8001d98 <_printf_i+0x13c>
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	1d19      	adds	r1, r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6011      	str	r1, [r2, #0]
 8001cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e08c      	b.n	8001e1a <_printf_i+0x1be>
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6011      	str	r1, [r2, #0]
 8001d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d08:	bf18      	it	ne
 8001d0a:	b21b      	sxthne	r3, r3
 8001d0c:	e7cf      	b.n	8001cae <_printf_i+0x52>
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	6825      	ldr	r5, [r4, #0]
 8001d12:	1d18      	adds	r0, r3, #4
 8001d14:	6010      	str	r0, [r2, #0]
 8001d16:	0628      	lsls	r0, r5, #24
 8001d18:	d501      	bpl.n	8001d1e <_printf_i+0xc2>
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	e002      	b.n	8001d24 <_printf_i+0xc8>
 8001d1e:	0668      	lsls	r0, r5, #25
 8001d20:	d5fb      	bpl.n	8001d1a <_printf_i+0xbe>
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	4854      	ldr	r0, [pc, #336]	; (8001e78 <_printf_i+0x21c>)
 8001d26:	296f      	cmp	r1, #111	; 0x6f
 8001d28:	bf14      	ite	ne
 8001d2a:	220a      	movne	r2, #10
 8001d2c:	2208      	moveq	r2, #8
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d34:	6865      	ldr	r5, [r4, #4]
 8001d36:	60a5      	str	r5, [r4, #8]
 8001d38:	2d00      	cmp	r5, #0
 8001d3a:	f2c0 8095 	blt.w	8001e68 <_printf_i+0x20c>
 8001d3e:	6821      	ldr	r1, [r4, #0]
 8001d40:	f021 0104 	bic.w	r1, r1, #4
 8001d44:	6021      	str	r1, [r4, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d13d      	bne.n	8001dc6 <_printf_i+0x16a>
 8001d4a:	2d00      	cmp	r5, #0
 8001d4c:	f040 808e 	bne.w	8001e6c <_printf_i+0x210>
 8001d50:	4665      	mov	r5, ip
 8001d52:	2a08      	cmp	r2, #8
 8001d54:	d10b      	bne.n	8001d6e <_printf_i+0x112>
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	07db      	lsls	r3, r3, #31
 8001d5a:	d508      	bpl.n	8001d6e <_printf_i+0x112>
 8001d5c:	6923      	ldr	r3, [r4, #16]
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	bfde      	ittt	le
 8001d64:	2330      	movle	r3, #48	; 0x30
 8001d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d6e:	ebac 0305 	sub.w	r3, ip, r5
 8001d72:	6123      	str	r3, [r4, #16]
 8001d74:	f8cd 8000 	str.w	r8, [sp]
 8001d78:	463b      	mov	r3, r7
 8001d7a:	aa03      	add	r2, sp, #12
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f7ff fef6 	bl	8001b70 <_printf_common>
 8001d84:	3001      	adds	r0, #1
 8001d86:	d14d      	bne.n	8001e24 <_printf_i+0x1c8>
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	b005      	add	sp, #20
 8001d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d92:	4839      	ldr	r0, [pc, #228]	; (8001e78 <_printf_i+0x21c>)
 8001d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	6821      	ldr	r1, [r4, #0]
 8001d9c:	1d1d      	adds	r5, r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6015      	str	r5, [r2, #0]
 8001da2:	060a      	lsls	r2, r1, #24
 8001da4:	d50b      	bpl.n	8001dbe <_printf_i+0x162>
 8001da6:	07ca      	lsls	r2, r1, #31
 8001da8:	bf44      	itt	mi
 8001daa:	f041 0120 	orrmi.w	r1, r1, #32
 8001dae:	6021      	strmi	r1, [r4, #0]
 8001db0:	b91b      	cbnz	r3, 8001dba <_printf_i+0x15e>
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	f022 0220 	bic.w	r2, r2, #32
 8001db8:	6022      	str	r2, [r4, #0]
 8001dba:	2210      	movs	r2, #16
 8001dbc:	e7b7      	b.n	8001d2e <_printf_i+0xd2>
 8001dbe:	064d      	lsls	r5, r1, #25
 8001dc0:	bf48      	it	mi
 8001dc2:	b29b      	uxthmi	r3, r3
 8001dc4:	e7ef      	b.n	8001da6 <_printf_i+0x14a>
 8001dc6:	4665      	mov	r5, ip
 8001dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8001dd0:	5cc3      	ldrb	r3, [r0, r3]
 8001dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	2900      	cmp	r1, #0
 8001dda:	d1f5      	bne.n	8001dc8 <_printf_i+0x16c>
 8001ddc:	e7b9      	b.n	8001d52 <_printf_i+0xf6>
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	6825      	ldr	r5, [r4, #0]
 8001de2:	6961      	ldr	r1, [r4, #20]
 8001de4:	1d18      	adds	r0, r3, #4
 8001de6:	6010      	str	r0, [r2, #0]
 8001de8:	0628      	lsls	r0, r5, #24
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	d501      	bpl.n	8001df2 <_printf_i+0x196>
 8001dee:	6019      	str	r1, [r3, #0]
 8001df0:	e002      	b.n	8001df8 <_printf_i+0x19c>
 8001df2:	066a      	lsls	r2, r5, #25
 8001df4:	d5fb      	bpl.n	8001dee <_printf_i+0x192>
 8001df6:	8019      	strh	r1, [r3, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6123      	str	r3, [r4, #16]
 8001dfc:	4665      	mov	r5, ip
 8001dfe:	e7b9      	b.n	8001d74 <_printf_i+0x118>
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	1d19      	adds	r1, r3, #4
 8001e04:	6011      	str	r1, [r2, #0]
 8001e06:	681d      	ldr	r5, [r3, #0]
 8001e08:	6862      	ldr	r2, [r4, #4]
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7fe f9ff 	bl	8000210 <memchr>
 8001e12:	b108      	cbz	r0, 8001e18 <_printf_i+0x1bc>
 8001e14:	1b40      	subs	r0, r0, r5
 8001e16:	6060      	str	r0, [r4, #4]
 8001e18:	6863      	ldr	r3, [r4, #4]
 8001e1a:	6123      	str	r3, [r4, #16]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e22:	e7a7      	b.n	8001d74 <_printf_i+0x118>
 8001e24:	6923      	ldr	r3, [r4, #16]
 8001e26:	462a      	mov	r2, r5
 8001e28:	4639      	mov	r1, r7
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	47c0      	blx	r8
 8001e2e:	3001      	adds	r0, #1
 8001e30:	d0aa      	beq.n	8001d88 <_printf_i+0x12c>
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	079b      	lsls	r3, r3, #30
 8001e36:	d413      	bmi.n	8001e60 <_printf_i+0x204>
 8001e38:	68e0      	ldr	r0, [r4, #12]
 8001e3a:	9b03      	ldr	r3, [sp, #12]
 8001e3c:	4298      	cmp	r0, r3
 8001e3e:	bfb8      	it	lt
 8001e40:	4618      	movlt	r0, r3
 8001e42:	e7a3      	b.n	8001d8c <_printf_i+0x130>
 8001e44:	2301      	movs	r3, #1
 8001e46:	464a      	mov	r2, r9
 8001e48:	4639      	mov	r1, r7
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	47c0      	blx	r8
 8001e4e:	3001      	adds	r0, #1
 8001e50:	d09a      	beq.n	8001d88 <_printf_i+0x12c>
 8001e52:	3501      	adds	r5, #1
 8001e54:	68e3      	ldr	r3, [r4, #12]
 8001e56:	9a03      	ldr	r2, [sp, #12]
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	42ab      	cmp	r3, r5
 8001e5c:	dcf2      	bgt.n	8001e44 <_printf_i+0x1e8>
 8001e5e:	e7eb      	b.n	8001e38 <_printf_i+0x1dc>
 8001e60:	2500      	movs	r5, #0
 8001e62:	f104 0919 	add.w	r9, r4, #25
 8001e66:	e7f5      	b.n	8001e54 <_printf_i+0x1f8>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ac      	bne.n	8001dc6 <_printf_i+0x16a>
 8001e6c:	7803      	ldrb	r3, [r0, #0]
 8001e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e76:	e76c      	b.n	8001d52 <_printf_i+0xf6>
 8001e78:	08002649 	.word	0x08002649
 8001e7c:	0800265a 	.word	0x0800265a

08001e80 <_sbrk_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4c06      	ldr	r4, [pc, #24]	; (8001e9c <_sbrk_r+0x1c>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	4605      	mov	r5, r0
 8001e88:	4608      	mov	r0, r1
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	f7fe fb0a 	bl	80004a4 <_sbrk>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d102      	bne.n	8001e9a <_sbrk_r+0x1a>
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	b103      	cbz	r3, 8001e9a <_sbrk_r+0x1a>
 8001e98:	602b      	str	r3, [r5, #0]
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	20000160 	.word	0x20000160

08001ea0 <__sread>:
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	f000 f896 	bl	8001fd8 <_read_r>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	bfab      	itete	ge
 8001eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8001eb4:	181b      	addge	r3, r3, r0
 8001eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001eba:	bfac      	ite	ge
 8001ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ebe:	81a3      	strhlt	r3, [r4, #12]
 8001ec0:	bd10      	pop	{r4, pc}

08001ec2 <__swrite>:
 8001ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec6:	461f      	mov	r7, r3
 8001ec8:	898b      	ldrh	r3, [r1, #12]
 8001eca:	05db      	lsls	r3, r3, #23
 8001ecc:	4605      	mov	r5, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	4616      	mov	r6, r2
 8001ed2:	d505      	bpl.n	8001ee0 <__swrite+0x1e>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001edc:	f000 f868 	bl	8001fb0 <_lseek_r>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	4632      	mov	r2, r6
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef6:	f000 b817 	b.w	8001f28 <_write_r>

08001efa <__sseek>:
 8001efa:	b510      	push	{r4, lr}
 8001efc:	460c      	mov	r4, r1
 8001efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f02:	f000 f855 	bl	8001fb0 <_lseek_r>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	89a3      	ldrh	r3, [r4, #12]
 8001f0a:	bf15      	itete	ne
 8001f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f16:	81a3      	strheq	r3, [r4, #12]
 8001f18:	bf18      	it	ne
 8001f1a:	81a3      	strhne	r3, [r4, #12]
 8001f1c:	bd10      	pop	{r4, pc}

08001f1e <__sclose>:
 8001f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f22:	f000 b813 	b.w	8001f4c <_close_r>
	...

08001f28 <_write_r>:
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	4c07      	ldr	r4, [pc, #28]	; (8001f48 <_write_r+0x20>)
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	4608      	mov	r0, r1
 8001f30:	4611      	mov	r1, r2
 8001f32:	2200      	movs	r2, #0
 8001f34:	6022      	str	r2, [r4, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f000 f911 	bl	800215e <_write>
 8001f3c:	1c43      	adds	r3, r0, #1
 8001f3e:	d102      	bne.n	8001f46 <_write_r+0x1e>
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	b103      	cbz	r3, 8001f46 <_write_r+0x1e>
 8001f44:	602b      	str	r3, [r5, #0]
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
 8001f48:	20000160 	.word	0x20000160

08001f4c <_close_r>:
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	4c06      	ldr	r4, [pc, #24]	; (8001f68 <_close_r+0x1c>)
 8001f50:	2300      	movs	r3, #0
 8001f52:	4605      	mov	r5, r0
 8001f54:	4608      	mov	r0, r1
 8001f56:	6023      	str	r3, [r4, #0]
 8001f58:	f000 f930 	bl	80021bc <_close>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	d102      	bne.n	8001f66 <_close_r+0x1a>
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	b103      	cbz	r3, 8001f66 <_close_r+0x1a>
 8001f64:	602b      	str	r3, [r5, #0]
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
 8001f68:	20000160 	.word	0x20000160

08001f6c <_fstat_r>:
 8001f6c:	b538      	push	{r3, r4, r5, lr}
 8001f6e:	4c07      	ldr	r4, [pc, #28]	; (8001f8c <_fstat_r+0x20>)
 8001f70:	2300      	movs	r3, #0
 8001f72:	4605      	mov	r5, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	f000 f966 	bl	800224a <_fstat>
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	d102      	bne.n	8001f88 <_fstat_r+0x1c>
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	b103      	cbz	r3, 8001f88 <_fstat_r+0x1c>
 8001f86:	602b      	str	r3, [r5, #0]
 8001f88:	bd38      	pop	{r3, r4, r5, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000160 	.word	0x20000160

08001f90 <_isatty_r>:
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	4c06      	ldr	r4, [pc, #24]	; (8001fac <_isatty_r+0x1c>)
 8001f94:	2300      	movs	r3, #0
 8001f96:	4605      	mov	r5, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	6023      	str	r3, [r4, #0]
 8001f9c:	f000 faba 	bl	8002514 <_isatty>
 8001fa0:	1c43      	adds	r3, r0, #1
 8001fa2:	d102      	bne.n	8001faa <_isatty_r+0x1a>
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	b103      	cbz	r3, 8001faa <_isatty_r+0x1a>
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	20000160 	.word	0x20000160

08001fb0 <_lseek_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4c07      	ldr	r4, [pc, #28]	; (8001fd0 <_lseek_r+0x20>)
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	4608      	mov	r0, r1
 8001fb8:	4611      	mov	r1, r2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	6022      	str	r2, [r4, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f000 f8bb 	bl	800213a <_lseek>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d102      	bne.n	8001fce <_lseek_r+0x1e>
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	b103      	cbz	r3, 8001fce <_lseek_r+0x1e>
 8001fcc:	602b      	str	r3, [r5, #0]
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
 8001fd0:	20000160 	.word	0x20000160

08001fd4 <__malloc_lock>:
 8001fd4:	4770      	bx	lr

08001fd6 <__malloc_unlock>:
 8001fd6:	4770      	bx	lr

08001fd8 <_read_r>:
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4c07      	ldr	r4, [pc, #28]	; (8001ff8 <_read_r+0x20>)
 8001fdc:	4605      	mov	r5, r0
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6022      	str	r2, [r4, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 f850 	bl	800208c <_read>
 8001fec:	1c43      	adds	r3, r0, #1
 8001fee:	d102      	bne.n	8001ff6 <_read_r+0x1e>
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	b103      	cbz	r3, 8001ff6 <_read_r+0x1e>
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	20000160 	.word	0x20000160

08001ffc <findslot>:
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <findslot+0x2c>)
 8001ffe:	b510      	push	{r4, lr}
 8002000:	4604      	mov	r4, r0
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	b118      	cbz	r0, 800200e <findslot+0x12>
 8002006:	6983      	ldr	r3, [r0, #24]
 8002008:	b90b      	cbnz	r3, 800200e <findslot+0x12>
 800200a:	f7ff fadb 	bl	80015c4 <__sinit>
 800200e:	2c13      	cmp	r4, #19
 8002010:	d807      	bhi.n	8002022 <findslot+0x26>
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <findslot+0x30>)
 8002014:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002018:	3301      	adds	r3, #1
 800201a:	d002      	beq.n	8002022 <findslot+0x26>
 800201c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002020:	bd10      	pop	{r4, pc}
 8002022:	2000      	movs	r0, #0
 8002024:	e7fc      	b.n	8002020 <findslot+0x24>
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000
 800202c:	200000a0 	.word	0x200000a0

08002030 <checkerror>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	1c43      	adds	r3, r0, #1
 8002034:	4605      	mov	r5, r0
 8002036:	d109      	bne.n	800204c <checkerror+0x1c>
 8002038:	f7ff f866 	bl	8001108 <__errno>
 800203c:	2413      	movs	r4, #19
 800203e:	4606      	mov	r6, r0
 8002040:	2700      	movs	r7, #0
 8002042:	4620      	mov	r0, r4
 8002044:	4639      	mov	r1, r7
 8002046:	beab      	bkpt	0x00ab
 8002048:	4604      	mov	r4, r0
 800204a:	6034      	str	r4, [r6, #0]
 800204c:	4628      	mov	r0, r5
 800204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002050 <error>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	4605      	mov	r5, r0
 8002054:	f7ff f858 	bl	8001108 <__errno>
 8002058:	2413      	movs	r4, #19
 800205a:	4606      	mov	r6, r0
 800205c:	2700      	movs	r7, #0
 800205e:	4620      	mov	r0, r4
 8002060:	4639      	mov	r1, r7
 8002062:	beab      	bkpt	0x00ab
 8002064:	4604      	mov	r4, r0
 8002066:	6034      	str	r4, [r6, #0]
 8002068:	4628      	mov	r0, r5
 800206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800206c <_swiread>:
 800206c:	b530      	push	{r4, r5, lr}
 800206e:	b085      	sub	sp, #20
 8002070:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002074:	9203      	str	r2, [sp, #12]
 8002076:	2406      	movs	r4, #6
 8002078:	ad01      	add	r5, sp, #4
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	beab      	bkpt	0x00ab
 8002080:	4604      	mov	r4, r0
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ffd4 	bl	8002030 <checkerror>
 8002088:	b005      	add	sp, #20
 800208a:	bd30      	pop	{r4, r5, pc}

0800208c <_read>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	460e      	mov	r6, r1
 8002090:	4615      	mov	r5, r2
 8002092:	f7ff ffb3 	bl	8001ffc <findslot>
 8002096:	4604      	mov	r4, r0
 8002098:	b930      	cbnz	r0, 80020a8 <_read+0x1c>
 800209a:	f7ff f835 	bl	8001108 <__errno>
 800209e:	2309      	movs	r3, #9
 80020a0:	6003      	str	r3, [r0, #0]
 80020a2:	f04f 30ff 	mov.w	r0, #4294967295
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	462a      	mov	r2, r5
 80020aa:	4631      	mov	r1, r6
 80020ac:	6800      	ldr	r0, [r0, #0]
 80020ae:	f7ff ffdd 	bl	800206c <_swiread>
 80020b2:	1c43      	adds	r3, r0, #1
 80020b4:	bf1f      	itttt	ne
 80020b6:	6863      	ldrne	r3, [r4, #4]
 80020b8:	1a28      	subne	r0, r5, r0
 80020ba:	181b      	addne	r3, r3, r0
 80020bc:	6063      	strne	r3, [r4, #4]
 80020be:	e7f2      	b.n	80020a6 <_read+0x1a>

080020c0 <_swilseek>:
 80020c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020c2:	460c      	mov	r4, r1
 80020c4:	4616      	mov	r6, r2
 80020c6:	f7ff ff99 	bl	8001ffc <findslot>
 80020ca:	4605      	mov	r5, r0
 80020cc:	b940      	cbnz	r0, 80020e0 <_swilseek+0x20>
 80020ce:	f7ff f81b 	bl	8001108 <__errno>
 80020d2:	2309      	movs	r3, #9
 80020d4:	6003      	str	r3, [r0, #0]
 80020d6:	f04f 34ff 	mov.w	r4, #4294967295
 80020da:	4620      	mov	r0, r4
 80020dc:	b003      	add	sp, #12
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	2e02      	cmp	r6, #2
 80020e2:	d903      	bls.n	80020ec <_swilseek+0x2c>
 80020e4:	f7ff f810 	bl	8001108 <__errno>
 80020e8:	2316      	movs	r3, #22
 80020ea:	e7f3      	b.n	80020d4 <_swilseek+0x14>
 80020ec:	2e01      	cmp	r6, #1
 80020ee:	d112      	bne.n	8002116 <_swilseek+0x56>
 80020f0:	6843      	ldr	r3, [r0, #4]
 80020f2:	18e4      	adds	r4, r4, r3
 80020f4:	d4f6      	bmi.n	80020e4 <_swilseek+0x24>
 80020f6:	682b      	ldr	r3, [r5, #0]
 80020f8:	260a      	movs	r6, #10
 80020fa:	e9cd 3400 	strd	r3, r4, [sp]
 80020fe:	466f      	mov	r7, sp
 8002100:	4630      	mov	r0, r6
 8002102:	4639      	mov	r1, r7
 8002104:	beab      	bkpt	0x00ab
 8002106:	4606      	mov	r6, r0
 8002108:	4630      	mov	r0, r6
 800210a:	f7ff ff91 	bl	8002030 <checkerror>
 800210e:	2800      	cmp	r0, #0
 8002110:	dbe1      	blt.n	80020d6 <_swilseek+0x16>
 8002112:	606c      	str	r4, [r5, #4]
 8002114:	e7e1      	b.n	80020da <_swilseek+0x1a>
 8002116:	2e02      	cmp	r6, #2
 8002118:	d1ed      	bne.n	80020f6 <_swilseek+0x36>
 800211a:	af02      	add	r7, sp, #8
 800211c:	6803      	ldr	r3, [r0, #0]
 800211e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8002122:	260c      	movs	r6, #12
 8002124:	4630      	mov	r0, r6
 8002126:	4639      	mov	r1, r7
 8002128:	beab      	bkpt	0x00ab
 800212a:	4606      	mov	r6, r0
 800212c:	4630      	mov	r0, r6
 800212e:	f7ff ff7f 	bl	8002030 <checkerror>
 8002132:	1c43      	adds	r3, r0, #1
 8002134:	d0cf      	beq.n	80020d6 <_swilseek+0x16>
 8002136:	4404      	add	r4, r0
 8002138:	e7dd      	b.n	80020f6 <_swilseek+0x36>

0800213a <_lseek>:
 800213a:	f7ff bfc1 	b.w	80020c0 <_swilseek>

0800213e <_swiwrite>:
 800213e:	b530      	push	{r4, r5, lr}
 8002140:	b085      	sub	sp, #20
 8002142:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002146:	9203      	str	r2, [sp, #12]
 8002148:	2405      	movs	r4, #5
 800214a:	ad01      	add	r5, sp, #4
 800214c:	4620      	mov	r0, r4
 800214e:	4629      	mov	r1, r5
 8002150:	beab      	bkpt	0x00ab
 8002152:	4604      	mov	r4, r0
 8002154:	4620      	mov	r0, r4
 8002156:	f7ff ff6b 	bl	8002030 <checkerror>
 800215a:	b005      	add	sp, #20
 800215c:	bd30      	pop	{r4, r5, pc}

0800215e <_write>:
 800215e:	b570      	push	{r4, r5, r6, lr}
 8002160:	460e      	mov	r6, r1
 8002162:	4615      	mov	r5, r2
 8002164:	f7ff ff4a 	bl	8001ffc <findslot>
 8002168:	4604      	mov	r4, r0
 800216a:	b930      	cbnz	r0, 800217a <_write+0x1c>
 800216c:	f7fe ffcc 	bl	8001108 <__errno>
 8002170:	2309      	movs	r3, #9
 8002172:	6003      	str	r3, [r0, #0]
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	bd70      	pop	{r4, r5, r6, pc}
 800217a:	462a      	mov	r2, r5
 800217c:	4631      	mov	r1, r6
 800217e:	6800      	ldr	r0, [r0, #0]
 8002180:	f7ff ffdd 	bl	800213e <_swiwrite>
 8002184:	1e02      	subs	r2, r0, #0
 8002186:	dbf5      	blt.n	8002174 <_write+0x16>
 8002188:	6863      	ldr	r3, [r4, #4]
 800218a:	1aa8      	subs	r0, r5, r2
 800218c:	4403      	add	r3, r0
 800218e:	42aa      	cmp	r2, r5
 8002190:	6063      	str	r3, [r4, #4]
 8002192:	d1f1      	bne.n	8002178 <_write+0x1a>
 8002194:	2000      	movs	r0, #0
 8002196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800219a:	f7ff bf59 	b.w	8002050 <error>

0800219e <_swiclose>:
 800219e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021a0:	ad02      	add	r5, sp, #8
 80021a2:	2402      	movs	r4, #2
 80021a4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	beab      	bkpt	0x00ab
 80021ae:	4604      	mov	r4, r0
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff ff3d 	bl	8002030 <checkerror>
 80021b6:	b003      	add	sp, #12
 80021b8:	bd30      	pop	{r4, r5, pc}
	...

080021bc <_close>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4605      	mov	r5, r0
 80021c0:	f7ff ff1c 	bl	8001ffc <findslot>
 80021c4:	4604      	mov	r4, r0
 80021c6:	b930      	cbnz	r0, 80021d6 <_close+0x1a>
 80021c8:	f7fe ff9e 	bl	8001108 <__errno>
 80021cc:	2309      	movs	r3, #9
 80021ce:	6003      	str	r3, [r0, #0]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	bd38      	pop	{r3, r4, r5, pc}
 80021d6:	3d01      	subs	r5, #1
 80021d8:	2d01      	cmp	r5, #1
 80021da:	d809      	bhi.n	80021f0 <_close+0x34>
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <_close+0x48>)
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d104      	bne.n	80021f0 <_close+0x34>
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	2000      	movs	r0, #0
 80021ee:	e7f1      	b.n	80021d4 <_close+0x18>
 80021f0:	6820      	ldr	r0, [r4, #0]
 80021f2:	f7ff ffd4 	bl	800219e <_swiclose>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d1ec      	bne.n	80021d4 <_close+0x18>
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	6023      	str	r3, [r4, #0]
 8002200:	e7e8      	b.n	80021d4 <_close+0x18>
 8002202:	bf00      	nop
 8002204:	200000a0 	.word	0x200000a0

08002208 <_swistat>:
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	460c      	mov	r4, r1
 800220c:	f7ff fef6 	bl	8001ffc <findslot>
 8002210:	4606      	mov	r6, r0
 8002212:	b930      	cbnz	r0, 8002222 <_swistat+0x1a>
 8002214:	f7fe ff78 	bl	8001108 <__errno>
 8002218:	2309      	movs	r3, #9
 800221a:	6003      	str	r3, [r0, #0]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002228:	6063      	str	r3, [r4, #4]
 800222a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222e:	6463      	str	r3, [r4, #68]	; 0x44
 8002230:	250c      	movs	r5, #12
 8002232:	4628      	mov	r0, r5
 8002234:	4631      	mov	r1, r6
 8002236:	beab      	bkpt	0x00ab
 8002238:	4605      	mov	r5, r0
 800223a:	4628      	mov	r0, r5
 800223c:	f7ff fef8 	bl	8002030 <checkerror>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	bf1c      	itt	ne
 8002244:	6120      	strne	r0, [r4, #16]
 8002246:	2000      	movne	r0, #0
 8002248:	e7ea      	b.n	8002220 <_swistat+0x18>

0800224a <_fstat>:
 800224a:	460b      	mov	r3, r1
 800224c:	b510      	push	{r4, lr}
 800224e:	2100      	movs	r1, #0
 8002250:	4604      	mov	r4, r0
 8002252:	2258      	movs	r2, #88	; 0x58
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe ff81 	bl	800115c <memset>
 800225a:	4601      	mov	r1, r0
 800225c:	4620      	mov	r0, r4
 800225e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002262:	f7ff bfd1 	b.w	8002208 <_swistat>

08002266 <_stat>:
 8002266:	b538      	push	{r3, r4, r5, lr}
 8002268:	460d      	mov	r5, r1
 800226a:	4604      	mov	r4, r0
 800226c:	2258      	movs	r2, #88	; 0x58
 800226e:	2100      	movs	r1, #0
 8002270:	4628      	mov	r0, r5
 8002272:	f7fe ff73 	bl	800115c <memset>
 8002276:	4620      	mov	r0, r4
 8002278:	2100      	movs	r1, #0
 800227a:	f000 f811 	bl	80022a0 <_swiopen>
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	4604      	mov	r4, r0
 8002282:	d00b      	beq.n	800229c <_stat+0x36>
 8002284:	686b      	ldr	r3, [r5, #4]
 8002286:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800228a:	606b      	str	r3, [r5, #4]
 800228c:	4629      	mov	r1, r5
 800228e:	f7ff ffbb 	bl	8002208 <_swistat>
 8002292:	4605      	mov	r5, r0
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff ff91 	bl	80021bc <_close>
 800229a:	462c      	mov	r4, r5
 800229c:	4620      	mov	r0, r4
 800229e:	bd38      	pop	{r3, r4, r5, pc}

080022a0 <_swiopen>:
 80022a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <_swiopen+0xb4>)
 80022a6:	b096      	sub	sp, #88	; 0x58
 80022a8:	4682      	mov	sl, r0
 80022aa:	460e      	mov	r6, r1
 80022ac:	2500      	movs	r5, #0
 80022ae:	4698      	mov	r8, r3
 80022b0:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80022b4:	1c61      	adds	r1, r4, #1
 80022b6:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80022ba:	d036      	beq.n	800232a <_swiopen+0x8a>
 80022bc:	3501      	adds	r5, #1
 80022be:	2d14      	cmp	r5, #20
 80022c0:	d1f6      	bne.n	80022b0 <_swiopen+0x10>
 80022c2:	f7fe ff21 	bl	8001108 <__errno>
 80022c6:	2318      	movs	r3, #24
 80022c8:	6003      	str	r3, [r0, #0]
 80022ca:	f04f 34ff 	mov.w	r4, #4294967295
 80022ce:	e03c      	b.n	800234a <_swiopen+0xaa>
 80022d0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80022d4:	f240 6301 	movw	r3, #1537	; 0x601
 80022d8:	07b2      	lsls	r2, r6, #30
 80022da:	bf48      	it	mi
 80022dc:	f044 0402 	orrmi.w	r4, r4, #2
 80022e0:	421e      	tst	r6, r3
 80022e2:	bf18      	it	ne
 80022e4:	f044 0404 	orrne.w	r4, r4, #4
 80022e8:	0733      	lsls	r3, r6, #28
 80022ea:	bf48      	it	mi
 80022ec:	f024 0404 	bicmi.w	r4, r4, #4
 80022f0:	4650      	mov	r0, sl
 80022f2:	bf48      	it	mi
 80022f4:	f044 0408 	orrmi.w	r4, r4, #8
 80022f8:	f8cd a000 	str.w	sl, [sp]
 80022fc:	f7fd ffd8 	bl	80002b0 <strlen>
 8002300:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002304:	2401      	movs	r4, #1
 8002306:	4620      	mov	r0, r4
 8002308:	4649      	mov	r1, r9
 800230a:	beab      	bkpt	0x00ab
 800230c:	4604      	mov	r4, r0
 800230e:	2c00      	cmp	r4, #0
 8002310:	db06      	blt.n	8002320 <_swiopen+0x80>
 8002312:	4447      	add	r7, r8
 8002314:	2300      	movs	r3, #0
 8002316:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	462c      	mov	r4, r5
 800231e:	e014      	b.n	800234a <_swiopen+0xaa>
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff fe95 	bl	8002050 <error>
 8002326:	4604      	mov	r4, r0
 8002328:	e00f      	b.n	800234a <_swiopen+0xaa>
 800232a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800232e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002332:	46e9      	mov	r9, sp
 8002334:	d1cc      	bne.n	80022d0 <_swiopen+0x30>
 8002336:	4649      	mov	r1, r9
 8002338:	4650      	mov	r0, sl
 800233a:	f7ff ff94 	bl	8002266 <_stat>
 800233e:	3001      	adds	r0, #1
 8002340:	d0c6      	beq.n	80022d0 <_swiopen+0x30>
 8002342:	f7fe fee1 	bl	8001108 <__errno>
 8002346:	2311      	movs	r3, #17
 8002348:	6003      	str	r3, [r0, #0]
 800234a:	4620      	mov	r0, r4
 800234c:	b016      	add	sp, #88	; 0x58
 800234e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002352:	bf00      	nop
 8002354:	200000a0 	.word	0x200000a0

08002358 <_get_semihosting_exts>:
 8002358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800235c:	4607      	mov	r7, r0
 800235e:	4688      	mov	r8, r1
 8002360:	4829      	ldr	r0, [pc, #164]	; (8002408 <_get_semihosting_exts+0xb0>)
 8002362:	2100      	movs	r1, #0
 8002364:	4615      	mov	r5, r2
 8002366:	f7ff ff9b 	bl	80022a0 <_swiopen>
 800236a:	462a      	mov	r2, r5
 800236c:	4604      	mov	r4, r0
 800236e:	2100      	movs	r1, #0
 8002370:	4638      	mov	r0, r7
 8002372:	f7fe fef3 	bl	800115c <memset>
 8002376:	1c63      	adds	r3, r4, #1
 8002378:	d015      	beq.n	80023a6 <_get_semihosting_exts+0x4e>
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff fe3e 	bl	8001ffc <findslot>
 8002380:	260c      	movs	r6, #12
 8002382:	4681      	mov	r9, r0
 8002384:	4630      	mov	r0, r6
 8002386:	4649      	mov	r1, r9
 8002388:	beab      	bkpt	0x00ab
 800238a:	4606      	mov	r6, r0
 800238c:	4630      	mov	r0, r6
 800238e:	f7ff fe4f 	bl	8002030 <checkerror>
 8002392:	2803      	cmp	r0, #3
 8002394:	dd02      	ble.n	800239c <_get_semihosting_exts+0x44>
 8002396:	3803      	subs	r0, #3
 8002398:	42a8      	cmp	r0, r5
 800239a:	dc08      	bgt.n	80023ae <_get_semihosting_exts+0x56>
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff ff0d 	bl	80021bc <_close>
 80023a2:	f04f 34ff 	mov.w	r4, #4294967295
 80023a6:	4620      	mov	r0, r4
 80023a8:	b003      	add	sp, #12
 80023aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ae:	2204      	movs	r2, #4
 80023b0:	eb0d 0102 	add.w	r1, sp, r2
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fe69 	bl	800208c <_read>
 80023ba:	2803      	cmp	r0, #3
 80023bc:	ddee      	ble.n	800239c <_get_semihosting_exts+0x44>
 80023be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023c2:	2b53      	cmp	r3, #83	; 0x53
 80023c4:	d1ea      	bne.n	800239c <_get_semihosting_exts+0x44>
 80023c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80023ca:	2b48      	cmp	r3, #72	; 0x48
 80023cc:	d1e6      	bne.n	800239c <_get_semihosting_exts+0x44>
 80023ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80023d2:	2b46      	cmp	r3, #70	; 0x46
 80023d4:	d1e2      	bne.n	800239c <_get_semihosting_exts+0x44>
 80023d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023da:	2b42      	cmp	r3, #66	; 0x42
 80023dc:	d1de      	bne.n	800239c <_get_semihosting_exts+0x44>
 80023de:	2201      	movs	r2, #1
 80023e0:	4641      	mov	r1, r8
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff fe6c 	bl	80020c0 <_swilseek>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	dbd7      	blt.n	800239c <_get_semihosting_exts+0x44>
 80023ec:	462a      	mov	r2, r5
 80023ee:	4639      	mov	r1, r7
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fe4b 	bl	800208c <_read>
 80023f6:	4605      	mov	r5, r0
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff fedf 	bl	80021bc <_close>
 80023fe:	4628      	mov	r0, r5
 8002400:	f7ff fe16 	bl	8002030 <checkerror>
 8002404:	4604      	mov	r4, r0
 8002406:	e7ce      	b.n	80023a6 <_get_semihosting_exts+0x4e>
 8002408:	0800266b 	.word	0x0800266b

0800240c <initialise_semihosting_exts>:
 800240c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800240e:	4d0a      	ldr	r5, [pc, #40]	; (8002438 <initialise_semihosting_exts+0x2c>)
 8002410:	4c0a      	ldr	r4, [pc, #40]	; (800243c <initialise_semihosting_exts+0x30>)
 8002412:	2100      	movs	r1, #0
 8002414:	2201      	movs	r2, #1
 8002416:	a801      	add	r0, sp, #4
 8002418:	6029      	str	r1, [r5, #0]
 800241a:	6022      	str	r2, [r4, #0]
 800241c:	f7ff ff9c 	bl	8002358 <_get_semihosting_exts>
 8002420:	2800      	cmp	r0, #0
 8002422:	dd07      	ble.n	8002434 <initialise_semihosting_exts+0x28>
 8002424:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002428:	f003 0201 	and.w	r2, r3, #1
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	602a      	str	r2, [r5, #0]
 8002432:	6023      	str	r3, [r4, #0]
 8002434:	b003      	add	sp, #12
 8002436:	bd30      	pop	{r4, r5, pc}
 8002438:	20000064 	.word	0x20000064
 800243c:	20000068 	.word	0x20000068

08002440 <_has_ext_stdout_stderr>:
 8002440:	b510      	push	{r4, lr}
 8002442:	4c04      	ldr	r4, [pc, #16]	; (8002454 <_has_ext_stdout_stderr+0x14>)
 8002444:	6822      	ldr	r2, [r4, #0]
 8002446:	2a00      	cmp	r2, #0
 8002448:	da01      	bge.n	800244e <_has_ext_stdout_stderr+0xe>
 800244a:	f7ff ffdf 	bl	800240c <initialise_semihosting_exts>
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	bd10      	pop	{r4, pc}
 8002452:	bf00      	nop
 8002454:	20000068 	.word	0x20000068

08002458 <initialise_monitor_handles>:
 8002458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245c:	b085      	sub	sp, #20
 800245e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002510 <initialise_monitor_handles+0xb8>
 8002462:	f8cd 9004 	str.w	r9, [sp, #4]
 8002466:	2303      	movs	r3, #3
 8002468:	2400      	movs	r4, #0
 800246a:	9303      	str	r3, [sp, #12]
 800246c:	f10d 0804 	add.w	r8, sp, #4
 8002470:	9402      	str	r4, [sp, #8]
 8002472:	2501      	movs	r5, #1
 8002474:	4628      	mov	r0, r5
 8002476:	4641      	mov	r1, r8
 8002478:	beab      	bkpt	0x00ab
 800247a:	4605      	mov	r5, r0
 800247c:	4e20      	ldr	r6, [pc, #128]	; (8002500 <initialise_monitor_handles+0xa8>)
 800247e:	4a21      	ldr	r2, [pc, #132]	; (8002504 <initialise_monitor_handles+0xac>)
 8002480:	6035      	str	r5, [r6, #0]
 8002482:	4623      	mov	r3, r4
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	4614      	mov	r4, r2
 800248a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800248e:	3301      	adds	r3, #1
 8002490:	2b14      	cmp	r3, #20
 8002492:	d1fa      	bne.n	800248a <initialise_monitor_handles+0x32>
 8002494:	f7ff ffd4 	bl	8002440 <_has_ext_stdout_stderr>
 8002498:	4d1b      	ldr	r5, [pc, #108]	; (8002508 <initialise_monitor_handles+0xb0>)
 800249a:	b1d0      	cbz	r0, 80024d2 <initialise_monitor_handles+0x7a>
 800249c:	f04f 0a03 	mov.w	sl, #3
 80024a0:	2304      	movs	r3, #4
 80024a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80024a6:	2701      	movs	r7, #1
 80024a8:	f8cd a00c 	str.w	sl, [sp, #12]
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	4638      	mov	r0, r7
 80024b0:	4641      	mov	r1, r8
 80024b2:	beab      	bkpt	0x00ab
 80024b4:	4683      	mov	fp, r0
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <initialise_monitor_handles+0xb4>)
 80024b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80024bc:	f8c3 b000 	str.w	fp, [r3]
 80024c0:	2308      	movs	r3, #8
 80024c2:	f8cd a00c 	str.w	sl, [sp, #12]
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	4638      	mov	r0, r7
 80024ca:	4641      	mov	r1, r8
 80024cc:	beab      	bkpt	0x00ab
 80024ce:	4607      	mov	r7, r0
 80024d0:	602f      	str	r7, [r5, #0]
 80024d2:	682b      	ldr	r3, [r5, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	bf02      	ittt	eq
 80024d8:	4b0c      	ldreq	r3, [pc, #48]	; (800250c <initialise_monitor_handles+0xb4>)
 80024da:	681b      	ldreq	r3, [r3, #0]
 80024dc:	602b      	streq	r3, [r5, #0]
 80024de:	6833      	ldr	r3, [r6, #0]
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	2600      	movs	r6, #0
 80024e4:	6066      	str	r6, [r4, #4]
 80024e6:	f7ff ffab 	bl	8002440 <_has_ext_stdout_stderr>
 80024ea:	b130      	cbz	r0, 80024fa <initialise_monitor_handles+0xa2>
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <initialise_monitor_handles+0xb4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80024fa:	b005      	add	sp, #20
 80024fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002500:	20000098 	.word	0x20000098
 8002504:	200000a0 	.word	0x200000a0
 8002508:	20000094 	.word	0x20000094
 800250c:	2000009c 	.word	0x2000009c
 8002510:	08002681 	.word	0x08002681

08002514 <_isatty>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	f7ff fd71 	bl	8001ffc <findslot>
 800251a:	2509      	movs	r5, #9
 800251c:	4604      	mov	r4, r0
 800251e:	b920      	cbnz	r0, 800252a <_isatty+0x16>
 8002520:	f7fe fdf2 	bl	8001108 <__errno>
 8002524:	6005      	str	r5, [r0, #0]
 8002526:	4620      	mov	r0, r4
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	4628      	mov	r0, r5
 800252c:	4621      	mov	r1, r4
 800252e:	beab      	bkpt	0x00ab
 8002530:	4604      	mov	r4, r0
 8002532:	2c01      	cmp	r4, #1
 8002534:	d0f7      	beq.n	8002526 <_isatty+0x12>
 8002536:	f7fe fde7 	bl	8001108 <__errno>
 800253a:	2400      	movs	r4, #0
 800253c:	4606      	mov	r6, r0
 800253e:	2513      	movs	r5, #19
 8002540:	4628      	mov	r0, r5
 8002542:	4621      	mov	r1, r4
 8002544:	beab      	bkpt	0x00ab
 8002546:	4605      	mov	r5, r0
 8002548:	6035      	str	r5, [r6, #0]
 800254a:	e7ec      	b.n	8002526 <_isatty+0x12>

0800254c <_init>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	bf00      	nop
 8002550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002552:	bc08      	pop	{r3}
 8002554:	469e      	mov	lr, r3
 8002556:	4770      	bx	lr

08002558 <_fini>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	bf00      	nop
 800255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255e:	bc08      	pop	{r3}
 8002560:	469e      	mov	lr, r3
 8002562:	4770      	bx	lr
