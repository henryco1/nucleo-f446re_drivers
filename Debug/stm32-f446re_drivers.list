
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000738  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008fc  08000904  00010904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008fc  080008fc  00010904  2**0
                  CONTENTS
  4 .ARM          00000000  080008fc  080008fc  00010904  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008fc  08000904  00010904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008fc  080008fc  000108fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000900  08000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000904  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000904  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011d0  00000000  00000000  00010934  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000034c  00000000  00000000  00011b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00011e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  00011f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d43  00000000  00000000  00011fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c80  00000000  00000000  00013d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008aa3  00000000  00000000  0001499b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001d43e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c4  00000000  00000000  0001d4bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080008e4 	.word	0x080008e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080008e4 	.word	0x080008e4

08000204 <delay>:
#include <string.h>
#define BTN_PRESSED 0
/*
 * PUPD LED control
 */
void delay(int value) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <delay+0x14>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	429a      	cmp	r2, r3
 800021e:	d3f8      	bcc.n	8000212 <delay+0xe>
}
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <button_toggle_led>:
		GPIO_ToggleOutputPin(GPIOA, gpioLED.GPIO_PinConfig.GPIO_PinNumber);
		delay(500000);
	}
}

void button_toggle_led(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t button_gpio;
	GPIO_Handle_t led_gpio;

	memset(&button_gpio, 0 , sizeof(GPIO_Handle_t));
 8000232:	f107 030c 	add.w	r3, r7, #12
 8000236:	220c      	movs	r2, #12
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fb4a 	bl	80008d4 <memset>
	memset(&led_gpio, 0 , sizeof(GPIO_Handle_t));
 8000240:	463b      	mov	r3, r7
 8000242:	220c      	movs	r2, #12
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fb44 	bl	80008d4 <memset>

	button_gpio.pGPIOx = GPIOC;
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <button_toggle_led+0x90>)
 800024e:	60fb      	str	r3, [r7, #12]
	led_gpio.pGPIOx = GPIOA;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <button_toggle_led+0x94>)
 8000252:	603b      	str	r3, [r7, #0]

	button_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000254:	230d      	movs	r3, #13
 8000256:	743b      	strb	r3, [r7, #16]
	button_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000258:	2300      	movs	r3, #0
 800025a:	747b      	strb	r3, [r7, #17]
	button_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025c:	2302      	movs	r3, #2
 800025e:	74bb      	strb	r3, [r7, #18]
	button_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 8000260:	2300      	movs	r3, #0
 8000262:	74fb      	strb	r3, [r7, #19]

	led_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000264:	2305      	movs	r3, #5
 8000266:	713b      	strb	r3, [r7, #4]
	led_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000268:	2301      	movs	r3, #1
 800026a:	717b      	strb	r3, [r7, #5]
	led_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026c:	2302      	movs	r3, #2
 800026e:	71bb      	strb	r3, [r7, #6]
	led_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSH_PULL;
 8000270:	2300      	movs	r3, #0
 8000272:	723b      	strb	r3, [r7, #8]
	led_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	4811      	ldr	r0, [pc, #68]	; (80002c0 <button_toggle_led+0x94>)
 800027c:	f000 f85c 	bl	8000338 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	480e      	ldr	r0, [pc, #56]	; (80002bc <button_toggle_led+0x90>)
 8000284:	f000 f858 	bl	8000338 <GPIO_PeriClockControl>
	GPIO_Init(&led_gpio);
 8000288:	463b      	mov	r3, r7
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f91c 	bl	80004c8 <GPIO_Init>
	GPIO_Init(&button_gpio);
 8000290:	f107 030c 	add.w	r3, r7, #12
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f917 	bl	80004c8 <GPIO_Init>

	while(1) {
		if (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13) == BTN_PRESSED) {
 800029a:	210d      	movs	r1, #13
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <button_toggle_led+0x90>)
 800029e:	f000 faa9 	bl	80007f4 <GPIO_ReadFromInputPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f8      	bne.n	800029a <button_toggle_led+0x6e>
			delay(500000/2);
 80002a8:	4806      	ldr	r0, [pc, #24]	; (80002c4 <button_toggle_led+0x98>)
 80002aa:	f7ff ffab 	bl	8000204 <delay>
			GPIO_ToggleOutputPin(GPIOA, led_gpio.GPIO_PinConfig.GPIO_PinNumber);
 80002ae:	793b      	ldrb	r3, [r7, #4]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <button_toggle_led+0x94>)
 80002b4:	f000 fab4 	bl	8000820 <GPIO_ToggleOutputPin>
		if (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13) == BTN_PRESSED) {
 80002b8:	e7ef      	b.n	800029a <button_toggle_led+0x6e>
 80002ba:	bf00      	nop
 80002bc:	40020800 	.word	0x40020800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	0003d090 	.word	0x0003d090

080002c8 <main>:
		}
	}
}

int main(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	button_toggle_led();
 80002cc:	f7ff ffae 	bl	800022c <button_toggle_led>
//	blink_led();
	return 0;
 80002d0:	2300      	movs	r3, #0
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80002d6:	b580      	push	{r7, lr}
 80002d8:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(0);
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 fab6 	bl	800084c <GPIO_IRQHandling>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490e      	ldr	r1, [pc, #56]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0b      	ldr	r4, [pc, #44]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800030e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 fabb 	bl	800088c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ffd7 	bl	80002c8 <main>

0800031a <LoopForever>:

LoopForever:
    b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	08000904 	.word	0x08000904
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d157      	bne.n	80003fa <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a55      	ldr	r2, [pc, #340]	; (80004a4 <GPIO_PeriClockControl+0x16c>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 8000352:	4b55      	ldr	r3, [pc, #340]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a54      	ldr	r2, [pc, #336]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 800035e:	e09b      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a52      	ldr	r2, [pc, #328]	; (80004ac <GPIO_PeriClockControl+0x174>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000368:	4b4f      	ldr	r3, [pc, #316]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a4e      	ldr	r2, [pc, #312]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e090      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a4d      	ldr	r2, [pc, #308]	; (80004b0 <GPIO_PeriClockControl+0x178>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 800037e:	4b4a      	ldr	r3, [pc, #296]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a49      	ldr	r2, [pc, #292]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e085      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a49      	ldr	r2, [pc, #292]	; (80004b4 <GPIO_PeriClockControl+0x17c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 8000394:	4b44      	ldr	r3, [pc, #272]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a43      	ldr	r2, [pc, #268]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e07a      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a44      	ldr	r2, [pc, #272]	; (80004b8 <GPIO_PeriClockControl+0x180>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80003aa:	4b3f      	ldr	r3, [pc, #252]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a3e      	ldr	r2, [pc, #248]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003b0:	f043 0310 	orr.w	r3, r3, #16
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e06f      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <GPIO_PeriClockControl+0x184>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80003c0:	4b39      	ldr	r3, [pc, #228]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a38      	ldr	r2, [pc, #224]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e064      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a3b      	ldr	r2, [pc, #236]	; (80004c0 <GPIO_PeriClockControl+0x188>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80003d6:	4b34      	ldr	r3, [pc, #208]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a33      	ldr	r2, [pc, #204]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e059      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a37      	ldr	r2, [pc, #220]	; (80004c4 <GPIO_PeriClockControl+0x18c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d155      	bne.n	8000498 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80003ec:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a2d      	ldr	r2, [pc, #180]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 80003f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e04e      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a29      	ldr	r2, [pc, #164]	; (80004a4 <GPIO_PeriClockControl+0x16c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d105      	bne.n	800040e <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000408:	2200      	movs	r2, #0
 800040a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800040c:	e044      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a26      	ldr	r2, [pc, #152]	; (80004ac <GPIO_PeriClockControl+0x174>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d105      	bne.n	8000422 <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 8000416:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800041c:	2200      	movs	r2, #0
 800041e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000420:	e03a      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a22      	ldr	r2, [pc, #136]	; (80004b0 <GPIO_PeriClockControl+0x178>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d105      	bne.n	8000436 <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000430:	2200      	movs	r2, #0
 8000432:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000434:	e030      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a1e      	ldr	r2, [pc, #120]	; (80004b4 <GPIO_PeriClockControl+0x17c>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d105      	bne.n	800044a <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000444:	2200      	movs	r2, #0
 8000446:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000448:	e026      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a1a      	ldr	r2, [pc, #104]	; (80004b8 <GPIO_PeriClockControl+0x180>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d105      	bne.n	800045e <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800045c:	e01c      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a16      	ldr	r2, [pc, #88]	; (80004bc <GPIO_PeriClockControl+0x184>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d105      	bne.n	8000472 <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000470:	e012      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <GPIO_PeriClockControl+0x188>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d105      	bne.n	8000486 <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000484:	e008      	b.n	8000498 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <GPIO_PeriClockControl+0x18c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d104      	bne.n	8000498 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <GPIO_PeriClockControl+0x170>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021400 	.word	0x40021400
 80004c0:	40021800 	.word	0x40021800
 80004c4:	40021c00 	.word	0x40021c00

080004c8 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d822      	bhi.n	8000522 <GPIO_Init+0x5a>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6819      	ldr	r1, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e0c3      	b.n	80006aa <GPIO_Init+0x1e2>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b04      	cmp	r3, #4
 8000528:	d117      	bne.n	800055a <GPIO_Init+0x92>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b4a      	ldr	r3, [pc, #296]	; (8000654 <GPIO_Init+0x18c>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a46      	ldr	r2, [pc, #280]	; (8000654 <GPIO_Init+0x18c>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b44      	ldr	r3, [pc, #272]	; (8000654 <GPIO_Init+0x18c>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a40      	ldr	r2, [pc, #256]	; (8000654 <GPIO_Init+0x18c>)
 8000554:	400b      	ands	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
 8000558:	e036      	b.n	80005c8 <GPIO_Init+0x100>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b05      	cmp	r3, #5
 8000560:	d117      	bne.n	8000592 <GPIO_Init+0xca>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <GPIO_Init+0x18c>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	4611      	mov	r1, r2
 8000572:	4a38      	ldr	r2, [pc, #224]	; (8000654 <GPIO_Init+0x18c>)
 8000574:	430b      	orrs	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b36      	ldr	r3, [pc, #216]	; (8000654 <GPIO_Init+0x18c>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	43d2      	mvns	r2, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a32      	ldr	r2, [pc, #200]	; (8000654 <GPIO_Init+0x18c>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
 8000590:	e01a      	b.n	80005c8 <GPIO_Init+0x100>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b06      	cmp	r3, #6
 8000598:	d116      	bne.n	80005c8 <GPIO_Init+0x100>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <GPIO_Init+0x18c>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <GPIO_Init+0x18c>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <GPIO_Init+0x18c>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	43d2      	mvns	r2, r2
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <GPIO_Init+0x18c>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <GPIO_Init+0x190>)
 80005dc:	7cfb      	ldrb	r3, [r7, #19]
 80005de:	3302      	adds	r3, #2
 80005e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	491c      	ldr	r1, [pc, #112]	; (800065c <GPIO_Init+0x194>)
 80005ea:	428b      	cmp	r3, r1
 80005ec:	d046      	beq.n	800067c <GPIO_Init+0x1b4>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	491b      	ldr	r1, [pc, #108]	; (8000660 <GPIO_Init+0x198>)
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d02b      	beq.n	8000650 <GPIO_Init+0x188>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4919      	ldr	r1, [pc, #100]	; (8000664 <GPIO_Init+0x19c>)
 80005fe:	428b      	cmp	r3, r1
 8000600:	d024      	beq.n	800064c <GPIO_Init+0x184>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4918      	ldr	r1, [pc, #96]	; (8000668 <GPIO_Init+0x1a0>)
 8000608:	428b      	cmp	r3, r1
 800060a:	d01d      	beq.n	8000648 <GPIO_Init+0x180>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4916      	ldr	r1, [pc, #88]	; (800066c <GPIO_Init+0x1a4>)
 8000612:	428b      	cmp	r3, r1
 8000614:	d016      	beq.n	8000644 <GPIO_Init+0x17c>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4915      	ldr	r1, [pc, #84]	; (8000670 <GPIO_Init+0x1a8>)
 800061c:	428b      	cmp	r3, r1
 800061e:	d00f      	beq.n	8000640 <GPIO_Init+0x178>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4913      	ldr	r1, [pc, #76]	; (8000674 <GPIO_Init+0x1ac>)
 8000626:	428b      	cmp	r3, r1
 8000628:	d008      	beq.n	800063c <GPIO_Init+0x174>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4912      	ldr	r1, [pc, #72]	; (8000678 <GPIO_Init+0x1b0>)
 8000630:	428b      	cmp	r3, r1
 8000632:	d101      	bne.n	8000638 <GPIO_Init+0x170>
 8000634:	2307      	movs	r3, #7
 8000636:	e022      	b.n	800067e <GPIO_Init+0x1b6>
 8000638:	2300      	movs	r3, #0
 800063a:	e020      	b.n	800067e <GPIO_Init+0x1b6>
 800063c:	2306      	movs	r3, #6
 800063e:	e01e      	b.n	800067e <GPIO_Init+0x1b6>
 8000640:	2305      	movs	r3, #5
 8000642:	e01c      	b.n	800067e <GPIO_Init+0x1b6>
 8000644:	2304      	movs	r3, #4
 8000646:	e01a      	b.n	800067e <GPIO_Init+0x1b6>
 8000648:	2303      	movs	r3, #3
 800064a:	e018      	b.n	800067e <GPIO_Init+0x1b6>
 800064c:	2302      	movs	r3, #2
 800064e:	e016      	b.n	800067e <GPIO_Init+0x1b6>
 8000650:	2301      	movs	r3, #1
 8000652:	e014      	b.n	800067e <GPIO_Init+0x1b6>
 8000654:	40013c00 	.word	0x40013c00
 8000658:	40013800 	.word	0x40013800
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400
 8000664:	40020800 	.word	0x40020800
 8000668:	40020c00 	.word	0x40020c00
 800066c:	40021000 	.word	0x40021000
 8000670:	40021400 	.word	0x40021400
 8000674:	40021800 	.word	0x40021800
 8000678:	40021c00 	.word	0x40021c00
 800067c:	2300      	movs	r3, #0
 800067e:	7cb9      	ldrb	r1, [r7, #18]
 8000680:	0089      	lsls	r1, r1, #2
 8000682:	408b      	lsls	r3, r1
 8000684:	43db      	mvns	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	4958      	ldr	r1, [pc, #352]	; (80007ec <GPIO_Init+0x324>)
 800068a:	7cfb      	ldrb	r3, [r7, #19]
 800068c:	4002      	ands	r2, r0
 800068e:	3302      	adds	r3, #2
 8000690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000694:	4b56      	ldr	r3, [pc, #344]	; (80007f0 <GPIO_Init+0x328>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a52      	ldr	r2, [pc, #328]	; (80007f0 <GPIO_Init+0x328>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	2103      	movs	r1, #3
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6899      	ldr	r1, [r3, #8]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	79db      	ldrb	r3, [r3, #7]
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2103      	movs	r1, #3
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68d9      	ldr	r1, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	430a      	orrs	r2, r1
 800072c:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a1b      	ldrb	r3, [r3, #8]
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	2301      	movs	r3, #1
 8000750:	408b      	lsls	r3, r1
 8000752:	43db      	mvns	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	400a      	ands	r2, r1
 800075c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6859      	ldr	r1, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	430a      	orrs	r2, r1
 800076c:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode == GPIO_MODE_ALTFN) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7a5b      	ldrb	r3, [r3, #9]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d132      	bne.n	80007e0 <GPIO_Init+0x318>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	3208      	adds	r2, #8
 8000796:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	210f      	movs	r1, #15
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4011      	ands	r1, r2
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	3208      	adds	r2, #8
 80007b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	3208      	adds	r2, #8
 80007be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7a5b      	ldrb	r3, [r3, #9]
 80007c6:	4619      	mov	r1, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	fa01 f303 	lsl.w	r3, r1, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4311      	orrs	r1, r2
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007e0:	bf00      	nop
 80007e2:	371c      	adds	r7, #28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40013c00 	.word	0x40013c00

080007f4 <GPIO_ReadFromInputPin>:
 * desc: reads the input pin of a GPIOx peripheral (specified by pinNumber)
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: 2 byte pin register data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
	uint8_t out;
	out = (uint8_t)((pGPIOx->IDR >> pinNumber) & 1);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	691a      	ldr	r2, [r3, #16]
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	fa22 f303 	lsr.w	r3, r2, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
	return out;
 8000812:	7bfb      	ldrb	r3, [r7, #15]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <GPIO_ToggleOutputPin>:
 * desc: this function toggles a GPIOx output pin
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	78fa      	ldrb	r2, [r7, #3]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	405a      	eors	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	615a      	str	r2, [r3, #20]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <GPIO_IRQHandling>:
 * GPIO Interrupt Request Handler
 * desc: handles GPIOx IRQ
 * input1: pin number
 * output: none
 */
void GPIO_IRQHandling(uint8_t pinNumber) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	// clear the exti pr register corresponding to the pin number
	if (EXTI->PR & ( 1 << pinNumber )) {
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <GPIO_IRQHandling+0x3c>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	4013      	ands	r3, r2
 8000864:	2b00      	cmp	r3, #0
 8000866:	d009      	beq.n	800087c <GPIO_IRQHandling+0x30>
		EXTI->PR |= ( 1 << pinNumber);
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <GPIO_IRQHandling+0x3c>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <GPIO_IRQHandling+0x3c>)
 8000878:	430b      	orrs	r3, r1
 800087a:	6153      	str	r3, [r2, #20]
	}
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40013c00 	.word	0x40013c00

0800088c <__libc_init_array>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4e0d      	ldr	r6, [pc, #52]	; (80008c4 <__libc_init_array+0x38>)
 8000890:	4c0d      	ldr	r4, [pc, #52]	; (80008c8 <__libc_init_array+0x3c>)
 8000892:	1ba4      	subs	r4, r4, r6
 8000894:	10a4      	asrs	r4, r4, #2
 8000896:	2500      	movs	r5, #0
 8000898:	42a5      	cmp	r5, r4
 800089a:	d109      	bne.n	80008b0 <__libc_init_array+0x24>
 800089c:	4e0b      	ldr	r6, [pc, #44]	; (80008cc <__libc_init_array+0x40>)
 800089e:	4c0c      	ldr	r4, [pc, #48]	; (80008d0 <__libc_init_array+0x44>)
 80008a0:	f000 f820 	bl	80008e4 <_init>
 80008a4:	1ba4      	subs	r4, r4, r6
 80008a6:	10a4      	asrs	r4, r4, #2
 80008a8:	2500      	movs	r5, #0
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	d105      	bne.n	80008ba <__libc_init_array+0x2e>
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008b4:	4798      	blx	r3
 80008b6:	3501      	adds	r5, #1
 80008b8:	e7ee      	b.n	8000898 <__libc_init_array+0xc>
 80008ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008be:	4798      	blx	r3
 80008c0:	3501      	adds	r5, #1
 80008c2:	e7f2      	b.n	80008aa <__libc_init_array+0x1e>
 80008c4:	080008fc 	.word	0x080008fc
 80008c8:	080008fc 	.word	0x080008fc
 80008cc:	080008fc 	.word	0x080008fc
 80008d0:	08000900 	.word	0x08000900

080008d4 <memset>:
 80008d4:	4402      	add	r2, r0
 80008d6:	4603      	mov	r3, r0
 80008d8:	4293      	cmp	r3, r2
 80008da:	d100      	bne.n	80008de <memset+0xa>
 80008dc:	4770      	bx	lr
 80008de:	f803 1b01 	strb.w	r1, [r3], #1
 80008e2:	e7f9      	b.n	80008d8 <memset+0x4>

080008e4 <_init>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	bf00      	nop
 80008e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ea:	bc08      	pop	{r3}
 80008ec:	469e      	mov	lr, r3
 80008ee:	4770      	bx	lr

080008f0 <_fini>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	bf00      	nop
 80008f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f6:	bc08      	pop	{r3}
 80008f8:	469e      	mov	lr, r3
 80008fa:	4770      	bx	lr
