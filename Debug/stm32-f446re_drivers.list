
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e3c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020b0  080020b0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080020b0  080020b0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020b0  080020b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020b0  080020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020b4  080020b4  000120b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080020b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000084  0800213c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800213c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000385e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008c5  00000000  00000000  00023912  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  000241d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c0  00000000  00000000  000243e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003047  00000000  00000000  000245a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f7d  00000000  00000000  000275e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b3c5  00000000  00000000  00029564  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f8  00000000  00000000  000349a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000084 	.word	0x20000084
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001fe8 	.word	0x08001fe8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000088 	.word	0x20000088
 8000200:	08001fe8 	.word	0x08001fe8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <I2C1_GPIO_Init>:
/*
 * PB8 = SCL
 * PB9 = SDA
 * Alt Func mode = 4
 */
void I2C1_GPIO_Init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <I2C1_GPIO_Init+0x40>)
 800021c:	607b      	str	r3, [r7, #4]

	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 8000222:	2304      	movs	r3, #4
 8000224:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_OPEN_DRAIN;
 8000226:	2301      	movs	r3, #1
 8000228:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 800022a:	2301      	movs	r3, #1
 800022c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8000232:	2308      	movs	r3, #8
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f9c5 	bl	80005c8 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800023e:	2309      	movs	r3, #9
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f9bf 	bl	80005c8 <GPIO_Init>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Init>:

void I2C1_Init(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <I2C1_Init+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <I2C1_Init+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Init+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = I2C_SLAVE_ADDR;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <I2C1_Init+0x2c>)
 800026a:	2269      	movs	r2, #105	; 0x69
 800026c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_CYCLE_2;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Init+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <I2C1_Init+0x2c>)
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <I2C1_Init+0x34>)
 8000278:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <I2C1_Init+0x2c>)
 800027c:	f000 fc60 	bl	8000b40 <I2C_Init>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000150 	.word	0x20000150
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	220c      	movs	r2, #12
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f8e1 	bl	8001464 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <GPIO_Button_Init+0x38>)
 80002a4:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002a6:	230d      	movs	r3, #13
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ae:	2302      	movs	r3, #2
 80002b0:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f985 	bl	80005c8 <GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020800 	.word	0x40020800

080002cc <main>:

int main(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/* This will be an interrupt based version of master rx test
	 * 	Here we initialize interrupts. Note that priority config is not needed as we are only working with one interrupt
	 * 	We also need the interrupt name from the startup code. We override the IRQ handlers with our IRQ handler function
	 */
//	initialise_monitor_handles();
	printf("Semihosting successful\n");
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x40>)
 80002d2:	f001 f92b 	bl	800152c <puts>
	GPIO_Button_Init();
 80002d6:	f7ff ffdb 	bl	8000290 <GPIO_Button_Init>
	I2C1_GPIO_Init();
 80002da:	f7ff ff9b 	bl	8000214 <I2C1_GPIO_Init>
	I2C1_Init();
 80002de:	f7ff ffbb 	bl	8000258 <I2C1_Init>

	// IRQ
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002e2:	2101      	movs	r1, #1
 80002e4:	201f      	movs	r0, #31
 80002e6:	f000 fce7 	bl	8000cb8 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002ea:	2101      	movs	r1, #1
 80002ec:	2020      	movs	r0, #32
 80002ee:	f000 fce3 	bl	8000cb8 <I2C_IRQInterruptConfig>
	I2C_SlaveConfigureCallBackEvents(I2C1, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x44>)
 80002f6:	f000 fee1 	bl	80010bc <I2C_SlaveConfigureCallBackEvents>

	I2C_PeripheralControl(I2C1, ENABLE);
 80002fa:	2101      	movs	r1, #1
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <main+0x44>)
 80002fe:	f000 fca3 	bl	8000c48 <I2C_PeripheralControl>
	// enable ack ater PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	4802      	ldr	r0, [pc, #8]	; (8000310 <main+0x44>)
 8000306:	f000 ff0d 	bl	8001124 <I2C_ManageAcking>

	while(1);
 800030a:	e7fe      	b.n	800030a <main+0x3e>
 800030c:	08002000 	.word	0x08002000
 8000310:	40005400 	.word	0x40005400

08000314 <I2C1_EV_IRQHandler>:

	return 0;
}
void I2C1_EV_IRQHandler(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000318:	4802      	ldr	r0, [pc, #8]	; (8000324 <I2C1_EV_IRQHandler+0x10>)
 800031a:	f000 fd53 	bl	8000dc4 <I2C_EV_IRQHandling>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000150 	.word	0x20000150

08000328 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <I2C1_ER_IRQHandler+0x10>)
 800032e:	f000 fe2f 	bl	8000f90 <I2C_ER_IRQHandling>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000150 	.word	0x20000150

0800033c <I2C_ApplicationEventCallback>:

// handle the events caused the by driver as described by the application events macros
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv) {
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandCode;
	static uint8_t count = 0;

	if (AppEv == I2C_EV_DATA_REQ) {
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b08      	cmp	r3, #8
 800034c:	d122      	bne.n	8000394 <I2C_ApplicationEventCallback+0x58>
		// master requests data from the slave
		if (commandCode == 0x51) {
 800034e:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <I2C_ApplicationEventCallback+0x94>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b51      	cmp	r3, #81	; 0x51
 8000354:	d10b      	bne.n	800036e <I2C_ApplicationEventCallback+0x32>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)TxBuffer));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681c      	ldr	r4, [r3, #0]
 800035a:	481e      	ldr	r0, [pc, #120]	; (80003d4 <I2C_ApplicationEventCallback+0x98>)
 800035c:	f7ff ff52 	bl	8000204 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4619      	mov	r1, r3
 8000366:	4620      	mov	r0, r4
 8000368:	f000 fc8a 	bl	8000c80 <I2C_SlaveSendData>
	} else if (AppEv == I2C_EV_STOP) {
		// only happens during slave reception. Master has ended I2C communication with the slave
//		printf("Master has ended the I2C communication with the slave.\n");

	}
}
 800036c:	e02b      	b.n	80003c6 <I2C_ApplicationEventCallback+0x8a>
		} else if (commandCode == 0x52) {
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <I2C_ApplicationEventCallback+0x94>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b52      	cmp	r3, #82	; 0x52
 8000374:	d127      	bne.n	80003c6 <I2C_ApplicationEventCallback+0x8a>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, TxBuffer[count++]);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6818      	ldr	r0, [r3, #0]
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <I2C_ApplicationEventCallback+0x9c>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	1c5a      	adds	r2, r3, #1
 8000380:	b2d1      	uxtb	r1, r2
 8000382:	4a15      	ldr	r2, [pc, #84]	; (80003d8 <I2C_ApplicationEventCallback+0x9c>)
 8000384:	7011      	strb	r1, [r2, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <I2C_ApplicationEventCallback+0x98>)
 800038a:	5c9b      	ldrb	r3, [r3, r2]
 800038c:	4619      	mov	r1, r3
 800038e:	f000 fc77 	bl	8000c80 <I2C_SlaveSendData>
}
 8000392:	e018      	b.n	80003c6 <I2C_ApplicationEventCallback+0x8a>
	} else if (AppEv == I2C_EV_DATA_RCV) {
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b09      	cmp	r3, #9
 8000398:	d109      	bne.n	80003ae <I2C_ApplicationEventCallback+0x72>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fc7d 	bl	8000c9e <I2C_SlaveReceiveData>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <I2C_ApplicationEventCallback+0x94>)
 80003aa:	701a      	strb	r2, [r3, #0]
}
 80003ac:	e00b      	b.n	80003c6 <I2C_ApplicationEventCallback+0x8a>
	} else if (AppEv == I2C_ERROR_AF) {
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d108      	bne.n	80003c6 <I2C_ApplicationEventCallback+0x8a>
		commandCode = 0xff;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <I2C_ApplicationEventCallback+0x94>)
 80003b6:	22ff      	movs	r2, #255	; 0xff
 80003b8:	701a      	strb	r2, [r3, #0]
		count = 0;
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <I2C_ApplicationEventCallback+0x9c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
		printf("nack sent\n");
 80003c0:	4806      	ldr	r0, [pc, #24]	; (80003dc <I2C_ApplicationEventCallback+0xa0>)
 80003c2:	f001 f8b3 	bl	800152c <puts>
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd90      	pop	{r4, r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200000a0 	.word	0x200000a0
 80003d4:	20000000 	.word	0x20000000
 80003d8:	200000a1 	.word	0x200000a1
 80003dc:	08002018 	.word	0x08002018

080003e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <_sbrk+0x50>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <_sbrk+0x16>
		heap_end = &end;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <_sbrk+0x50>)
 80003f2:	4a10      	ldr	r2, [pc, #64]	; (8000434 <_sbrk+0x54>)
 80003f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <_sbrk+0x50>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <_sbrk+0x50>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	466a      	mov	r2, sp
 8000406:	4293      	cmp	r3, r2
 8000408:	d907      	bls.n	800041a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800040a:	f001 f801 	bl	8001410 <__errno>
 800040e:	4602      	mov	r2, r0
 8000410:	230c      	movs	r3, #12
 8000412:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000414:	f04f 33ff 	mov.w	r3, #4294967295
 8000418:	e006      	b.n	8000428 <_sbrk+0x48>
	}

	heap_end += incr;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <_sbrk+0x50>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	4a03      	ldr	r2, [pc, #12]	; (8000430 <_sbrk+0x50>)
 8000424:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200000a4 	.word	0x200000a4
 8000434:	20000178 	.word	0x20000178

08000438 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d157      	bne.n	80004fa <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a55      	ldr	r2, [pc, #340]	; (80005a4 <GPIO_PeriClockControl+0x16c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 8000452:	4b55      	ldr	r3, [pc, #340]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a54      	ldr	r2, [pc, #336]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 800045e:	e09b      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a52      	ldr	r2, [pc, #328]	; (80005ac <GPIO_PeriClockControl+0x174>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000468:	4b4f      	ldr	r3, [pc, #316]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a4e      	ldr	r2, [pc, #312]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e090      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a4d      	ldr	r2, [pc, #308]	; (80005b0 <GPIO_PeriClockControl+0x178>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 800047e:	4b4a      	ldr	r3, [pc, #296]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a49      	ldr	r2, [pc, #292]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e085      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a49      	ldr	r2, [pc, #292]	; (80005b4 <GPIO_PeriClockControl+0x17c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 8000494:	4b44      	ldr	r3, [pc, #272]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a43      	ldr	r2, [pc, #268]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e07a      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a44      	ldr	r2, [pc, #272]	; (80005b8 <GPIO_PeriClockControl+0x180>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80004aa:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a3e      	ldr	r2, [pc, #248]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e06f      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a40      	ldr	r2, [pc, #256]	; (80005bc <GPIO_PeriClockControl+0x184>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80004c0:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a38      	ldr	r2, [pc, #224]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	e064      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a3b      	ldr	r2, [pc, #236]	; (80005c0 <GPIO_PeriClockControl+0x188>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a33      	ldr	r2, [pc, #204]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e2:	e059      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a37      	ldr	r2, [pc, #220]	; (80005c4 <GPIO_PeriClockControl+0x18c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d155      	bne.n	8000598 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80004ec:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a2d      	ldr	r2, [pc, #180]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 80004f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e04e      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a29      	ldr	r2, [pc, #164]	; (80005a4 <GPIO_PeriClockControl+0x16c>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d105      	bne.n	800050e <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000508:	2200      	movs	r2, #0
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800050c:	e044      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <GPIO_PeriClockControl+0x174>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d105      	bne.n	8000522 <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000520:	e03a      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <GPIO_PeriClockControl+0x178>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d105      	bne.n	8000536 <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000530:	2200      	movs	r2, #0
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000534:	e030      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <GPIO_PeriClockControl+0x17c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d105      	bne.n	800054a <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000544:	2200      	movs	r2, #0
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000548:	e026      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <GPIO_PeriClockControl+0x180>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d105      	bne.n	800055e <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800055c:	e01c      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <GPIO_PeriClockControl+0x184>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d105      	bne.n	8000572 <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800056c:	2200      	movs	r2, #0
 800056e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000570:	e012      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <GPIO_PeriClockControl+0x188>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d105      	bne.n	8000586 <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000580:	2200      	movs	r2, #0
 8000582:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000584:	e008      	b.n	8000598 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <GPIO_PeriClockControl+0x18c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d104      	bne.n	8000598 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <GPIO_PeriClockControl+0x170>)
 8000594:	2200      	movs	r2, #0
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020400 	.word	0x40020400
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40021400 	.word	0x40021400
 80005c0:	40021800 	.word	0x40021800
 80005c4:	40021c00 	.word	0x40021c00

080005c8 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff2c 	bl	8000438 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d822      	bhi.n	800062e <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	461a      	mov	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	2103      	movs	r1, #3
 8000608:	fa01 f303 	lsl.w	r3, r1, r3
 800060c:	43db      	mvns	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	400a      	ands	r2, r1
 8000616:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	430a      	orrs	r2, r1
 8000626:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e0c3      	b.n	80007b6 <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	2b04      	cmp	r3, #4
 8000634:	d117      	bne.n	8000666 <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000636:	4b4a      	ldr	r3, [pc, #296]	; (8000760 <GPIO_Init+0x198>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7912      	ldrb	r2, [r2, #4]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a46      	ldr	r2, [pc, #280]	; (8000760 <GPIO_Init+0x198>)
 8000648:	430b      	orrs	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064c:	4b44      	ldr	r3, [pc, #272]	; (8000760 <GPIO_Init+0x198>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a40      	ldr	r2, [pc, #256]	; (8000760 <GPIO_Init+0x198>)
 8000660:	400b      	ands	r3, r1
 8000662:	6093      	str	r3, [r2, #8]
 8000664:	e036      	b.n	80006d4 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d117      	bne.n	800069e <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <GPIO_Init+0x198>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	7912      	ldrb	r2, [r2, #4]
 8000676:	4611      	mov	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	408a      	lsls	r2, r1
 800067c:	4611      	mov	r1, r2
 800067e:	4a38      	ldr	r2, [pc, #224]	; (8000760 <GPIO_Init+0x198>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <GPIO_Init+0x198>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	7912      	ldrb	r2, [r2, #4]
 800068c:	4611      	mov	r1, r2
 800068e:	2201      	movs	r2, #1
 8000690:	408a      	lsls	r2, r1
 8000692:	43d2      	mvns	r2, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a32      	ldr	r2, [pc, #200]	; (8000760 <GPIO_Init+0x198>)
 8000698:	430b      	orrs	r3, r1
 800069a:	60d3      	str	r3, [r2, #12]
 800069c:	e01a      	b.n	80006d4 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d116      	bne.n	80006d4 <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <GPIO_Init+0x198>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	7912      	ldrb	r2, [r2, #4]
 80006ae:	4611      	mov	r1, r2
 80006b0:	2201      	movs	r2, #1
 80006b2:	408a      	lsls	r2, r1
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <GPIO_Init+0x198>)
 80006b8:	430b      	orrs	r3, r1
 80006ba:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <GPIO_Init+0x198>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7912      	ldrb	r2, [r2, #4]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	43d2      	mvns	r2, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a24      	ldr	r2, [pc, #144]	; (8000760 <GPIO_Init+0x198>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	f003 0303 	and.w	r3, r3, #3
 80006e4:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <GPIO_Init+0x19c>)
 80006e8:	7cfb      	ldrb	r3, [r7, #19]
 80006ea:	3302      	adds	r3, #2
 80006ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	491c      	ldr	r1, [pc, #112]	; (8000768 <GPIO_Init+0x1a0>)
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d046      	beq.n	8000788 <GPIO_Init+0x1c0>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	491b      	ldr	r1, [pc, #108]	; (800076c <GPIO_Init+0x1a4>)
 8000700:	428b      	cmp	r3, r1
 8000702:	d02b      	beq.n	800075c <GPIO_Init+0x194>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4919      	ldr	r1, [pc, #100]	; (8000770 <GPIO_Init+0x1a8>)
 800070a:	428b      	cmp	r3, r1
 800070c:	d024      	beq.n	8000758 <GPIO_Init+0x190>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4918      	ldr	r1, [pc, #96]	; (8000774 <GPIO_Init+0x1ac>)
 8000714:	428b      	cmp	r3, r1
 8000716:	d01d      	beq.n	8000754 <GPIO_Init+0x18c>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4916      	ldr	r1, [pc, #88]	; (8000778 <GPIO_Init+0x1b0>)
 800071e:	428b      	cmp	r3, r1
 8000720:	d016      	beq.n	8000750 <GPIO_Init+0x188>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4915      	ldr	r1, [pc, #84]	; (800077c <GPIO_Init+0x1b4>)
 8000728:	428b      	cmp	r3, r1
 800072a:	d00f      	beq.n	800074c <GPIO_Init+0x184>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4913      	ldr	r1, [pc, #76]	; (8000780 <GPIO_Init+0x1b8>)
 8000732:	428b      	cmp	r3, r1
 8000734:	d008      	beq.n	8000748 <GPIO_Init+0x180>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4912      	ldr	r1, [pc, #72]	; (8000784 <GPIO_Init+0x1bc>)
 800073c:	428b      	cmp	r3, r1
 800073e:	d101      	bne.n	8000744 <GPIO_Init+0x17c>
 8000740:	2307      	movs	r3, #7
 8000742:	e022      	b.n	800078a <GPIO_Init+0x1c2>
 8000744:	2300      	movs	r3, #0
 8000746:	e020      	b.n	800078a <GPIO_Init+0x1c2>
 8000748:	2306      	movs	r3, #6
 800074a:	e01e      	b.n	800078a <GPIO_Init+0x1c2>
 800074c:	2305      	movs	r3, #5
 800074e:	e01c      	b.n	800078a <GPIO_Init+0x1c2>
 8000750:	2304      	movs	r3, #4
 8000752:	e01a      	b.n	800078a <GPIO_Init+0x1c2>
 8000754:	2303      	movs	r3, #3
 8000756:	e018      	b.n	800078a <GPIO_Init+0x1c2>
 8000758:	2302      	movs	r3, #2
 800075a:	e016      	b.n	800078a <GPIO_Init+0x1c2>
 800075c:	2301      	movs	r3, #1
 800075e:	e014      	b.n	800078a <GPIO_Init+0x1c2>
 8000760:	40013c00 	.word	0x40013c00
 8000764:	40013800 	.word	0x40013800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40021400 	.word	0x40021400
 8000780:	40021800 	.word	0x40021800
 8000784:	40021c00 	.word	0x40021c00
 8000788:	2300      	movs	r3, #0
 800078a:	7cb9      	ldrb	r1, [r7, #18]
 800078c:	0089      	lsls	r1, r1, #2
 800078e:	408b      	lsls	r3, r1
 8000790:	43db      	mvns	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	4957      	ldr	r1, [pc, #348]	; (80008f4 <GPIO_Init+0x32c>)
 8000796:	7cfb      	ldrb	r3, [r7, #19]
 8000798:	4002      	ands	r2, r0
 800079a:	3302      	adds	r3, #2
 800079c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <GPIO_Init+0x330>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	7912      	ldrb	r2, [r2, #4]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a51      	ldr	r2, [pc, #324]	; (80008f8 <GPIO_Init+0x330>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	799b      	ldrb	r3, [r3, #6]
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	2103      	movs	r1, #3
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6899      	ldr	r1, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	79db      	ldrb	r3, [r3, #7]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2103      	movs	r1, #3
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	400a      	ands	r2, r1
 8000828:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68d9      	ldr	r1, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	430a      	orrs	r2, r1
 8000838:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7a1b      	ldrb	r3, [r3, #8]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	791b      	ldrb	r3, [r3, #4]
 8000858:	4619      	mov	r1, r3
 800085a:	2301      	movs	r3, #1
 800085c:	408b      	lsls	r3, r1
 800085e:	43db      	mvns	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6859      	ldr	r1, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	430a      	orrs	r2, r1
 8000878:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d132      	bne.n	80008ec <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	b2db      	uxtb	r3, r3
 800088e:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	210f      	movs	r1, #15
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4011      	ands	r1, r2
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	3208      	adds	r2, #8
 80008be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	3208      	adds	r2, #8
 80008ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7a5b      	ldrb	r3, [r3, #9]
 80008d2:	4619      	mov	r1, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4311      	orrs	r1, r2
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	3208      	adds	r2, #8
 80008e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40013c00 	.word	0x40013c00

080008fc <RCC_GetPLLOutputClock>:
 * RCC Get PLL Output Clock
 * desc: gets the pll output clock
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPLLOutputClock() {
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
	 * Definitions:
	 * 	PLLP = main PLL division factor for main system clock
	 * 	PLLN = main PLL multiplication factor for VCO
	 * 	PLLM = division factor for the main PLL input clock
	 */
	uint8_t pll_div_factors[4] = {2, 4, 6, 8};
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <RCC_GetPLLOutputClock+0x88>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	607b      	str	r3, [r7, #4]

	uint32_t clk_src, clk_vco, plln, clk_pll = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
	uint8_t pllp, pllm = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	75bb      	strb	r3, [r7, #22]

	temp = (RCC->PLLCFGR << 22) & 1;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <RCC_GetPLLOutputClock+0x8c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2300      	movs	r3, #0
 800091a:	75bb      	strb	r3, [r7, #22]
	if (temp) {
 800091c:	7dbb      	ldrb	r3, [r7, #22]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <RCC_GetPLLOutputClock+0x2c>
		// HSI clock selected as PLL
		clk_src = 16000000;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <RCC_GetPLLOutputClock+0x90>)
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	e001      	b.n	800092c <RCC_GetPLLOutputClock+0x30>
	} else {
		// HSE clock selected as PLL
		clk_src = 8000000;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <RCC_GetPLLOutputClock+0x94>)
 800092a:	61fb      	str	r3, [r7, #28]
	}

	plln = (RCC->PLLCFGR << 6) & 0x1FF;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <RCC_GetPLLOutputClock+0x8c>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000936:	613b      	str	r3, [r7, #16]
	pllm = (RCC->PLLCFGR << 0) & 0x3F;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <RCC_GetPLLOutputClock+0x8c>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000942:	75fb      	strb	r3, [r7, #23]

	clk_vco = clk_src * (plln / pllm);
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	fbb2 f2f3 	udiv	r2, r2, r3
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	60fb      	str	r3, [r7, #12]

	temp = (RCC->PLLCFGR << 16) & 0x3;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <RCC_GetPLLOutputClock+0x8c>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2300      	movs	r3, #0
 800095a:	75bb      	strb	r3, [r7, #22]
	pllp = pll_div_factors[temp];
 800095c:	7dbb      	ldrb	r3, [r7, #22]
 800095e:	f107 0220 	add.w	r2, r7, #32
 8000962:	4413      	add	r3, r2
 8000964:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000968:	72fb      	strb	r3, [r7, #11]
	clk_pll = clk_vco / pllp;
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	61bb      	str	r3, [r7, #24]

	return clk_pll;
 8000974:	69bb      	ldr	r3, [r7, #24]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	08002024 	.word	0x08002024
 8000988:	40023800 	.word	0x40023800
 800098c:	00f42400 	.word	0x00f42400
 8000990:	007a1200 	.word	0x007a1200

08000994 <RCC_GetPCLK1Value>:
 * RCC Get PLL PCLK1 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK1Value(void) {
 8000994:	b5b0      	push	{r4, r5, r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk1;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 80009aa:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <RCC_GetPCLK1Value+0xec>)
 80009ac:	f107 0408 	add.w	r4, r7, #8
 80009b0:	461d      	mov	r5, r3
 80009b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre1_div_factors[4] = {2, 4, 8, 16};
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <RCC_GetPCLK1Value+0xf0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << 2) & 0x3;
 80009c4:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <RCC_GetPCLK1Value+0xf4>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 80009d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <RCC_GetPCLK1Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <RCC_GetPCLK1Value+0xf8>)
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
 80009e2:	e00d      	b.n	8000a00 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 1) {
 80009e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d102      	bne.n	80009f2 <RCC_GetPCLK1Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <RCC_GetPCLK1Value+0xfc>)
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
 80009f0:	e006      	b.n	8000a00 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 2) {
 80009f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d102      	bne.n	8000a00 <RCC_GetPCLK1Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 80009fa:	f7ff ff7f 	bl	80008fc <RCC_GetPLLOutputClock>
 80009fe:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << 4) & 0xF;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <RCC_GetPCLK1Value+0xf4>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 8000a12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d802      	bhi.n	8000a20 <RCC_GetPCLK1Value+0x8c>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a1e:	e009      	b.n	8000a34 <RCC_GetPCLK1Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000a20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a24:	3b08      	subs	r3, #8
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << 10) & 0x7;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <RCC_GetPCLK1Value+0xf4>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d803      	bhi.n	8000a4e <RCC_GetPCLK1Value+0xba>
 8000a46:	2301      	movs	r3, #1
 8000a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a4c:	e009      	b.n	8000a62 <RCC_GetPCLK1Value+0xce>
	else clk_apb = ppre1_div_factors[temp - 4];
 8000a4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a52:	3b04      	subs	r3, #4
 8000a54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a58:	4413      	add	r3, r2
 8000a5a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk1 = (clk_sys / clk_ahb) / clk_apb;
 8000a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk1;
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3738      	adds	r7, #56	; 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08002028 	.word	0x08002028
 8000a84:	08002048 	.word	0x08002048
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	00f42400 	.word	0x00f42400
 8000a90:	007a1200 	.word	0x007a1200

08000a94 <I2C_PeriClockControl>:
 * desc: enables the I2C peripheral clock for a specific I2C peripheral
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d120      	bne.n	8000ae8 <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <I2C_PeriClockControl+0x9c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d106      	bne.n	8000abc <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI;
		}
	}
}
 8000aba:	e032      	b.n	8000b22 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <I2C_PeriClockControl+0xa4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000aca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad0:	e027      	b.n	8000b22 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <I2C_PeriClockControl+0xa8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d123      	bne.n	8000b22 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_EN;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae6:	e01c      	b.n	8000b22 <I2C_PeriClockControl+0x8e>
		if (pI2Cx == I2C1) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <I2C_PeriClockControl+0x9c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d105      	bne.n	8000afc <I2C_PeriClockControl+0x68>
			I2C1_PCLK_DI;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000afa:	e012      	b.n	8000b22 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <I2C_PeriClockControl+0xa4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d105      	bne.n	8000b10 <I2C_PeriClockControl+0x7c>
			I2C2_PCLK_DI;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b0e:	e008      	b.n	8000b22 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <I2C_PeriClockControl+0xa8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d104      	bne.n	8000b22 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_DI;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <I2C_PeriClockControl+0xa0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40005800 	.word	0x40005800
 8000b3c:	40005c00 	.word	0x40005c00

08000b40 <I2C_Init>:
 * I2C Peripheral Initialization
 * desc: initializes an I2C peripheral
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint32_t temp_reg = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2101      	movs	r1, #1
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff9e 	bl	8000a94 <I2C_PeriClockControl>

	// Configure I2C with the peripheral clocks frequency
	// only 5 bits are valid
	temp_reg = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
	temp_reg |= RCC_GetPCLK1Value() / 1000000U;
 8000b5c:	f7ff ff1a 	bl	8000994 <RCC_GetPCLK1Value>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <I2C_Init+0xfc>)
 8000b64:	fba3 2302 	umull	r2, r3, r3, r2
 8000b68:	0c9b      	lsrs	r3, r3, #18
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = temp_reg & 0x3F;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b7a:	605a      	str	r2, [r3, #4]

	// Specify the address of the device we are going to communicate with
	temp_reg = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
	temp_reg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7a1b      	ldrb	r3, [r3, #8]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
	temp_reg |= (1 << I2C_OAR1_BIT14);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = temp_reg;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	609a      	str	r2, [r3, #8]

	// Configure the speed of the serial clock
	uint16_t ccr_val = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	817b      	strh	r3, [r7, #10]
	temp_reg = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <I2C_Init+0x100>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d80f      	bhi.n	8000bd0 <I2C_Init+0x90>
		// slow (standard) mode
		ccr_val = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000bb0:	f7ff fef0 	bl	8000994 <RCC_GetPCLK1Value>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	817b      	strh	r3, [r7, #10]
		temp_reg |= (ccr_val & 0xFFF);
 8000bc2:	897b      	ldrh	r3, [r7, #10]
 8000bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e00a      	b.n	8000be6 <I2C_Init+0xa6>
	} else {
		// fast mode
		temp_reg |= (1 << I2C_CCR_FS);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd6:	60fb      	str	r3, [r7, #12]
		temp_reg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7a9b      	ldrb	r3, [r3, #10]
 8000bdc:	039b      	lsls	r3, r3, #14
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = temp_reg;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	61da      	str	r2, [r3, #28]


	// Configure the rise time for I2C pins through TRISE
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <I2C_Init+0x100>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d109      	bne.n	8000c0c <I2C_Init+0xcc>
		temp_reg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000bf8:	f7ff fecc 	bl	8000994 <RCC_GetPCLK1Value>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <I2C_Init+0xfc>)
 8000c00:	fba3 2302 	umull	r2, r3, r3, r2
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	3301      	adds	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e00d      	b.n	8000c28 <I2C_Init+0xe8>
	}
	else {
		temp_reg = ((RCC_GetPCLK1Value() * 300) / 1000000000U + 1);
 8000c0c:	f7ff fec2 	bl	8000994 <RCC_GetPCLK1Value>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c16:	fb03 f302 	mul.w	r3, r3, r2
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <I2C_Init+0x104>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	09db      	lsrs	r3, r3, #7
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (temp_reg & 0x3F);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c32:	621a      	str	r2, [r3, #32]
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	000186a0 	.word	0x000186a0
 8000c44:	00044b83 	.word	0x00044b83

08000c48 <I2C_PeripheralControl>:
 * desc: enables or disables the I2C peripheral (which enables all I2C devices?)
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == ENABLE) {
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d106      	bne.n	8000c68 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000c66:	e005      	b.n	8000c74 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 0201 	bic.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <I2C_SlaveSendData>:
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE) {
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
	}
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000c8c:	78fa      	ldrb	r2, [r7, #3]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2C->DR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <I2C_IRQInterruptConfig>:
 * desc: enables or disables a specific interrupt for a peripheral function
 * input1: a number describing which interrupt to enable
 * input2: an flag for disabling or enabling an NVIC reg
 * output: none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enable_flag) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	71bb      	strb	r3, [r7, #6]
	if (enable_flag == ENABLE) {
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d133      	bne.n	8000d36 <I2C_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b1f      	cmp	r3, #31
 8000cd2:	d80a      	bhi.n	8000cea <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <I2C_IRQInterruptConfig+0xf4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4a32      	ldr	r2, [pc, #200]	; (8000dac <I2C_IRQInterruptConfig+0xf4>)
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000ce8:	e059      	b.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b1f      	cmp	r3, #31
 8000cee:	d90f      	bls.n	8000d10 <I2C_IRQInterruptConfig+0x58>
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf4:	d80c      	bhi.n	8000d10 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <I2C_IRQInterruptConfig+0xf8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	f002 021f 	and.w	r2, r2, #31
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	4611      	mov	r1, r2
 8000d08:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <I2C_IRQInterruptConfig+0xf8>)
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e046      	b.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b3f      	cmp	r3, #63	; 0x3f
 8000d14:	d943      	bls.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b5f      	cmp	r3, #95	; 0x5f
 8000d1a:	d840      	bhi.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <I2C_IRQInterruptConfig+0xfc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d26:	2101      	movs	r1, #1
 8000d28:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <I2C_IRQInterruptConfig+0xfc>)
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	e033      	b.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b1f      	cmp	r3, #31
 8000d3a:	d80a      	bhi.n	8000d52 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <I2C_IRQInterruptConfig+0x100>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	2101      	movs	r1, #1
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <I2C_IRQInterruptConfig+0x100>)
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	e025      	b.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d90f      	bls.n	8000d78 <I2C_IRQInterruptConfig+0xc0>
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d5c:	d80c      	bhi.n	8000d78 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <I2C_IRQInterruptConfig+0x104>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	f002 021f 	and.w	r2, r2, #31
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <I2C_IRQInterruptConfig+0x104>)
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e012      	b.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7c:	d90f      	bls.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b5f      	cmp	r3, #95	; 0x5f
 8000d82:	d80c      	bhi.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <I2C_IRQInterruptConfig+0x108>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d8e:	2101      	movs	r1, #1
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	4611      	mov	r1, r2
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <I2C_IRQInterruptConfig+0x108>)
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	e7ff      	b.n	8000d9e <I2C_IRQInterruptConfig+0xe6>
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000e104 	.word	0xe000e104
 8000db4:	e000e108 	.word	0xe000e108
 8000db8:	e000e180 	.word	0xe000e180
 8000dbc:	e000e184 	.word	0xe000e184
 8000dc0:	e000e188 	.word	0xe000e188

08000dc4 <I2C_EV_IRQHandling>:
 * I2C EV IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C interrupt events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint32_t ITEVTEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd6:	613b      	str	r3, [r7, #16]
	uint32_t ITBUFEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]

	// check SB
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by SB event
	// relevant only in master mode
	if (ITEVTEN_val && temp) {
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01b      	beq.n	8000e32 <I2C_EV_IRQHandling+0x6e>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d018      	beq.n	8000e32 <I2C_EV_IRQHandling+0x6e>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d108      	bne.n	8000e1a <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7f5b      	ldrb	r3, [r3, #29]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f000 fa6c 	bl	80012f0 <I2C_ExecuteAddressPhaseWrite>
 8000e18:	e00b      	b.n	8000e32 <I2C_EV_IRQHandling+0x6e>
		}
		else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7f1b      	ldrb	r3, [r3, #28]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d107      	bne.n	8000e32 <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7f5b      	ldrb	r3, [r3, #29]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f000 fa75 	bl	800131c <I2C_ExecuteAddressPhaseRead>
		}
	}

	// check ADDR
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the ADDR event
	// master mode : address is sent
	// slave mode: address matched with own address
	if (ITEVTEN_val && temp) {
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <I2C_EV_IRQHandling+0x8c>
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <I2C_EV_IRQHandling+0x8c>
		// this function will handle the case of receiving the last byte
		I2C_ClearADDRFlag(pI2CHandle);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 fa7c 	bl	8001348 <I2C_ClearADDRFlag>
	}

	// check BTF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the BTF event. Note that this event will only be triggered
	// from a transmission
	if (ITEVTEN_val && temp) {
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d021      	beq.n	8000ea6 <I2C_EV_IRQHandling+0xe2>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d01e      	beq.n	8000ea6 <I2C_EV_IRQHandling+0xe2>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7f1b      	ldrb	r3, [r3, #28]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d11a      	bne.n	8000ea6 <I2C_EV_IRQHandling+0xe2>
			if (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d013      	beq.n	8000ea6 <I2C_EV_IRQHandling+0xe2>
				if (pI2CHandle->TxLen == 0) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10f      	bne.n	8000ea6 <I2C_EV_IRQHandling+0xe2>
					// Closing out an interrupt based data transmission requires 3 different steps.
					// 1. Generate the stop condition
					if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7fdb      	ldrb	r3, [r3, #31]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <I2C_EV_IRQHandling+0xd4>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f962 	bl	800115c <I2C_GenerateStopCondition>
					// 2. Reset the handle struct
					I2C_CloseSendData(pI2CHandle);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f96f 	bl	800117c <I2C_CloseSendData>
					// 3. Notify the application that the transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fa4b 	bl	800033c <I2C_ApplicationEventCallback>
			} else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {}
		}
	}

	// check STOPF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the STOPF event. This will only be generated by the slave
	if (ITEVTEN_val && temp) {
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00c      	beq.n	8000ed2 <I2C_EV_IRQHandling+0x10e>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <I2C_EV_IRQHandling+0x10e>
		// to clear stop we need to read from SR1 and write to CR1. SR1 was already read above so we will write to SR1 here
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	601a      	str	r2, [r3, #0]
		// notify application about STOP
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000eca:	2102      	movs	r1, #2
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fa35 	bl	800033c <I2C_ApplicationEventCallback>
	}

	// check TxE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000edc:	60bb      	str	r3, [r7, #8]
	// handle the TxE interrupt event
	// interrupt latency delay compensation?
	for (int i=0; i<150; i++) {}
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e002      	b.n	8000eea <I2C_EV_IRQHandling+0x126>
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2b95      	cmp	r3, #149	; 0x95
 8000eee:	ddf9      	ble.n	8000ee4 <I2C_EV_IRQHandling+0x120>
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d01f      	beq.n	8000f36 <I2C_EV_IRQHandling+0x172>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d01c      	beq.n	8000f36 <I2C_EV_IRQHandling+0x172>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d019      	beq.n	8000f36 <I2C_EV_IRQHandling+0x172>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <I2C_EV_IRQHandling+0x15c>
			if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7f1b      	ldrb	r3, [r3, #28]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10e      	bne.n	8000f36 <I2C_EV_IRQHandling+0x172>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f980 	bl	800121e <I2C_MasterHandleTXEInterrupt>
 8000f1e:	e00a      	b.n	8000f36 <I2C_EV_IRQHandling+0x172>
			}
		}
		else {
			// slave
			// validate that the slave is transmitter mode as determined by the address command byte
			if (pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <I2C_EV_IRQHandling+0x172>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000f2e:	2108      	movs	r1, #8
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fa03 	bl	800033c <I2C_ApplicationEventCallback>
		}
	}

	// check RxNE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	60bb      	str	r3, [r7, #8]
	// handle the RxNE interrupt event
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01f      	beq.n	8000f88 <I2C_EV_IRQHandling+0x1c4>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01c      	beq.n	8000f88 <I2C_EV_IRQHandling+0x1c4>
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d019      	beq.n	8000f88 <I2C_EV_IRQHandling+0x1c4>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d007      	beq.n	8000f72 <I2C_EV_IRQHandling+0x1ae>
			// device is master
			// RXNE flag is set
			if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7f1b      	ldrb	r3, [r3, #28]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d10e      	bne.n	8000f88 <I2C_EV_IRQHandling+0x1c4>
				I2C_MasterHandleRNXEInterrupt(pI2CHandle);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f975 	bl	800125a <I2C_MasterHandleRNXEInterrupt>
			// ensure the slave is in receiver mode
			if (!(pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA)))
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		}
	}
}
 8000f70:	e00a      	b.n	8000f88 <I2C_EV_IRQHandling+0x1c4>
			if (!(pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA)))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <I2C_EV_IRQHandling+0x1c4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000f80:	2109      	movs	r1, #9
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff f9da 	bl	800033c <I2C_ApplicationEventCallback>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <I2C_ER_IRQHandling>:
 * I2C ER IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C error events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	// for error handling clear the status bit and inform the application
	uint8_t ITERREN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITERREN);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]

	// check BERR
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BERR);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00e      	beq.n	8000fdc <I2C_ER_IRQHandling+0x4c>
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00b      	beq.n	8000fdc <I2C_ER_IRQHandling+0x4c>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd2:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff f9b0 	bl	800033c <I2C_ApplicationEventCallback>
	}
	// check ARLO
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ARLO);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00e      	beq.n	8001012 <I2C_ER_IRQHandling+0x82>
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <I2C_ER_IRQHandling+0x82>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001008:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 800100a:	2104      	movs	r1, #4
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff f995 	bl	800033c <I2C_ApplicationEventCallback>
	}
	// check AF, ack failure
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_AF);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101c:	b2da      	uxtb	r2, r3
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	4313      	orrs	r3, r2
 8001022:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00e      	beq.n	8001048 <I2C_ER_IRQHandling+0xb8>
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <I2C_ER_IRQHandling+0xb8>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800103e:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8001040:	2105      	movs	r1, #5
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff f97a 	bl	800033c <I2C_ApplicationEventCallback>
	}
	// check OVR, overrun/underrun
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_OVR);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001052:	b2da      	uxtb	r2, r3
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	4313      	orrs	r3, r2
 8001058:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <I2C_ER_IRQHandling+0xee>
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <I2C_ER_IRQHandling+0xee>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001074:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 8001076:	2106      	movs	r1, #6
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f95f 	bl	800033c <I2C_ApplicationEventCallback>
	}
	// check TIMEOUT
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TIMEOUT);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001088:	b2da      	uxtb	r2, r3
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	4313      	orrs	r3, r2
 800108e:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <I2C_ER_IRQHandling+0x124>
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <I2C_ER_IRQHandling+0x124>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010aa:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 80010ac:	2107      	movs	r1, #7
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff f944 	bl	800033c <I2C_ApplicationEventCallback>
	}
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <I2C_SlaveConfigureCallBackEvents>:

void I2C_SlaveConfigureCallBackEvents(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d112      	bne.n	80010f4 <I2C_SlaveConfigureCallBackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	605a      	str	r2, [r3, #4]
	} else {
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 80010f2:	e011      	b.n	8001118 <I2C_SlaveConfigureCallBackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	605a      	str	r2, [r3, #4]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <I2C_ManageAcking>:
 * desc: handles the enabling/disabling of I2C ACKing
 * input1: I2C register pointer mapped to an I2C peripheral
 * input2: a flag for enabling/disabling
 * output: none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == I2C_ACK_ENABLE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d106      	bne.n	8001144 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001142:	e005      	b.n	8001150 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <I2C_GenerateStopCondition>:
 * I2C Generate Stop Condition
 * desc: helper function that generates a stop condition
 * input1: pointer to the I2C peripheral addr
 * output: none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <I2C_CloseSendData>:
 * I2C Close Send Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001192:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011a2:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <I2C_CloseReceiveData>:
 * I2C Close Receive Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle) {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011d8:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011e8:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	779a      	strb	r2, [r3, #30]
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7a5b      	ldrb	r3, [r3, #9]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d105      	bne.n	8001216 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff87 	bl	8001124 <I2C_ManageAcking>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <I2C_MasterHandleTXEInterrupt>:
 * I2C Master Handle TXE Interrupt
 * desc: interrupt function that handles I2C data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle) {
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
	if (pI2CHandle->TxLen > 0) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00f      	beq.n	800124e <I2C_MasterHandleTXEInterrupt+0x30>
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	611a      	str	r2, [r3, #16]
		pI2CHandle->pTxBuffer++;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen--;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	615a      	str	r2, [r3, #20]
	}
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <I2C_MasterHandleRNXEInterrupt>:
 * I2C Master Handle RNXE Interrupt
 * desc: interrupt function that handles I2C data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleRNXEInterrupt(I2C_Handle_t *pI2CHandle) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	// two cases: data reception and the last byte data reception
	if (pI2CHandle->RxSize == 1) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7f9b      	ldrb	r3, [r3, #30]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10b      	bne.n	8001282 <I2C_MasterHandleRNXEInterrupt+0x28>
			// the clear address function will handle the addr clearing before this function is called
			// so ack disable is not required here
	//		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
			*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
			pI2CHandle->RxLen--;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
	}
	if (pI2CHandle->RxSize > 1) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7f9b      	ldrb	r3, [r3, #30]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d91a      	bls.n	80012c0 <I2C_MasterHandleRNXEInterrupt+0x66>
		if (pI2CHandle->RxLen == 2) I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d105      	bne.n	800129e <I2C_MasterHandleRNXEInterrupt+0x44>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff43 	bl	8001124 <I2C_ManageAcking>
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
	}
	// if we are at the end of the transmission, close the transmission
	if (pI2CHandle->RxLen == 0) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10f      	bne.n	80012e8 <I2C_MasterHandleRNXEInterrupt+0x8e>
		// generate stop
		if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7fdb      	ldrb	r3, [r3, #31]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d104      	bne.n	80012da <I2C_MasterHandleRNXEInterrupt+0x80>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff41 	bl	800115c <I2C_GenerateStopCondition>
		// close I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff71 	bl	80011c2 <I2C_CloseReceiveData>
		// notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 80012e0:	2101      	movs	r1, #1
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff f82a 	bl	800033c <I2C_ApplicationEventCallback>
	}
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <I2C_ExecuteAddressPhaseWrite>:
 * desc: helper function that transmits the slave addr followed by a write command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	70fb      	strb	r3, [r7, #3]
	slave_addr &= ~(1);
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 800130a:	78fa      	ldrb	r2, [r7, #3]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	611a      	str	r2, [r3, #16]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <I2C_ExecuteAddressPhaseRead>:
 * desc: helper function that transmits the slave addr followed by a read command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	70fb      	strb	r3, [r7, #3]
	slave_addr |= 1;
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	611a      	str	r2, [r3, #16]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <I2C_ClearADDRFlag>:
 * I2C Clear Address Flag
 * desc: helper function that clears the ADDR bit in the in the SR1 reg
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint32_t clear_read = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
	// check if device is master or slave mode
	// master mode conditional
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d01f      	beq.n	80013a2 <I2C_ClearADDRFlag+0x5a>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7f1b      	ldrb	r3, [r3, #28]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d112      	bne.n	8001390 <I2C_ClearADDRFlag+0x48>
			if (pI2CHandle->RxSize == 1) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7f9b      	ldrb	r3, [r3, #30]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d11f      	bne.n	80013b2 <I2C_ClearADDRFlag+0x6a>
				// disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fed3 	bl	8001124 <I2C_ManageAcking>
				// then clear addr
				// SR->ADDR is cleared by reading SR1 and SR2
				clear_read = pI2CHandle->pI2Cx->SR1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	60fb      	str	r3, [r7, #12]
				clear_read = pI2CHandle->pI2Cx->SR2;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	60fb      	str	r3, [r7, #12]
	} else { // slave mode conditional
		clear_read = pI2CHandle->pI2Cx->SR1;
		clear_read = pI2CHandle->pI2Cx->SR2;
		(void)clear_read;
	}
}
 800138e:	e010      	b.n	80013b2 <I2C_ClearADDRFlag+0x6a>
			clear_read = pI2CHandle->pI2Cx->SR1;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	60fb      	str	r3, [r7, #12]
			clear_read = pI2CHandle->pI2Cx->SR2;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	60fb      	str	r3, [r7, #12]
}
 80013a0:	e007      	b.n	80013b2 <I2C_ClearADDRFlag+0x6a>
		clear_read = pI2CHandle->pI2Cx->SR1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	60fb      	str	r3, [r7, #12]
		clear_read = pI2CHandle->pI2Cx->SR2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	60fb      	str	r3, [r7, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013e6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80013ea:	f000 f817 	bl	800141c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ee:	f7fe ff6d 	bl	80002cc <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   r0, =_estack
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001400:	080020b8 	.word	0x080020b8
  ldr r2, =_sbss
 8001404:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001408:	20000174 	.word	0x20000174

0800140c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <__errno>:
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <__errno+0x8>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000020 	.word	0x20000020

0800141c <__libc_init_array>:
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	4e0d      	ldr	r6, [pc, #52]	; (8001454 <__libc_init_array+0x38>)
 8001420:	4c0d      	ldr	r4, [pc, #52]	; (8001458 <__libc_init_array+0x3c>)
 8001422:	1ba4      	subs	r4, r4, r6
 8001424:	10a4      	asrs	r4, r4, #2
 8001426:	2500      	movs	r5, #0
 8001428:	42a5      	cmp	r5, r4
 800142a:	d109      	bne.n	8001440 <__libc_init_array+0x24>
 800142c:	4e0b      	ldr	r6, [pc, #44]	; (800145c <__libc_init_array+0x40>)
 800142e:	4c0c      	ldr	r4, [pc, #48]	; (8001460 <__libc_init_array+0x44>)
 8001430:	f000 fdda 	bl	8001fe8 <_init>
 8001434:	1ba4      	subs	r4, r4, r6
 8001436:	10a4      	asrs	r4, r4, #2
 8001438:	2500      	movs	r5, #0
 800143a:	42a5      	cmp	r5, r4
 800143c:	d105      	bne.n	800144a <__libc_init_array+0x2e>
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001444:	4798      	blx	r3
 8001446:	3501      	adds	r5, #1
 8001448:	e7ee      	b.n	8001428 <__libc_init_array+0xc>
 800144a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144e:	4798      	blx	r3
 8001450:	3501      	adds	r5, #1
 8001452:	e7f2      	b.n	800143a <__libc_init_array+0x1e>
 8001454:	080020b0 	.word	0x080020b0
 8001458:	080020b0 	.word	0x080020b0
 800145c:	080020b0 	.word	0x080020b0
 8001460:	080020b4 	.word	0x080020b4

08001464 <memset>:
 8001464:	4402      	add	r2, r0
 8001466:	4603      	mov	r3, r0
 8001468:	4293      	cmp	r3, r2
 800146a:	d100      	bne.n	800146e <memset+0xa>
 800146c:	4770      	bx	lr
 800146e:	f803 1b01 	strb.w	r1, [r3], #1
 8001472:	e7f9      	b.n	8001468 <memset+0x4>

08001474 <_puts_r>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	460e      	mov	r6, r1
 8001478:	4605      	mov	r5, r0
 800147a:	b118      	cbz	r0, 8001484 <_puts_r+0x10>
 800147c:	6983      	ldr	r3, [r0, #24]
 800147e:	b90b      	cbnz	r3, 8001484 <_puts_r+0x10>
 8001480:	f000 fa0c 	bl	800189c <__sinit>
 8001484:	69ab      	ldr	r3, [r5, #24]
 8001486:	68ac      	ldr	r4, [r5, #8]
 8001488:	b913      	cbnz	r3, 8001490 <_puts_r+0x1c>
 800148a:	4628      	mov	r0, r5
 800148c:	f000 fa06 	bl	800189c <__sinit>
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <_puts_r+0xac>)
 8001492:	429c      	cmp	r4, r3
 8001494:	d117      	bne.n	80014c6 <_puts_r+0x52>
 8001496:	686c      	ldr	r4, [r5, #4]
 8001498:	89a3      	ldrh	r3, [r4, #12]
 800149a:	071b      	lsls	r3, r3, #28
 800149c:	d51d      	bpl.n	80014da <_puts_r+0x66>
 800149e:	6923      	ldr	r3, [r4, #16]
 80014a0:	b1db      	cbz	r3, 80014da <_puts_r+0x66>
 80014a2:	3e01      	subs	r6, #1
 80014a4:	68a3      	ldr	r3, [r4, #8]
 80014a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014aa:	3b01      	subs	r3, #1
 80014ac:	60a3      	str	r3, [r4, #8]
 80014ae:	b9e9      	cbnz	r1, 80014ec <_puts_r+0x78>
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da2e      	bge.n	8001512 <_puts_r+0x9e>
 80014b4:	4622      	mov	r2, r4
 80014b6:	210a      	movs	r1, #10
 80014b8:	4628      	mov	r0, r5
 80014ba:	f000 f83f 	bl	800153c <__swbuf_r>
 80014be:	3001      	adds	r0, #1
 80014c0:	d011      	beq.n	80014e6 <_puts_r+0x72>
 80014c2:	200a      	movs	r0, #10
 80014c4:	e011      	b.n	80014ea <_puts_r+0x76>
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <_puts_r+0xb0>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d101      	bne.n	80014d0 <_puts_r+0x5c>
 80014cc:	68ac      	ldr	r4, [r5, #8]
 80014ce:	e7e3      	b.n	8001498 <_puts_r+0x24>
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_puts_r+0xb4>)
 80014d2:	429c      	cmp	r4, r3
 80014d4:	bf08      	it	eq
 80014d6:	68ec      	ldreq	r4, [r5, #12]
 80014d8:	e7de      	b.n	8001498 <_puts_r+0x24>
 80014da:	4621      	mov	r1, r4
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 f87f 	bl	80015e0 <__swsetup_r>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d0dd      	beq.n	80014a2 <_puts_r+0x2e>
 80014e6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da04      	bge.n	80014fa <_puts_r+0x86>
 80014f0:	69a2      	ldr	r2, [r4, #24]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dc06      	bgt.n	8001504 <_puts_r+0x90>
 80014f6:	290a      	cmp	r1, #10
 80014f8:	d004      	beq.n	8001504 <_puts_r+0x90>
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	6022      	str	r2, [r4, #0]
 8001500:	7019      	strb	r1, [r3, #0]
 8001502:	e7cf      	b.n	80014a4 <_puts_r+0x30>
 8001504:	4622      	mov	r2, r4
 8001506:	4628      	mov	r0, r5
 8001508:	f000 f818 	bl	800153c <__swbuf_r>
 800150c:	3001      	adds	r0, #1
 800150e:	d1c9      	bne.n	80014a4 <_puts_r+0x30>
 8001510:	e7e9      	b.n	80014e6 <_puts_r+0x72>
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	200a      	movs	r0, #10
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	6022      	str	r2, [r4, #0]
 800151a:	7018      	strb	r0, [r3, #0]
 800151c:	e7e5      	b.n	80014ea <_puts_r+0x76>
 800151e:	bf00      	nop
 8001520:	08002070 	.word	0x08002070
 8001524:	08002090 	.word	0x08002090
 8001528:	08002050 	.word	0x08002050

0800152c <puts>:
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <puts+0xc>)
 800152e:	4601      	mov	r1, r0
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	f7ff bf9f 	b.w	8001474 <_puts_r>
 8001536:	bf00      	nop
 8001538:	20000020 	.word	0x20000020

0800153c <__swbuf_r>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	460e      	mov	r6, r1
 8001540:	4614      	mov	r4, r2
 8001542:	4605      	mov	r5, r0
 8001544:	b118      	cbz	r0, 800154e <__swbuf_r+0x12>
 8001546:	6983      	ldr	r3, [r0, #24]
 8001548:	b90b      	cbnz	r3, 800154e <__swbuf_r+0x12>
 800154a:	f000 f9a7 	bl	800189c <__sinit>
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <__swbuf_r+0x98>)
 8001550:	429c      	cmp	r4, r3
 8001552:	d12a      	bne.n	80015aa <__swbuf_r+0x6e>
 8001554:	686c      	ldr	r4, [r5, #4]
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	60a3      	str	r3, [r4, #8]
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	071a      	lsls	r2, r3, #28
 800155e:	d52e      	bpl.n	80015be <__swbuf_r+0x82>
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	b363      	cbz	r3, 80015be <__swbuf_r+0x82>
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	1ac0      	subs	r0, r0, r3
 800156a:	6963      	ldr	r3, [r4, #20]
 800156c:	b2f6      	uxtb	r6, r6
 800156e:	4283      	cmp	r3, r0
 8001570:	4637      	mov	r7, r6
 8001572:	dc04      	bgt.n	800157e <__swbuf_r+0x42>
 8001574:	4621      	mov	r1, r4
 8001576:	4628      	mov	r0, r5
 8001578:	f000 f926 	bl	80017c8 <_fflush_r>
 800157c:	bb28      	cbnz	r0, 80015ca <__swbuf_r+0x8e>
 800157e:	68a3      	ldr	r3, [r4, #8]
 8001580:	3b01      	subs	r3, #1
 8001582:	60a3      	str	r3, [r4, #8]
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	6022      	str	r2, [r4, #0]
 800158a:	701e      	strb	r6, [r3, #0]
 800158c:	6963      	ldr	r3, [r4, #20]
 800158e:	3001      	adds	r0, #1
 8001590:	4283      	cmp	r3, r0
 8001592:	d004      	beq.n	800159e <__swbuf_r+0x62>
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	07db      	lsls	r3, r3, #31
 8001598:	d519      	bpl.n	80015ce <__swbuf_r+0x92>
 800159a:	2e0a      	cmp	r6, #10
 800159c:	d117      	bne.n	80015ce <__swbuf_r+0x92>
 800159e:	4621      	mov	r1, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f911 	bl	80017c8 <_fflush_r>
 80015a6:	b190      	cbz	r0, 80015ce <__swbuf_r+0x92>
 80015a8:	e00f      	b.n	80015ca <__swbuf_r+0x8e>
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <__swbuf_r+0x9c>)
 80015ac:	429c      	cmp	r4, r3
 80015ae:	d101      	bne.n	80015b4 <__swbuf_r+0x78>
 80015b0:	68ac      	ldr	r4, [r5, #8]
 80015b2:	e7d0      	b.n	8001556 <__swbuf_r+0x1a>
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <__swbuf_r+0xa0>)
 80015b6:	429c      	cmp	r4, r3
 80015b8:	bf08      	it	eq
 80015ba:	68ec      	ldreq	r4, [r5, #12]
 80015bc:	e7cb      	b.n	8001556 <__swbuf_r+0x1a>
 80015be:	4621      	mov	r1, r4
 80015c0:	4628      	mov	r0, r5
 80015c2:	f000 f80d 	bl	80015e0 <__swsetup_r>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d0cc      	beq.n	8001564 <__swbuf_r+0x28>
 80015ca:	f04f 37ff 	mov.w	r7, #4294967295
 80015ce:	4638      	mov	r0, r7
 80015d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08002070 	.word	0x08002070
 80015d8:	08002090 	.word	0x08002090
 80015dc:	08002050 	.word	0x08002050

080015e0 <__swsetup_r>:
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <__swsetup_r+0xcc>)
 80015e2:	b570      	push	{r4, r5, r6, lr}
 80015e4:	681d      	ldr	r5, [r3, #0]
 80015e6:	4606      	mov	r6, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	b125      	cbz	r5, 80015f6 <__swsetup_r+0x16>
 80015ec:	69ab      	ldr	r3, [r5, #24]
 80015ee:	b913      	cbnz	r3, 80015f6 <__swsetup_r+0x16>
 80015f0:	4628      	mov	r0, r5
 80015f2:	f000 f953 	bl	800189c <__sinit>
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <__swsetup_r+0xd0>)
 80015f8:	429c      	cmp	r4, r3
 80015fa:	d10f      	bne.n	800161c <__swsetup_r+0x3c>
 80015fc:	686c      	ldr	r4, [r5, #4]
 80015fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001602:	b29a      	uxth	r2, r3
 8001604:	0715      	lsls	r5, r2, #28
 8001606:	d42c      	bmi.n	8001662 <__swsetup_r+0x82>
 8001608:	06d0      	lsls	r0, r2, #27
 800160a:	d411      	bmi.n	8001630 <__swsetup_r+0x50>
 800160c:	2209      	movs	r2, #9
 800160e:	6032      	str	r2, [r6, #0]
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	81a3      	strh	r3, [r4, #12]
 8001616:	f04f 30ff 	mov.w	r0, #4294967295
 800161a:	e03e      	b.n	800169a <__swsetup_r+0xba>
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <__swsetup_r+0xd4>)
 800161e:	429c      	cmp	r4, r3
 8001620:	d101      	bne.n	8001626 <__swsetup_r+0x46>
 8001622:	68ac      	ldr	r4, [r5, #8]
 8001624:	e7eb      	b.n	80015fe <__swsetup_r+0x1e>
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <__swsetup_r+0xd8>)
 8001628:	429c      	cmp	r4, r3
 800162a:	bf08      	it	eq
 800162c:	68ec      	ldreq	r4, [r5, #12]
 800162e:	e7e6      	b.n	80015fe <__swsetup_r+0x1e>
 8001630:	0751      	lsls	r1, r2, #29
 8001632:	d512      	bpl.n	800165a <__swsetup_r+0x7a>
 8001634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001636:	b141      	cbz	r1, 800164a <__swsetup_r+0x6a>
 8001638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800163c:	4299      	cmp	r1, r3
 800163e:	d002      	beq.n	8001646 <__swsetup_r+0x66>
 8001640:	4630      	mov	r0, r6
 8001642:	f000 fa19 	bl	8001a78 <_free_r>
 8001646:	2300      	movs	r3, #0
 8001648:	6363      	str	r3, [r4, #52]	; 0x34
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001650:	81a3      	strh	r3, [r4, #12]
 8001652:	2300      	movs	r3, #0
 8001654:	6063      	str	r3, [r4, #4]
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	6023      	str	r3, [r4, #0]
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	81a3      	strh	r3, [r4, #12]
 8001662:	6923      	ldr	r3, [r4, #16]
 8001664:	b94b      	cbnz	r3, 800167a <__swsetup_r+0x9a>
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	d003      	beq.n	800167a <__swsetup_r+0x9a>
 8001672:	4621      	mov	r1, r4
 8001674:	4630      	mov	r0, r6
 8001676:	f000 f9bf 	bl	80019f8 <__smakebuf_r>
 800167a:	89a2      	ldrh	r2, [r4, #12]
 800167c:	f012 0301 	ands.w	r3, r2, #1
 8001680:	d00c      	beq.n	800169c <__swsetup_r+0xbc>
 8001682:	2300      	movs	r3, #0
 8001684:	60a3      	str	r3, [r4, #8]
 8001686:	6963      	ldr	r3, [r4, #20]
 8001688:	425b      	negs	r3, r3
 800168a:	61a3      	str	r3, [r4, #24]
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	b953      	cbnz	r3, 80016a6 <__swsetup_r+0xc6>
 8001690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001694:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001698:	d1ba      	bne.n	8001610 <__swsetup_r+0x30>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	0792      	lsls	r2, r2, #30
 800169e:	bf58      	it	pl
 80016a0:	6963      	ldrpl	r3, [r4, #20]
 80016a2:	60a3      	str	r3, [r4, #8]
 80016a4:	e7f2      	b.n	800168c <__swsetup_r+0xac>
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7f7      	b.n	800169a <__swsetup_r+0xba>
 80016aa:	bf00      	nop
 80016ac:	20000020 	.word	0x20000020
 80016b0:	08002070 	.word	0x08002070
 80016b4:	08002090 	.word	0x08002090
 80016b8:	08002050 	.word	0x08002050

080016bc <__sflush_r>:
 80016bc:	898a      	ldrh	r2, [r1, #12]
 80016be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c2:	4605      	mov	r5, r0
 80016c4:	0710      	lsls	r0, r2, #28
 80016c6:	460c      	mov	r4, r1
 80016c8:	d458      	bmi.n	800177c <__sflush_r+0xc0>
 80016ca:	684b      	ldr	r3, [r1, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dc05      	bgt.n	80016dc <__sflush_r+0x20>
 80016d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dc02      	bgt.n	80016dc <__sflush_r+0x20>
 80016d6:	2000      	movs	r0, #0
 80016d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d0f9      	beq.n	80016d6 <__sflush_r+0x1a>
 80016e2:	2300      	movs	r3, #0
 80016e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016e8:	682f      	ldr	r7, [r5, #0]
 80016ea:	6a21      	ldr	r1, [r4, #32]
 80016ec:	602b      	str	r3, [r5, #0]
 80016ee:	d032      	beq.n	8001756 <__sflush_r+0x9a>
 80016f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	075a      	lsls	r2, r3, #29
 80016f6:	d505      	bpl.n	8001704 <__sflush_r+0x48>
 80016f8:	6863      	ldr	r3, [r4, #4]
 80016fa:	1ac0      	subs	r0, r0, r3
 80016fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016fe:	b10b      	cbz	r3, 8001704 <__sflush_r+0x48>
 8001700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001702:	1ac0      	subs	r0, r0, r3
 8001704:	2300      	movs	r3, #0
 8001706:	4602      	mov	r2, r0
 8001708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800170a:	6a21      	ldr	r1, [r4, #32]
 800170c:	4628      	mov	r0, r5
 800170e:	47b0      	blx	r6
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	89a3      	ldrh	r3, [r4, #12]
 8001714:	d106      	bne.n	8001724 <__sflush_r+0x68>
 8001716:	6829      	ldr	r1, [r5, #0]
 8001718:	291d      	cmp	r1, #29
 800171a:	d848      	bhi.n	80017ae <__sflush_r+0xf2>
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <__sflush_r+0x108>)
 800171e:	40ca      	lsrs	r2, r1
 8001720:	07d6      	lsls	r6, r2, #31
 8001722:	d544      	bpl.n	80017ae <__sflush_r+0xf2>
 8001724:	2200      	movs	r2, #0
 8001726:	6062      	str	r2, [r4, #4]
 8001728:	04d9      	lsls	r1, r3, #19
 800172a:	6922      	ldr	r2, [r4, #16]
 800172c:	6022      	str	r2, [r4, #0]
 800172e:	d504      	bpl.n	800173a <__sflush_r+0x7e>
 8001730:	1c42      	adds	r2, r0, #1
 8001732:	d101      	bne.n	8001738 <__sflush_r+0x7c>
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	b903      	cbnz	r3, 800173a <__sflush_r+0x7e>
 8001738:	6560      	str	r0, [r4, #84]	; 0x54
 800173a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800173c:	602f      	str	r7, [r5, #0]
 800173e:	2900      	cmp	r1, #0
 8001740:	d0c9      	beq.n	80016d6 <__sflush_r+0x1a>
 8001742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001746:	4299      	cmp	r1, r3
 8001748:	d002      	beq.n	8001750 <__sflush_r+0x94>
 800174a:	4628      	mov	r0, r5
 800174c:	f000 f994 	bl	8001a78 <_free_r>
 8001750:	2000      	movs	r0, #0
 8001752:	6360      	str	r0, [r4, #52]	; 0x34
 8001754:	e7c0      	b.n	80016d8 <__sflush_r+0x1c>
 8001756:	2301      	movs	r3, #1
 8001758:	4628      	mov	r0, r5
 800175a:	47b0      	blx	r6
 800175c:	1c41      	adds	r1, r0, #1
 800175e:	d1c8      	bne.n	80016f2 <__sflush_r+0x36>
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0c5      	beq.n	80016f2 <__sflush_r+0x36>
 8001766:	2b1d      	cmp	r3, #29
 8001768:	d001      	beq.n	800176e <__sflush_r+0xb2>
 800176a:	2b16      	cmp	r3, #22
 800176c:	d101      	bne.n	8001772 <__sflush_r+0xb6>
 800176e:	602f      	str	r7, [r5, #0]
 8001770:	e7b1      	b.n	80016d6 <__sflush_r+0x1a>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001778:	81a3      	strh	r3, [r4, #12]
 800177a:	e7ad      	b.n	80016d8 <__sflush_r+0x1c>
 800177c:	690f      	ldr	r7, [r1, #16]
 800177e:	2f00      	cmp	r7, #0
 8001780:	d0a9      	beq.n	80016d6 <__sflush_r+0x1a>
 8001782:	0793      	lsls	r3, r2, #30
 8001784:	680e      	ldr	r6, [r1, #0]
 8001786:	bf08      	it	eq
 8001788:	694b      	ldreq	r3, [r1, #20]
 800178a:	600f      	str	r7, [r1, #0]
 800178c:	bf18      	it	ne
 800178e:	2300      	movne	r3, #0
 8001790:	eba6 0807 	sub.w	r8, r6, r7
 8001794:	608b      	str	r3, [r1, #8]
 8001796:	f1b8 0f00 	cmp.w	r8, #0
 800179a:	dd9c      	ble.n	80016d6 <__sflush_r+0x1a>
 800179c:	4643      	mov	r3, r8
 800179e:	463a      	mov	r2, r7
 80017a0:	6a21      	ldr	r1, [r4, #32]
 80017a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017a4:	4628      	mov	r0, r5
 80017a6:	47b0      	blx	r6
 80017a8:	2800      	cmp	r0, #0
 80017aa:	dc06      	bgt.n	80017ba <__sflush_r+0xfe>
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b2:	81a3      	strh	r3, [r4, #12]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	e78e      	b.n	80016d8 <__sflush_r+0x1c>
 80017ba:	4407      	add	r7, r0
 80017bc:	eba8 0800 	sub.w	r8, r8, r0
 80017c0:	e7e9      	b.n	8001796 <__sflush_r+0xda>
 80017c2:	bf00      	nop
 80017c4:	20400001 	.word	0x20400001

080017c8 <_fflush_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	690b      	ldr	r3, [r1, #16]
 80017cc:	4605      	mov	r5, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	b1db      	cbz	r3, 800180a <_fflush_r+0x42>
 80017d2:	b118      	cbz	r0, 80017dc <_fflush_r+0x14>
 80017d4:	6983      	ldr	r3, [r0, #24]
 80017d6:	b90b      	cbnz	r3, 80017dc <_fflush_r+0x14>
 80017d8:	f000 f860 	bl	800189c <__sinit>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <_fflush_r+0x48>)
 80017de:	429c      	cmp	r4, r3
 80017e0:	d109      	bne.n	80017f6 <_fflush_r+0x2e>
 80017e2:	686c      	ldr	r4, [r5, #4]
 80017e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e8:	b17b      	cbz	r3, 800180a <_fflush_r+0x42>
 80017ea:	4621      	mov	r1, r4
 80017ec:	4628      	mov	r0, r5
 80017ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017f2:	f7ff bf63 	b.w	80016bc <__sflush_r>
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_fflush_r+0x4c>)
 80017f8:	429c      	cmp	r4, r3
 80017fa:	d101      	bne.n	8001800 <_fflush_r+0x38>
 80017fc:	68ac      	ldr	r4, [r5, #8]
 80017fe:	e7f1      	b.n	80017e4 <_fflush_r+0x1c>
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <_fflush_r+0x50>)
 8001802:	429c      	cmp	r4, r3
 8001804:	bf08      	it	eq
 8001806:	68ec      	ldreq	r4, [r5, #12]
 8001808:	e7ec      	b.n	80017e4 <_fflush_r+0x1c>
 800180a:	2000      	movs	r0, #0
 800180c:	bd38      	pop	{r3, r4, r5, pc}
 800180e:	bf00      	nop
 8001810:	08002070 	.word	0x08002070
 8001814:	08002090 	.word	0x08002090
 8001818:	08002050 	.word	0x08002050

0800181c <std>:
 800181c:	2300      	movs	r3, #0
 800181e:	b510      	push	{r4, lr}
 8001820:	4604      	mov	r4, r0
 8001822:	e9c0 3300 	strd	r3, r3, [r0]
 8001826:	6083      	str	r3, [r0, #8]
 8001828:	8181      	strh	r1, [r0, #12]
 800182a:	6643      	str	r3, [r0, #100]	; 0x64
 800182c:	81c2      	strh	r2, [r0, #14]
 800182e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001832:	6183      	str	r3, [r0, #24]
 8001834:	4619      	mov	r1, r3
 8001836:	2208      	movs	r2, #8
 8001838:	305c      	adds	r0, #92	; 0x5c
 800183a:	f7ff fe13 	bl	8001464 <memset>
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <std+0x38>)
 8001840:	6263      	str	r3, [r4, #36]	; 0x24
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <std+0x3c>)
 8001844:	62a3      	str	r3, [r4, #40]	; 0x28
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <std+0x40>)
 8001848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <std+0x44>)
 800184c:	6224      	str	r4, [r4, #32]
 800184e:	6323      	str	r3, [r4, #48]	; 0x30
 8001850:	bd10      	pop	{r4, pc}
 8001852:	bf00      	nop
 8001854:	08001be9 	.word	0x08001be9
 8001858:	08001c0b 	.word	0x08001c0b
 800185c:	08001c43 	.word	0x08001c43
 8001860:	08001c67 	.word	0x08001c67

08001864 <_cleanup_r>:
 8001864:	4901      	ldr	r1, [pc, #4]	; (800186c <_cleanup_r+0x8>)
 8001866:	f000 b885 	b.w	8001974 <_fwalk_reent>
 800186a:	bf00      	nop
 800186c:	080017c9 	.word	0x080017c9

08001870 <__sfmoreglue>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	1e4a      	subs	r2, r1, #1
 8001874:	2568      	movs	r5, #104	; 0x68
 8001876:	4355      	muls	r5, r2
 8001878:	460e      	mov	r6, r1
 800187a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800187e:	f000 f949 	bl	8001b14 <_malloc_r>
 8001882:	4604      	mov	r4, r0
 8001884:	b140      	cbz	r0, 8001898 <__sfmoreglue+0x28>
 8001886:	2100      	movs	r1, #0
 8001888:	e9c0 1600 	strd	r1, r6, [r0]
 800188c:	300c      	adds	r0, #12
 800188e:	60a0      	str	r0, [r4, #8]
 8001890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001894:	f7ff fde6 	bl	8001464 <memset>
 8001898:	4620      	mov	r0, r4
 800189a:	bd70      	pop	{r4, r5, r6, pc}

0800189c <__sinit>:
 800189c:	6983      	ldr	r3, [r0, #24]
 800189e:	b510      	push	{r4, lr}
 80018a0:	4604      	mov	r4, r0
 80018a2:	bb33      	cbnz	r3, 80018f2 <__sinit+0x56>
 80018a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80018a8:	6503      	str	r3, [r0, #80]	; 0x50
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <__sinit+0x58>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <__sinit+0x5c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6282      	str	r2, [r0, #40]	; 0x28
 80018b2:	4298      	cmp	r0, r3
 80018b4:	bf04      	itt	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	6183      	streq	r3, [r0, #24]
 80018ba:	f000 f81f 	bl	80018fc <__sfp>
 80018be:	6060      	str	r0, [r4, #4]
 80018c0:	4620      	mov	r0, r4
 80018c2:	f000 f81b 	bl	80018fc <__sfp>
 80018c6:	60a0      	str	r0, [r4, #8]
 80018c8:	4620      	mov	r0, r4
 80018ca:	f000 f817 	bl	80018fc <__sfp>
 80018ce:	2200      	movs	r2, #0
 80018d0:	60e0      	str	r0, [r4, #12]
 80018d2:	2104      	movs	r1, #4
 80018d4:	6860      	ldr	r0, [r4, #4]
 80018d6:	f7ff ffa1 	bl	800181c <std>
 80018da:	2201      	movs	r2, #1
 80018dc:	2109      	movs	r1, #9
 80018de:	68a0      	ldr	r0, [r4, #8]
 80018e0:	f7ff ff9c 	bl	800181c <std>
 80018e4:	2202      	movs	r2, #2
 80018e6:	2112      	movs	r1, #18
 80018e8:	68e0      	ldr	r0, [r4, #12]
 80018ea:	f7ff ff97 	bl	800181c <std>
 80018ee:	2301      	movs	r3, #1
 80018f0:	61a3      	str	r3, [r4, #24]
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	0800204c 	.word	0x0800204c
 80018f8:	08001865 	.word	0x08001865

080018fc <__sfp>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <__sfp+0x70>)
 8001900:	681e      	ldr	r6, [r3, #0]
 8001902:	69b3      	ldr	r3, [r6, #24]
 8001904:	4607      	mov	r7, r0
 8001906:	b913      	cbnz	r3, 800190e <__sfp+0x12>
 8001908:	4630      	mov	r0, r6
 800190a:	f7ff ffc7 	bl	800189c <__sinit>
 800190e:	3648      	adds	r6, #72	; 0x48
 8001910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001914:	3b01      	subs	r3, #1
 8001916:	d503      	bpl.n	8001920 <__sfp+0x24>
 8001918:	6833      	ldr	r3, [r6, #0]
 800191a:	b133      	cbz	r3, 800192a <__sfp+0x2e>
 800191c:	6836      	ldr	r6, [r6, #0]
 800191e:	e7f7      	b.n	8001910 <__sfp+0x14>
 8001920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001924:	b16d      	cbz	r5, 8001942 <__sfp+0x46>
 8001926:	3468      	adds	r4, #104	; 0x68
 8001928:	e7f4      	b.n	8001914 <__sfp+0x18>
 800192a:	2104      	movs	r1, #4
 800192c:	4638      	mov	r0, r7
 800192e:	f7ff ff9f 	bl	8001870 <__sfmoreglue>
 8001932:	6030      	str	r0, [r6, #0]
 8001934:	2800      	cmp	r0, #0
 8001936:	d1f1      	bne.n	800191c <__sfp+0x20>
 8001938:	230c      	movs	r3, #12
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4604      	mov	r4, r0
 800193e:	4620      	mov	r0, r4
 8001940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <__sfp+0x74>)
 8001944:	6665      	str	r5, [r4, #100]	; 0x64
 8001946:	e9c4 5500 	strd	r5, r5, [r4]
 800194a:	60a5      	str	r5, [r4, #8]
 800194c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001950:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001954:	2208      	movs	r2, #8
 8001956:	4629      	mov	r1, r5
 8001958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800195c:	f7ff fd82 	bl	8001464 <memset>
 8001960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001968:	e7e9      	b.n	800193e <__sfp+0x42>
 800196a:	bf00      	nop
 800196c:	0800204c 	.word	0x0800204c
 8001970:	ffff0001 	.word	0xffff0001

08001974 <_fwalk_reent>:
 8001974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001978:	4680      	mov	r8, r0
 800197a:	4689      	mov	r9, r1
 800197c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001980:	2600      	movs	r6, #0
 8001982:	b914      	cbnz	r4, 800198a <_fwalk_reent+0x16>
 8001984:	4630      	mov	r0, r6
 8001986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800198a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800198e:	3f01      	subs	r7, #1
 8001990:	d501      	bpl.n	8001996 <_fwalk_reent+0x22>
 8001992:	6824      	ldr	r4, [r4, #0]
 8001994:	e7f5      	b.n	8001982 <_fwalk_reent+0xe>
 8001996:	89ab      	ldrh	r3, [r5, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d907      	bls.n	80019ac <_fwalk_reent+0x38>
 800199c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019a0:	3301      	adds	r3, #1
 80019a2:	d003      	beq.n	80019ac <_fwalk_reent+0x38>
 80019a4:	4629      	mov	r1, r5
 80019a6:	4640      	mov	r0, r8
 80019a8:	47c8      	blx	r9
 80019aa:	4306      	orrs	r6, r0
 80019ac:	3568      	adds	r5, #104	; 0x68
 80019ae:	e7ee      	b.n	800198e <_fwalk_reent+0x1a>

080019b0 <__swhatbuf_r>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	460e      	mov	r6, r1
 80019b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b8:	2900      	cmp	r1, #0
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	4614      	mov	r4, r2
 80019be:	461d      	mov	r5, r3
 80019c0:	da07      	bge.n	80019d2 <__swhatbuf_r+0x22>
 80019c2:	2300      	movs	r3, #0
 80019c4:	602b      	str	r3, [r5, #0]
 80019c6:	89b3      	ldrh	r3, [r6, #12]
 80019c8:	061a      	lsls	r2, r3, #24
 80019ca:	d410      	bmi.n	80019ee <__swhatbuf_r+0x3e>
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	e00e      	b.n	80019f0 <__swhatbuf_r+0x40>
 80019d2:	466a      	mov	r2, sp
 80019d4:	f000 f96e 	bl	8001cb4 <_fstat_r>
 80019d8:	2800      	cmp	r0, #0
 80019da:	dbf2      	blt.n	80019c2 <__swhatbuf_r+0x12>
 80019dc:	9a01      	ldr	r2, [sp, #4]
 80019de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019e6:	425a      	negs	r2, r3
 80019e8:	415a      	adcs	r2, r3
 80019ea:	602a      	str	r2, [r5, #0]
 80019ec:	e7ee      	b.n	80019cc <__swhatbuf_r+0x1c>
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	2000      	movs	r0, #0
 80019f2:	6023      	str	r3, [r4, #0]
 80019f4:	b016      	add	sp, #88	; 0x58
 80019f6:	bd70      	pop	{r4, r5, r6, pc}

080019f8 <__smakebuf_r>:
 80019f8:	898b      	ldrh	r3, [r1, #12]
 80019fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019fc:	079d      	lsls	r5, r3, #30
 80019fe:	4606      	mov	r6, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	d507      	bpl.n	8001a14 <__smakebuf_r+0x1c>
 8001a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a08:	6023      	str	r3, [r4, #0]
 8001a0a:	6123      	str	r3, [r4, #16]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	6163      	str	r3, [r4, #20]
 8001a10:	b002      	add	sp, #8
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	ab01      	add	r3, sp, #4
 8001a16:	466a      	mov	r2, sp
 8001a18:	f7ff ffca 	bl	80019b0 <__swhatbuf_r>
 8001a1c:	9900      	ldr	r1, [sp, #0]
 8001a1e:	4605      	mov	r5, r0
 8001a20:	4630      	mov	r0, r6
 8001a22:	f000 f877 	bl	8001b14 <_malloc_r>
 8001a26:	b948      	cbnz	r0, 8001a3c <__smakebuf_r+0x44>
 8001a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a2c:	059a      	lsls	r2, r3, #22
 8001a2e:	d4ef      	bmi.n	8001a10 <__smakebuf_r+0x18>
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	e7e3      	b.n	8001a04 <__smakebuf_r+0xc>
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <__smakebuf_r+0x7c>)
 8001a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	6020      	str	r0, [r4, #0]
 8001a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	9b00      	ldr	r3, [sp, #0]
 8001a4c:	6163      	str	r3, [r4, #20]
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	6120      	str	r0, [r4, #16]
 8001a52:	b15b      	cbz	r3, 8001a6c <__smakebuf_r+0x74>
 8001a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a58:	4630      	mov	r0, r6
 8001a5a:	f000 f93d 	bl	8001cd8 <_isatty_r>
 8001a5e:	b128      	cbz	r0, 8001a6c <__smakebuf_r+0x74>
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	81a3      	strh	r3, [r4, #12]
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	431d      	orrs	r5, r3
 8001a70:	81a5      	strh	r5, [r4, #12]
 8001a72:	e7cd      	b.n	8001a10 <__smakebuf_r+0x18>
 8001a74:	08001865 	.word	0x08001865

08001a78 <_free_r>:
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	2900      	cmp	r1, #0
 8001a7e:	d045      	beq.n	8001b0c <_free_r+0x94>
 8001a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a84:	1f0c      	subs	r4, r1, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bfb8      	it	lt
 8001a8a:	18e4      	addlt	r4, r4, r3
 8001a8c:	f000 f946 	bl	8001d1c <__malloc_lock>
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <_free_r+0x98>)
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	4610      	mov	r0, r2
 8001a96:	b933      	cbnz	r3, 8001aa6 <_free_r+0x2e>
 8001a98:	6063      	str	r3, [r4, #4]
 8001a9a:	6014      	str	r4, [r2, #0]
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aa2:	f000 b93c 	b.w	8001d1e <__malloc_unlock>
 8001aa6:	42a3      	cmp	r3, r4
 8001aa8:	d90c      	bls.n	8001ac4 <_free_r+0x4c>
 8001aaa:	6821      	ldr	r1, [r4, #0]
 8001aac:	1862      	adds	r2, r4, r1
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	bf04      	itt	eq
 8001ab2:	681a      	ldreq	r2, [r3, #0]
 8001ab4:	685b      	ldreq	r3, [r3, #4]
 8001ab6:	6063      	str	r3, [r4, #4]
 8001ab8:	bf04      	itt	eq
 8001aba:	1852      	addeq	r2, r2, r1
 8001abc:	6022      	streq	r2, [r4, #0]
 8001abe:	6004      	str	r4, [r0, #0]
 8001ac0:	e7ec      	b.n	8001a9c <_free_r+0x24>
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	b10a      	cbz	r2, 8001acc <_free_r+0x54>
 8001ac8:	42a2      	cmp	r2, r4
 8001aca:	d9fa      	bls.n	8001ac2 <_free_r+0x4a>
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	1858      	adds	r0, r3, r1
 8001ad0:	42a0      	cmp	r0, r4
 8001ad2:	d10b      	bne.n	8001aec <_free_r+0x74>
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	4401      	add	r1, r0
 8001ad8:	1858      	adds	r0, r3, r1
 8001ada:	4282      	cmp	r2, r0
 8001adc:	6019      	str	r1, [r3, #0]
 8001ade:	d1dd      	bne.n	8001a9c <_free_r+0x24>
 8001ae0:	6810      	ldr	r0, [r2, #0]
 8001ae2:	6852      	ldr	r2, [r2, #4]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	4401      	add	r1, r0
 8001ae8:	6019      	str	r1, [r3, #0]
 8001aea:	e7d7      	b.n	8001a9c <_free_r+0x24>
 8001aec:	d902      	bls.n	8001af4 <_free_r+0x7c>
 8001aee:	230c      	movs	r3, #12
 8001af0:	602b      	str	r3, [r5, #0]
 8001af2:	e7d3      	b.n	8001a9c <_free_r+0x24>
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	1821      	adds	r1, r4, r0
 8001af8:	428a      	cmp	r2, r1
 8001afa:	bf04      	itt	eq
 8001afc:	6811      	ldreq	r1, [r2, #0]
 8001afe:	6852      	ldreq	r2, [r2, #4]
 8001b00:	6062      	str	r2, [r4, #4]
 8001b02:	bf04      	itt	eq
 8001b04:	1809      	addeq	r1, r1, r0
 8001b06:	6021      	streq	r1, [r4, #0]
 8001b08:	605c      	str	r4, [r3, #4]
 8001b0a:	e7c7      	b.n	8001a9c <_free_r+0x24>
 8001b0c:	bd38      	pop	{r3, r4, r5, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000a8 	.word	0x200000a8

08001b14 <_malloc_r>:
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	1ccd      	adds	r5, r1, #3
 8001b18:	f025 0503 	bic.w	r5, r5, #3
 8001b1c:	3508      	adds	r5, #8
 8001b1e:	2d0c      	cmp	r5, #12
 8001b20:	bf38      	it	cc
 8001b22:	250c      	movcc	r5, #12
 8001b24:	2d00      	cmp	r5, #0
 8001b26:	4606      	mov	r6, r0
 8001b28:	db01      	blt.n	8001b2e <_malloc_r+0x1a>
 8001b2a:	42a9      	cmp	r1, r5
 8001b2c:	d903      	bls.n	8001b36 <_malloc_r+0x22>
 8001b2e:	230c      	movs	r3, #12
 8001b30:	6033      	str	r3, [r6, #0]
 8001b32:	2000      	movs	r0, #0
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	f000 f8f1 	bl	8001d1c <__malloc_lock>
 8001b3a:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <_malloc_r+0xac>)
 8001b3c:	6814      	ldr	r4, [r2, #0]
 8001b3e:	4621      	mov	r1, r4
 8001b40:	b991      	cbnz	r1, 8001b68 <_malloc_r+0x54>
 8001b42:	4c20      	ldr	r4, [pc, #128]	; (8001bc4 <_malloc_r+0xb0>)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	b91b      	cbnz	r3, 8001b50 <_malloc_r+0x3c>
 8001b48:	4630      	mov	r0, r6
 8001b4a:	f000 f83d 	bl	8001bc8 <_sbrk_r>
 8001b4e:	6020      	str	r0, [r4, #0]
 8001b50:	4629      	mov	r1, r5
 8001b52:	4630      	mov	r0, r6
 8001b54:	f000 f838 	bl	8001bc8 <_sbrk_r>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d124      	bne.n	8001ba6 <_malloc_r+0x92>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	6033      	str	r3, [r6, #0]
 8001b60:	4630      	mov	r0, r6
 8001b62:	f000 f8dc 	bl	8001d1e <__malloc_unlock>
 8001b66:	e7e4      	b.n	8001b32 <_malloc_r+0x1e>
 8001b68:	680b      	ldr	r3, [r1, #0]
 8001b6a:	1b5b      	subs	r3, r3, r5
 8001b6c:	d418      	bmi.n	8001ba0 <_malloc_r+0x8c>
 8001b6e:	2b0b      	cmp	r3, #11
 8001b70:	d90f      	bls.n	8001b92 <_malloc_r+0x7e>
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	50cd      	str	r5, [r1, r3]
 8001b76:	18cc      	adds	r4, r1, r3
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f000 f8d0 	bl	8001d1e <__malloc_unlock>
 8001b7e:	f104 000b 	add.w	r0, r4, #11
 8001b82:	1d23      	adds	r3, r4, #4
 8001b84:	f020 0007 	bic.w	r0, r0, #7
 8001b88:	1ac3      	subs	r3, r0, r3
 8001b8a:	d0d3      	beq.n	8001b34 <_malloc_r+0x20>
 8001b8c:	425a      	negs	r2, r3
 8001b8e:	50e2      	str	r2, [r4, r3]
 8001b90:	e7d0      	b.n	8001b34 <_malloc_r+0x20>
 8001b92:	428c      	cmp	r4, r1
 8001b94:	684b      	ldr	r3, [r1, #4]
 8001b96:	bf16      	itet	ne
 8001b98:	6063      	strne	r3, [r4, #4]
 8001b9a:	6013      	streq	r3, [r2, #0]
 8001b9c:	460c      	movne	r4, r1
 8001b9e:	e7eb      	b.n	8001b78 <_malloc_r+0x64>
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	6849      	ldr	r1, [r1, #4]
 8001ba4:	e7cc      	b.n	8001b40 <_malloc_r+0x2c>
 8001ba6:	1cc4      	adds	r4, r0, #3
 8001ba8:	f024 0403 	bic.w	r4, r4, #3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	d005      	beq.n	8001bbc <_malloc_r+0xa8>
 8001bb0:	1a21      	subs	r1, r4, r0
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 f808 	bl	8001bc8 <_sbrk_r>
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d0cf      	beq.n	8001b5c <_malloc_r+0x48>
 8001bbc:	6025      	str	r5, [r4, #0]
 8001bbe:	e7db      	b.n	8001b78 <_malloc_r+0x64>
 8001bc0:	200000a8 	.word	0x200000a8
 8001bc4:	200000ac 	.word	0x200000ac

08001bc8 <_sbrk_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4c06      	ldr	r4, [pc, #24]	; (8001be4 <_sbrk_r+0x1c>)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4605      	mov	r5, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	6023      	str	r3, [r4, #0]
 8001bd4:	f7fe fc04 	bl	80003e0 <_sbrk>
 8001bd8:	1c43      	adds	r3, r0, #1
 8001bda:	d102      	bne.n	8001be2 <_sbrk_r+0x1a>
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	b103      	cbz	r3, 8001be2 <_sbrk_r+0x1a>
 8001be0:	602b      	str	r3, [r5, #0]
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	20000170 	.word	0x20000170

08001be8 <__sread>:
 8001be8:	b510      	push	{r4, lr}
 8001bea:	460c      	mov	r4, r1
 8001bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf0:	f000 f896 	bl	8001d20 <_read_r>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	bfab      	itete	ge
 8001bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8001bfc:	181b      	addge	r3, r3, r0
 8001bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c02:	bfac      	ite	ge
 8001c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c06:	81a3      	strhlt	r3, [r4, #12]
 8001c08:	bd10      	pop	{r4, pc}

08001c0a <__swrite>:
 8001c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0e:	461f      	mov	r7, r3
 8001c10:	898b      	ldrh	r3, [r1, #12]
 8001c12:	05db      	lsls	r3, r3, #23
 8001c14:	4605      	mov	r5, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	4616      	mov	r6, r2
 8001c1a:	d505      	bpl.n	8001c28 <__swrite+0x1e>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	f000 f868 	bl	8001cf8 <_lseek_r>
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c32:	81a3      	strh	r3, [r4, #12]
 8001c34:	4632      	mov	r2, r6
 8001c36:	463b      	mov	r3, r7
 8001c38:	4628      	mov	r0, r5
 8001c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c3e:	f000 b817 	b.w	8001c70 <_write_r>

08001c42 <__sseek>:
 8001c42:	b510      	push	{r4, lr}
 8001c44:	460c      	mov	r4, r1
 8001c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c4a:	f000 f855 	bl	8001cf8 <_lseek_r>
 8001c4e:	1c43      	adds	r3, r0, #1
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	bf15      	itete	ne
 8001c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c5e:	81a3      	strheq	r3, [r4, #12]
 8001c60:	bf18      	it	ne
 8001c62:	81a3      	strhne	r3, [r4, #12]
 8001c64:	bd10      	pop	{r4, pc}

08001c66 <__sclose>:
 8001c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6a:	f000 b813 	b.w	8001c94 <_close_r>
	...

08001c70 <_write_r>:
 8001c70:	b538      	push	{r3, r4, r5, lr}
 8001c72:	4c07      	ldr	r4, [pc, #28]	; (8001c90 <_write_r+0x20>)
 8001c74:	4605      	mov	r5, r0
 8001c76:	4608      	mov	r0, r1
 8001c78:	4611      	mov	r1, r2
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	6022      	str	r2, [r4, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f000 f911 	bl	8001ea6 <_write>
 8001c84:	1c43      	adds	r3, r0, #1
 8001c86:	d102      	bne.n	8001c8e <_write_r+0x1e>
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	b103      	cbz	r3, 8001c8e <_write_r+0x1e>
 8001c8c:	602b      	str	r3, [r5, #0]
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
 8001c90:	20000170 	.word	0x20000170

08001c94 <_close_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4c06      	ldr	r4, [pc, #24]	; (8001cb0 <_close_r+0x1c>)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4605      	mov	r5, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	6023      	str	r3, [r4, #0]
 8001ca0:	f000 f930 	bl	8001f04 <_close>
 8001ca4:	1c43      	adds	r3, r0, #1
 8001ca6:	d102      	bne.n	8001cae <_close_r+0x1a>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	b103      	cbz	r3, 8001cae <_close_r+0x1a>
 8001cac:	602b      	str	r3, [r5, #0]
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
 8001cb0:	20000170 	.word	0x20000170

08001cb4 <_fstat_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4c07      	ldr	r4, [pc, #28]	; (8001cd4 <_fstat_r+0x20>)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4605      	mov	r5, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	f000 f966 	bl	8001f92 <_fstat>
 8001cc6:	1c43      	adds	r3, r0, #1
 8001cc8:	d102      	bne.n	8001cd0 <_fstat_r+0x1c>
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	b103      	cbz	r3, 8001cd0 <_fstat_r+0x1c>
 8001cce:	602b      	str	r3, [r5, #0]
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000170 	.word	0x20000170

08001cd8 <_isatty_r>:
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4c06      	ldr	r4, [pc, #24]	; (8001cf4 <_isatty_r+0x1c>)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4605      	mov	r5, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	6023      	str	r3, [r4, #0]
 8001ce4:	f000 f963 	bl	8001fae <_isatty>
 8001ce8:	1c43      	adds	r3, r0, #1
 8001cea:	d102      	bne.n	8001cf2 <_isatty_r+0x1a>
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	b103      	cbz	r3, 8001cf2 <_isatty_r+0x1a>
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
 8001cf4:	20000170 	.word	0x20000170

08001cf8 <_lseek_r>:
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	4c07      	ldr	r4, [pc, #28]	; (8001d18 <_lseek_r+0x20>)
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	4608      	mov	r0, r1
 8001d00:	4611      	mov	r1, r2
 8001d02:	2200      	movs	r2, #0
 8001d04:	6022      	str	r2, [r4, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f000 f8bb 	bl	8001e82 <_lseek>
 8001d0c:	1c43      	adds	r3, r0, #1
 8001d0e:	d102      	bne.n	8001d16 <_lseek_r+0x1e>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	b103      	cbz	r3, 8001d16 <_lseek_r+0x1e>
 8001d14:	602b      	str	r3, [r5, #0]
 8001d16:	bd38      	pop	{r3, r4, r5, pc}
 8001d18:	20000170 	.word	0x20000170

08001d1c <__malloc_lock>:
 8001d1c:	4770      	bx	lr

08001d1e <__malloc_unlock>:
 8001d1e:	4770      	bx	lr

08001d20 <_read_r>:
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4c07      	ldr	r4, [pc, #28]	; (8001d40 <_read_r+0x20>)
 8001d24:	4605      	mov	r5, r0
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	6022      	str	r2, [r4, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f000 f850 	bl	8001dd4 <_read>
 8001d34:	1c43      	adds	r3, r0, #1
 8001d36:	d102      	bne.n	8001d3e <_read_r+0x1e>
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	b103      	cbz	r3, 8001d3e <_read_r+0x1e>
 8001d3c:	602b      	str	r3, [r5, #0]
 8001d3e:	bd38      	pop	{r3, r4, r5, pc}
 8001d40:	20000170 	.word	0x20000170

08001d44 <findslot>:
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <findslot+0x2c>)
 8001d46:	b510      	push	{r4, lr}
 8001d48:	4604      	mov	r4, r0
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	b118      	cbz	r0, 8001d56 <findslot+0x12>
 8001d4e:	6983      	ldr	r3, [r0, #24]
 8001d50:	b90b      	cbnz	r3, 8001d56 <findslot+0x12>
 8001d52:	f7ff fda3 	bl	800189c <__sinit>
 8001d56:	2c13      	cmp	r4, #19
 8001d58:	d807      	bhi.n	8001d6a <findslot+0x26>
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <findslot+0x30>)
 8001d5c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001d60:	3301      	adds	r3, #1
 8001d62:	d002      	beq.n	8001d6a <findslot+0x26>
 8001d64:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e7fc      	b.n	8001d68 <findslot+0x24>
 8001d6e:	bf00      	nop
 8001d70:	20000020 	.word	0x20000020
 8001d74:	200000b0 	.word	0x200000b0

08001d78 <checkerror>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	4605      	mov	r5, r0
 8001d7e:	d109      	bne.n	8001d94 <checkerror+0x1c>
 8001d80:	f7ff fb46 	bl	8001410 <__errno>
 8001d84:	2413      	movs	r4, #19
 8001d86:	4606      	mov	r6, r0
 8001d88:	2700      	movs	r7, #0
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	4639      	mov	r1, r7
 8001d8e:	beab      	bkpt	0x00ab
 8001d90:	4604      	mov	r4, r0
 8001d92:	6034      	str	r4, [r6, #0]
 8001d94:	4628      	mov	r0, r5
 8001d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d98 <error>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	4605      	mov	r5, r0
 8001d9c:	f7ff fb38 	bl	8001410 <__errno>
 8001da0:	2413      	movs	r4, #19
 8001da2:	4606      	mov	r6, r0
 8001da4:	2700      	movs	r7, #0
 8001da6:	4620      	mov	r0, r4
 8001da8:	4639      	mov	r1, r7
 8001daa:	beab      	bkpt	0x00ab
 8001dac:	4604      	mov	r4, r0
 8001dae:	6034      	str	r4, [r6, #0]
 8001db0:	4628      	mov	r0, r5
 8001db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001db4 <_swiread>:
 8001db4:	b530      	push	{r4, r5, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001dbc:	9203      	str	r2, [sp, #12]
 8001dbe:	2406      	movs	r4, #6
 8001dc0:	ad01      	add	r5, sp, #4
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	beab      	bkpt	0x00ab
 8001dc8:	4604      	mov	r4, r0
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff ffd4 	bl	8001d78 <checkerror>
 8001dd0:	b005      	add	sp, #20
 8001dd2:	bd30      	pop	{r4, r5, pc}

08001dd4 <_read>:
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	460e      	mov	r6, r1
 8001dd8:	4615      	mov	r5, r2
 8001dda:	f7ff ffb3 	bl	8001d44 <findslot>
 8001dde:	4604      	mov	r4, r0
 8001de0:	b930      	cbnz	r0, 8001df0 <_read+0x1c>
 8001de2:	f7ff fb15 	bl	8001410 <__errno>
 8001de6:	2309      	movs	r3, #9
 8001de8:	6003      	str	r3, [r0, #0]
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
 8001dee:	bd70      	pop	{r4, r5, r6, pc}
 8001df0:	462a      	mov	r2, r5
 8001df2:	4631      	mov	r1, r6
 8001df4:	6800      	ldr	r0, [r0, #0]
 8001df6:	f7ff ffdd 	bl	8001db4 <_swiread>
 8001dfa:	1c43      	adds	r3, r0, #1
 8001dfc:	bf1f      	itttt	ne
 8001dfe:	6863      	ldrne	r3, [r4, #4]
 8001e00:	1a28      	subne	r0, r5, r0
 8001e02:	181b      	addne	r3, r3, r0
 8001e04:	6063      	strne	r3, [r4, #4]
 8001e06:	e7f2      	b.n	8001dee <_read+0x1a>

08001e08 <_swilseek>:
 8001e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4616      	mov	r6, r2
 8001e0e:	f7ff ff99 	bl	8001d44 <findslot>
 8001e12:	4605      	mov	r5, r0
 8001e14:	b940      	cbnz	r0, 8001e28 <_swilseek+0x20>
 8001e16:	f7ff fafb 	bl	8001410 <__errno>
 8001e1a:	2309      	movs	r3, #9
 8001e1c:	6003      	str	r3, [r0, #0]
 8001e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8001e22:	4620      	mov	r0, r4
 8001e24:	b003      	add	sp, #12
 8001e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e28:	2e02      	cmp	r6, #2
 8001e2a:	d903      	bls.n	8001e34 <_swilseek+0x2c>
 8001e2c:	f7ff faf0 	bl	8001410 <__errno>
 8001e30:	2316      	movs	r3, #22
 8001e32:	e7f3      	b.n	8001e1c <_swilseek+0x14>
 8001e34:	2e01      	cmp	r6, #1
 8001e36:	d112      	bne.n	8001e5e <_swilseek+0x56>
 8001e38:	6843      	ldr	r3, [r0, #4]
 8001e3a:	18e4      	adds	r4, r4, r3
 8001e3c:	d4f6      	bmi.n	8001e2c <_swilseek+0x24>
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	260a      	movs	r6, #10
 8001e42:	e9cd 3400 	strd	r3, r4, [sp]
 8001e46:	466f      	mov	r7, sp
 8001e48:	4630      	mov	r0, r6
 8001e4a:	4639      	mov	r1, r7
 8001e4c:	beab      	bkpt	0x00ab
 8001e4e:	4606      	mov	r6, r0
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff ff91 	bl	8001d78 <checkerror>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	dbe1      	blt.n	8001e1e <_swilseek+0x16>
 8001e5a:	606c      	str	r4, [r5, #4]
 8001e5c:	e7e1      	b.n	8001e22 <_swilseek+0x1a>
 8001e5e:	2e02      	cmp	r6, #2
 8001e60:	d1ed      	bne.n	8001e3e <_swilseek+0x36>
 8001e62:	af02      	add	r7, sp, #8
 8001e64:	6803      	ldr	r3, [r0, #0]
 8001e66:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001e6a:	260c      	movs	r6, #12
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	4639      	mov	r1, r7
 8001e70:	beab      	bkpt	0x00ab
 8001e72:	4606      	mov	r6, r0
 8001e74:	4630      	mov	r0, r6
 8001e76:	f7ff ff7f 	bl	8001d78 <checkerror>
 8001e7a:	1c43      	adds	r3, r0, #1
 8001e7c:	d0cf      	beq.n	8001e1e <_swilseek+0x16>
 8001e7e:	4404      	add	r4, r0
 8001e80:	e7dd      	b.n	8001e3e <_swilseek+0x36>

08001e82 <_lseek>:
 8001e82:	f7ff bfc1 	b.w	8001e08 <_swilseek>

08001e86 <_swiwrite>:
 8001e86:	b530      	push	{r4, r5, lr}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e8e:	9203      	str	r2, [sp, #12]
 8001e90:	2405      	movs	r4, #5
 8001e92:	ad01      	add	r5, sp, #4
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	beab      	bkpt	0x00ab
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff ff6b 	bl	8001d78 <checkerror>
 8001ea2:	b005      	add	sp, #20
 8001ea4:	bd30      	pop	{r4, r5, pc}

08001ea6 <_write>:
 8001ea6:	b570      	push	{r4, r5, r6, lr}
 8001ea8:	460e      	mov	r6, r1
 8001eaa:	4615      	mov	r5, r2
 8001eac:	f7ff ff4a 	bl	8001d44 <findslot>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	b930      	cbnz	r0, 8001ec2 <_write+0x1c>
 8001eb4:	f7ff faac 	bl	8001410 <__errno>
 8001eb8:	2309      	movs	r3, #9
 8001eba:	6003      	str	r3, [r0, #0]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	462a      	mov	r2, r5
 8001ec4:	4631      	mov	r1, r6
 8001ec6:	6800      	ldr	r0, [r0, #0]
 8001ec8:	f7ff ffdd 	bl	8001e86 <_swiwrite>
 8001ecc:	1e02      	subs	r2, r0, #0
 8001ece:	dbf5      	blt.n	8001ebc <_write+0x16>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	1aa8      	subs	r0, r5, r2
 8001ed4:	4403      	add	r3, r0
 8001ed6:	42aa      	cmp	r2, r5
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	d1f1      	bne.n	8001ec0 <_write+0x1a>
 8001edc:	2000      	movs	r0, #0
 8001ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ee2:	f7ff bf59 	b.w	8001d98 <error>

08001ee6 <_swiclose>:
 8001ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ee8:	ad02      	add	r5, sp, #8
 8001eea:	2402      	movs	r4, #2
 8001eec:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	beab      	bkpt	0x00ab
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff ff3d 	bl	8001d78 <checkerror>
 8001efe:	b003      	add	sp, #12
 8001f00:	bd30      	pop	{r4, r5, pc}
	...

08001f04 <_close>:
 8001f04:	b538      	push	{r3, r4, r5, lr}
 8001f06:	4605      	mov	r5, r0
 8001f08:	f7ff ff1c 	bl	8001d44 <findslot>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	b930      	cbnz	r0, 8001f1e <_close+0x1a>
 8001f10:	f7ff fa7e 	bl	8001410 <__errno>
 8001f14:	2309      	movs	r3, #9
 8001f16:	6003      	str	r3, [r0, #0]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
 8001f1e:	3d01      	subs	r5, #1
 8001f20:	2d01      	cmp	r5, #1
 8001f22:	d809      	bhi.n	8001f38 <_close+0x34>
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <_close+0x48>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d104      	bne.n	8001f38 <_close+0x34>
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	6003      	str	r3, [r0, #0]
 8001f34:	2000      	movs	r0, #0
 8001f36:	e7f1      	b.n	8001f1c <_close+0x18>
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f7ff ffd4 	bl	8001ee6 <_swiclose>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d1ec      	bne.n	8001f1c <_close+0x18>
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	6023      	str	r3, [r4, #0]
 8001f48:	e7e8      	b.n	8001f1c <_close+0x18>
 8001f4a:	bf00      	nop
 8001f4c:	200000b0 	.word	0x200000b0

08001f50 <_swistat>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	460c      	mov	r4, r1
 8001f54:	f7ff fef6 	bl	8001d44 <findslot>
 8001f58:	4606      	mov	r6, r0
 8001f5a:	b930      	cbnz	r0, 8001f6a <_swistat+0x1a>
 8001f5c:	f7ff fa58 	bl	8001410 <__errno>
 8001f60:	2309      	movs	r3, #9
 8001f62:	6003      	str	r3, [r0, #0]
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	bd70      	pop	{r4, r5, r6, pc}
 8001f6a:	6863      	ldr	r3, [r4, #4]
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f70:	6063      	str	r3, [r4, #4]
 8001f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f76:	6463      	str	r3, [r4, #68]	; 0x44
 8001f78:	250c      	movs	r5, #12
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	beab      	bkpt	0x00ab
 8001f80:	4605      	mov	r5, r0
 8001f82:	4628      	mov	r0, r5
 8001f84:	f7ff fef8 	bl	8001d78 <checkerror>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	bf1c      	itt	ne
 8001f8c:	6120      	strne	r0, [r4, #16]
 8001f8e:	2000      	movne	r0, #0
 8001f90:	e7ea      	b.n	8001f68 <_swistat+0x18>

08001f92 <_fstat>:
 8001f92:	460b      	mov	r3, r1
 8001f94:	b510      	push	{r4, lr}
 8001f96:	2100      	movs	r1, #0
 8001f98:	4604      	mov	r4, r0
 8001f9a:	2258      	movs	r2, #88	; 0x58
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fa61 	bl	8001464 <memset>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001faa:	f7ff bfd1 	b.w	8001f50 <_swistat>

08001fae <_isatty>:
 8001fae:	b570      	push	{r4, r5, r6, lr}
 8001fb0:	f7ff fec8 	bl	8001d44 <findslot>
 8001fb4:	2509      	movs	r5, #9
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	b920      	cbnz	r0, 8001fc4 <_isatty+0x16>
 8001fba:	f7ff fa29 	bl	8001410 <__errno>
 8001fbe:	6005      	str	r5, [r0, #0]
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	beab      	bkpt	0x00ab
 8001fca:	4604      	mov	r4, r0
 8001fcc:	2c01      	cmp	r4, #1
 8001fce:	d0f7      	beq.n	8001fc0 <_isatty+0x12>
 8001fd0:	f7ff fa1e 	bl	8001410 <__errno>
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	4606      	mov	r6, r0
 8001fd8:	2513      	movs	r5, #19
 8001fda:	4628      	mov	r0, r5
 8001fdc:	4621      	mov	r1, r4
 8001fde:	beab      	bkpt	0x00ab
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	6035      	str	r5, [r6, #0]
 8001fe4:	e7ec      	b.n	8001fc0 <_isatty+0x12>
	...

08001fe8 <_init>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

08001ff4 <_fini>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr
