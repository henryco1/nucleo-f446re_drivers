
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002090  08002090  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002090  08002090  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002090  08002090  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002090  08002090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002094  08002094  00012094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000084  0800211c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800211c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000385e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008c5  00000000  00000000  00023912  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  000241d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c0  00000000  00000000  000243e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003047  00000000  00000000  000245a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f7c  00000000  00000000  000275e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b3c5  00000000  00000000  00029563  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f8  00000000  00000000  000349a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000084 	.word	0x20000084
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001fe0 	.word	0x08001fe0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000088 	.word	0x20000088
 8000200:	08001fe0 	.word	0x08001fe0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <I2C1_GPIO_Init>:
/*
 * PB8 = SCL
 * PB9 = SDA
 * Alt Func mode = 4
 */
void I2C1_GPIO_Init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <I2C1_GPIO_Init+0x40>)
 800021c:	607b      	str	r3, [r7, #4]

	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 8000222:	2304      	movs	r3, #4
 8000224:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_OPEN_DRAIN;
 8000226:	2301      	movs	r3, #1
 8000228:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 800022a:	2301      	movs	r3, #1
 800022c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8000232:	2308      	movs	r3, #8
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f9c1 	bl	80005c0 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800023e:	2309      	movs	r3, #9
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f9bb 	bl	80005c0 <GPIO_Init>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Init>:

void I2C1_Init(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <I2C1_Init+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <I2C1_Init+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Init+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = I2C_SLAVE_ADDR;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <I2C1_Init+0x2c>)
 800026a:	2269      	movs	r2, #105	; 0x69
 800026c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_CYCLE_2;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Init+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <I2C1_Init+0x2c>)
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <I2C1_Init+0x34>)
 8000278:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <I2C1_Init+0x2c>)
 800027c:	f000 fc5c 	bl	8000b38 <I2C_Init>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000150 	.word	0x20000150
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	220c      	movs	r2, #12
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f8dd 	bl	800145c <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <GPIO_Button_Init+0x38>)
 80002a4:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002a6:	230d      	movs	r3, #13
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ae:	2302      	movs	r3, #2
 80002b0:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f981 	bl	80005c0 <GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020800 	.word	0x40020800

080002cc <main>:

int main(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	 * 	Here we initialize interrupts. Note that priority config is not needed as we are only working with one interrupt
	 * 	We also need the interrupt name from the startup code. We override the IRQ handlers with our IRQ handler function
	 */
//	initialise_monitor_handles();
//	printf("Semihosting successful\n");
	GPIO_Button_Init();
 80002d0:	f7ff ffde 	bl	8000290 <GPIO_Button_Init>
	I2C1_GPIO_Init();
 80002d4:	f7ff ff9e 	bl	8000214 <I2C1_GPIO_Init>
	I2C1_Init();
 80002d8:	f7ff ffbe 	bl	8000258 <I2C1_Init>

	// IRQ
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	201f      	movs	r0, #31
 80002e0:	f000 fce6 	bl	8000cb0 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	2020      	movs	r0, #32
 80002e8:	f000 fce2 	bl	8000cb0 <I2C_IRQInterruptConfig>
	I2C_SlaveConfigureCallBackEvents(I2C1, ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	4806      	ldr	r0, [pc, #24]	; (8000308 <main+0x3c>)
 80002f0:	f000 fee0 	bl	80010b4 <I2C_SlaveConfigureCallBackEvents>

	I2C_PeripheralControl(I2C1, ENABLE);
 80002f4:	2101      	movs	r1, #1
 80002f6:	4804      	ldr	r0, [pc, #16]	; (8000308 <main+0x3c>)
 80002f8:	f000 fca2 	bl	8000c40 <I2C_PeripheralControl>
	// enable ack ater PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	4802      	ldr	r0, [pc, #8]	; (8000308 <main+0x3c>)
 8000300:	f000 ff0c 	bl	800111c <I2C_ManageAcking>

	while(1);
 8000304:	e7fe      	b.n	8000304 <main+0x38>
 8000306:	bf00      	nop
 8000308:	40005400 	.word	0x40005400

0800030c <I2C1_EV_IRQHandler>:

	return 0;
}
void I2C1_EV_IRQHandler(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000310:	4802      	ldr	r0, [pc, #8]	; (800031c <I2C1_EV_IRQHandler+0x10>)
 8000312:	f000 fd53 	bl	8000dbc <I2C_EV_IRQHandling>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000150 	.word	0x20000150

08000320 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8000324:	4802      	ldr	r0, [pc, #8]	; (8000330 <I2C1_ER_IRQHandler+0x10>)
 8000326:	f000 fe2f 	bl	8000f88 <I2C_ER_IRQHandling>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000150 	.word	0x20000150

08000334 <I2C_ApplicationEventCallback>:

// handle the events caused the by driver as described by the application events macros
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv) {
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandCode;
	static uint8_t count = 0;

	if (AppEv == I2C_EV_DATA_REQ) {
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b08      	cmp	r3, #8
 8000344:	d122      	bne.n	800038c <I2C_ApplicationEventCallback+0x58>
		// master requests data from the slave
		if (commandCode == 0x51) {
 8000346:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <I2C_ApplicationEventCallback+0x94>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b51      	cmp	r3, #81	; 0x51
 800034c:	d10b      	bne.n	8000366 <I2C_ApplicationEventCallback+0x32>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)TxBuffer));
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681c      	ldr	r4, [r3, #0]
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <I2C_ApplicationEventCallback+0x98>)
 8000354:	f7ff ff56 	bl	8000204 <strlen>
 8000358:	4603      	mov	r3, r0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4619      	mov	r1, r3
 800035e:	4620      	mov	r0, r4
 8000360:	f000 fc8a 	bl	8000c78 <I2C_SlaveSendData>
	} else if (AppEv == I2C_EV_STOP) {
		// only happens during slave reception. Master has ended I2C communication with the slave
//		printf("Master has ended the I2C communication with the slave.\n");

	}
}
 8000364:	e02b      	b.n	80003be <I2C_ApplicationEventCallback+0x8a>
		} else if (commandCode == 0x52) {
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <I2C_ApplicationEventCallback+0x94>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b52      	cmp	r3, #82	; 0x52
 800036c:	d127      	bne.n	80003be <I2C_ApplicationEventCallback+0x8a>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, TxBuffer[count++]);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6818      	ldr	r0, [r3, #0]
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <I2C_ApplicationEventCallback+0x9c>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	b2d1      	uxtb	r1, r2
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <I2C_ApplicationEventCallback+0x9c>)
 800037c:	7011      	strb	r1, [r2, #0]
 800037e:	461a      	mov	r2, r3
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <I2C_ApplicationEventCallback+0x98>)
 8000382:	5c9b      	ldrb	r3, [r3, r2]
 8000384:	4619      	mov	r1, r3
 8000386:	f000 fc77 	bl	8000c78 <I2C_SlaveSendData>
}
 800038a:	e018      	b.n	80003be <I2C_ApplicationEventCallback+0x8a>
	} else if (AppEv == I2C_EV_DATA_RCV) {
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	2b09      	cmp	r3, #9
 8000390:	d109      	bne.n	80003a6 <I2C_ApplicationEventCallback+0x72>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fc7d 	bl	8000c96 <I2C_SlaveReceiveData>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <I2C_ApplicationEventCallback+0x94>)
 80003a2:	701a      	strb	r2, [r3, #0]
}
 80003a4:	e00b      	b.n	80003be <I2C_ApplicationEventCallback+0x8a>
	} else if (AppEv == I2C_ERROR_AF) {
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	d108      	bne.n	80003be <I2C_ApplicationEventCallback+0x8a>
		commandCode = 0xff;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <I2C_ApplicationEventCallback+0x94>)
 80003ae:	22ff      	movs	r2, #255	; 0xff
 80003b0:	701a      	strb	r2, [r3, #0]
		count = 0;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <I2C_ApplicationEventCallback+0x9c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
		printf("nack sent\n");
 80003b8:	4806      	ldr	r0, [pc, #24]	; (80003d4 <I2C_ApplicationEventCallback+0xa0>)
 80003ba:	f001 f8b3 	bl	8001524 <puts>
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200000a0 	.word	0x200000a0
 80003cc:	20000000 	.word	0x20000000
 80003d0:	200000a1 	.word	0x200000a1
 80003d4:	08001ff8 	.word	0x08001ff8

080003d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <_sbrk+0x50>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d102      	bne.n	80003ee <_sbrk+0x16>
		heap_end = &end;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <_sbrk+0x50>)
 80003ea:	4a10      	ldr	r2, [pc, #64]	; (800042c <_sbrk+0x54>)
 80003ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <_sbrk+0x50>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <_sbrk+0x50>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4413      	add	r3, r2
 80003fc:	466a      	mov	r2, sp
 80003fe:	4293      	cmp	r3, r2
 8000400:	d907      	bls.n	8000412 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000402:	f001 f801 	bl	8001408 <__errno>
 8000406:	4602      	mov	r2, r0
 8000408:	230c      	movs	r3, #12
 800040a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800040c:	f04f 33ff 	mov.w	r3, #4294967295
 8000410:	e006      	b.n	8000420 <_sbrk+0x48>
	}

	heap_end += incr;
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <_sbrk+0x50>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	4a03      	ldr	r2, [pc, #12]	; (8000428 <_sbrk+0x50>)
 800041c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000a4 	.word	0x200000a4
 800042c:	20000178 	.word	0x20000178

08000430 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d157      	bne.n	80004f2 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a55      	ldr	r2, [pc, #340]	; (800059c <GPIO_PeriClockControl+0x16c>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800044a:	4b55      	ldr	r3, [pc, #340]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a54      	ldr	r2, [pc, #336]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 8000456:	e09b      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a52      	ldr	r2, [pc, #328]	; (80005a4 <GPIO_PeriClockControl+0x174>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000460:	4b4f      	ldr	r3, [pc, #316]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a4e      	ldr	r2, [pc, #312]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000466:	f043 0302 	orr.w	r3, r3, #2
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e090      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a4d      	ldr	r2, [pc, #308]	; (80005a8 <GPIO_PeriClockControl+0x178>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 8000476:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a49      	ldr	r2, [pc, #292]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e085      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a49      	ldr	r2, [pc, #292]	; (80005ac <GPIO_PeriClockControl+0x17c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 800048c:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a43      	ldr	r2, [pc, #268]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e07a      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a44      	ldr	r2, [pc, #272]	; (80005b0 <GPIO_PeriClockControl+0x180>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80004a2:	4b3f      	ldr	r3, [pc, #252]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a3e      	ldr	r2, [pc, #248]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004a8:	f043 0310 	orr.w	r3, r3, #16
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e06f      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a40      	ldr	r2, [pc, #256]	; (80005b4 <GPIO_PeriClockControl+0x184>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80004b8:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a38      	ldr	r2, [pc, #224]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e064      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a3b      	ldr	r2, [pc, #236]	; (80005b8 <GPIO_PeriClockControl+0x188>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a33      	ldr	r2, [pc, #204]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e059      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a37      	ldr	r2, [pc, #220]	; (80005bc <GPIO_PeriClockControl+0x18c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d155      	bne.n	8000590 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a2d      	ldr	r2, [pc, #180]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	e04e      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a29      	ldr	r2, [pc, #164]	; (800059c <GPIO_PeriClockControl+0x16c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d105      	bne.n	8000506 <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000500:	2200      	movs	r2, #0
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000504:	e044      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <GPIO_PeriClockControl+0x174>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d105      	bne.n	800051a <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 800050e:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000514:	2200      	movs	r2, #0
 8000516:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000518:	e03a      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <GPIO_PeriClockControl+0x178>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d105      	bne.n	800052e <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000528:	2200      	movs	r2, #0
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800052c:	e030      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a1e      	ldr	r2, [pc, #120]	; (80005ac <GPIO_PeriClockControl+0x17c>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d105      	bne.n	8000542 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 800053c:	2200      	movs	r2, #0
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000540:	e026      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <GPIO_PeriClockControl+0x180>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d105      	bne.n	8000556 <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000550:	2200      	movs	r2, #0
 8000552:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000554:	e01c      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <GPIO_PeriClockControl+0x184>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d105      	bne.n	800056a <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000568:	e012      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <GPIO_PeriClockControl+0x188>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d105      	bne.n	800057e <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000578:	2200      	movs	r2, #0
 800057a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800057c:	e008      	b.n	8000590 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <GPIO_PeriClockControl+0x18c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d104      	bne.n	8000590 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <GPIO_PeriClockControl+0x170>)
 800058c:	2200      	movs	r2, #0
 800058e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40020000 	.word	0x40020000
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020400 	.word	0x40020400
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40021400 	.word	0x40021400
 80005b8:	40021800 	.word	0x40021800
 80005bc:	40021c00 	.word	0x40021c00

080005c0 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff2c 	bl	8000430 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d822      	bhi.n	8000626 <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2103      	movs	r1, #3
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e0c3      	b.n	80007ae <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d117      	bne.n	800065e <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <GPIO_Init+0x198>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	4611      	mov	r1, r2
 800063e:	4a46      	ldr	r2, [pc, #280]	; (8000758 <GPIO_Init+0x198>)
 8000640:	430b      	orrs	r3, r1
 8000642:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000644:	4b44      	ldr	r3, [pc, #272]	; (8000758 <GPIO_Init+0x198>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	43d2      	mvns	r2, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a40      	ldr	r2, [pc, #256]	; (8000758 <GPIO_Init+0x198>)
 8000658:	400b      	ands	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
 800065c:	e036      	b.n	80006cc <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	2b05      	cmp	r3, #5
 8000664:	d117      	bne.n	8000696 <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000666:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <GPIO_Init+0x198>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	7912      	ldrb	r2, [r2, #4]
 800066e:	4611      	mov	r1, r2
 8000670:	2201      	movs	r2, #1
 8000672:	408a      	lsls	r2, r1
 8000674:	4611      	mov	r1, r2
 8000676:	4a38      	ldr	r2, [pc, #224]	; (8000758 <GPIO_Init+0x198>)
 8000678:	430b      	orrs	r3, r1
 800067a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <GPIO_Init+0x198>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	7912      	ldrb	r2, [r2, #4]
 8000684:	4611      	mov	r1, r2
 8000686:	2201      	movs	r2, #1
 8000688:	408a      	lsls	r2, r1
 800068a:	43d2      	mvns	r2, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a32      	ldr	r2, [pc, #200]	; (8000758 <GPIO_Init+0x198>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
 8000694:	e01a      	b.n	80006cc <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	795b      	ldrb	r3, [r3, #5]
 800069a:	2b06      	cmp	r3, #6
 800069c:	d116      	bne.n	80006cc <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <GPIO_Init+0x198>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	7912      	ldrb	r2, [r2, #4]
 80006a6:	4611      	mov	r1, r2
 80006a8:	2201      	movs	r2, #1
 80006aa:	408a      	lsls	r2, r1
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <GPIO_Init+0x198>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <GPIO_Init+0x198>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7912      	ldrb	r2, [r2, #4]
 80006bc:	4611      	mov	r1, r2
 80006be:	2201      	movs	r2, #1
 80006c0:	408a      	lsls	r2, r1
 80006c2:	43d2      	mvns	r2, r2
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <GPIO_Init+0x198>)
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <GPIO_Init+0x19c>)
 80006e0:	7cfb      	ldrb	r3, [r7, #19]
 80006e2:	3302      	adds	r3, #2
 80006e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	491c      	ldr	r1, [pc, #112]	; (8000760 <GPIO_Init+0x1a0>)
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d046      	beq.n	8000780 <GPIO_Init+0x1c0>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	491b      	ldr	r1, [pc, #108]	; (8000764 <GPIO_Init+0x1a4>)
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d02b      	beq.n	8000754 <GPIO_Init+0x194>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4919      	ldr	r1, [pc, #100]	; (8000768 <GPIO_Init+0x1a8>)
 8000702:	428b      	cmp	r3, r1
 8000704:	d024      	beq.n	8000750 <GPIO_Init+0x190>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4918      	ldr	r1, [pc, #96]	; (800076c <GPIO_Init+0x1ac>)
 800070c:	428b      	cmp	r3, r1
 800070e:	d01d      	beq.n	800074c <GPIO_Init+0x18c>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4916      	ldr	r1, [pc, #88]	; (8000770 <GPIO_Init+0x1b0>)
 8000716:	428b      	cmp	r3, r1
 8000718:	d016      	beq.n	8000748 <GPIO_Init+0x188>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4915      	ldr	r1, [pc, #84]	; (8000774 <GPIO_Init+0x1b4>)
 8000720:	428b      	cmp	r3, r1
 8000722:	d00f      	beq.n	8000744 <GPIO_Init+0x184>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4913      	ldr	r1, [pc, #76]	; (8000778 <GPIO_Init+0x1b8>)
 800072a:	428b      	cmp	r3, r1
 800072c:	d008      	beq.n	8000740 <GPIO_Init+0x180>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4912      	ldr	r1, [pc, #72]	; (800077c <GPIO_Init+0x1bc>)
 8000734:	428b      	cmp	r3, r1
 8000736:	d101      	bne.n	800073c <GPIO_Init+0x17c>
 8000738:	2307      	movs	r3, #7
 800073a:	e022      	b.n	8000782 <GPIO_Init+0x1c2>
 800073c:	2300      	movs	r3, #0
 800073e:	e020      	b.n	8000782 <GPIO_Init+0x1c2>
 8000740:	2306      	movs	r3, #6
 8000742:	e01e      	b.n	8000782 <GPIO_Init+0x1c2>
 8000744:	2305      	movs	r3, #5
 8000746:	e01c      	b.n	8000782 <GPIO_Init+0x1c2>
 8000748:	2304      	movs	r3, #4
 800074a:	e01a      	b.n	8000782 <GPIO_Init+0x1c2>
 800074c:	2303      	movs	r3, #3
 800074e:	e018      	b.n	8000782 <GPIO_Init+0x1c2>
 8000750:	2302      	movs	r3, #2
 8000752:	e016      	b.n	8000782 <GPIO_Init+0x1c2>
 8000754:	2301      	movs	r3, #1
 8000756:	e014      	b.n	8000782 <GPIO_Init+0x1c2>
 8000758:	40013c00 	.word	0x40013c00
 800075c:	40013800 	.word	0x40013800
 8000760:	40020000 	.word	0x40020000
 8000764:	40020400 	.word	0x40020400
 8000768:	40020800 	.word	0x40020800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40021000 	.word	0x40021000
 8000774:	40021400 	.word	0x40021400
 8000778:	40021800 	.word	0x40021800
 800077c:	40021c00 	.word	0x40021c00
 8000780:	2300      	movs	r3, #0
 8000782:	7cb9      	ldrb	r1, [r7, #18]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	408b      	lsls	r3, r1
 8000788:	43db      	mvns	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	4957      	ldr	r1, [pc, #348]	; (80008ec <GPIO_Init+0x32c>)
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	4002      	ands	r2, r0
 8000792:	3302      	adds	r3, #2
 8000794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000798:	4b55      	ldr	r3, [pc, #340]	; (80008f0 <GPIO_Init+0x330>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <GPIO_Init+0x330>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	799b      	ldrb	r3, [r3, #6]
 80007b2:	461a      	mov	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	791b      	ldrb	r3, [r3, #4]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	2103      	movs	r1, #3
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	400a      	ands	r2, r1
 80007dc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6899      	ldr	r1, [r3, #8]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	79db      	ldrb	r3, [r3, #7]
 80007f6:	461a      	mov	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68da      	ldr	r2, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2103      	movs	r1, #3
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	400a      	ands	r2, r1
 8000820:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68d9      	ldr	r1, [r3, #12]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	430a      	orrs	r2, r1
 8000830:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	461a      	mov	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	2301      	movs	r3, #1
 8000854:	408b      	lsls	r3, r1
 8000856:	43db      	mvns	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	400a      	ands	r2, r1
 8000860:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	430a      	orrs	r2, r1
 8000870:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d132      	bne.n	80008e4 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	3208      	adds	r2, #8
 800089a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	210f      	movs	r1, #15
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4011      	ands	r1, r2
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	3208      	adds	r2, #8
 80008b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a5b      	ldrb	r3, [r3, #9]
 80008ca:	4619      	mov	r1, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4311      	orrs	r1, r2
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	3208      	adds	r2, #8
 80008e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40013c00 	.word	0x40013c00

080008f4 <RCC_GetPLLOutputClock>:
 * RCC Get PLL Output Clock
 * desc: gets the pll output clock
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPLLOutputClock() {
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
	 * Definitions:
	 * 	PLLP = main PLL division factor for main system clock
	 * 	PLLN = main PLL multiplication factor for VCO
	 * 	PLLM = division factor for the main PLL input clock
	 */
	uint8_t pll_div_factors[4] = {2, 4, 6, 8};
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <RCC_GetPLLOutputClock+0x88>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	607b      	str	r3, [r7, #4]

	uint32_t clk_src, clk_vco, plln, clk_pll = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
	uint8_t pllp, pllm = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	75bb      	strb	r3, [r7, #22]

	temp = (RCC->PLLCFGR << 22) & 1;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <RCC_GetPLLOutputClock+0x8c>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2300      	movs	r3, #0
 8000912:	75bb      	strb	r3, [r7, #22]
	if (temp) {
 8000914:	7dbb      	ldrb	r3, [r7, #22]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <RCC_GetPLLOutputClock+0x2c>
		// HSI clock selected as PLL
		clk_src = 16000000;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <RCC_GetPLLOutputClock+0x90>)
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	e001      	b.n	8000924 <RCC_GetPLLOutputClock+0x30>
	} else {
		// HSE clock selected as PLL
		clk_src = 8000000;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <RCC_GetPLLOutputClock+0x94>)
 8000922:	61fb      	str	r3, [r7, #28]
	}

	plln = (RCC->PLLCFGR << 6) & 0x1FF;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <RCC_GetPLLOutputClock+0x8c>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	019b      	lsls	r3, r3, #6
 800092a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800092e:	613b      	str	r3, [r7, #16]
	pllm = (RCC->PLLCFGR << 0) & 0x3F;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <RCC_GetPLLOutputClock+0x8c>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800093a:	75fb      	strb	r3, [r7, #23]

	clk_vco = clk_src * (plln / pllm);
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	fbb2 f2f3 	udiv	r2, r2, r3
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	60fb      	str	r3, [r7, #12]

	temp = (RCC->PLLCFGR << 16) & 0x3;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <RCC_GetPLLOutputClock+0x8c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2300      	movs	r3, #0
 8000952:	75bb      	strb	r3, [r7, #22]
	pllp = pll_div_factors[temp];
 8000954:	7dbb      	ldrb	r3, [r7, #22]
 8000956:	f107 0220 	add.w	r2, r7, #32
 800095a:	4413      	add	r3, r2
 800095c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000960:	72fb      	strb	r3, [r7, #11]
	clk_pll = clk_vco / pllp;
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	61bb      	str	r3, [r7, #24]

	return clk_pll;
 800096c:	69bb      	ldr	r3, [r7, #24]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	08002004 	.word	0x08002004
 8000980:	40023800 	.word	0x40023800
 8000984:	00f42400 	.word	0x00f42400
 8000988:	007a1200 	.word	0x007a1200

0800098c <RCC_GetPCLK1Value>:
 * RCC Get PLL PCLK1 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK1Value(void) {
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk1;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <RCC_GetPCLK1Value+0xec>)
 80009a4:	f107 0408 	add.w	r4, r7, #8
 80009a8:	461d      	mov	r5, r3
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre1_div_factors[4] = {2, 4, 8, 16};
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <RCC_GetPCLK1Value+0xf0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << 2) & 0x3;
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <RCC_GetPCLK1Value+0xf4>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 80009ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d102      	bne.n	80009dc <RCC_GetPCLK1Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <RCC_GetPCLK1Value+0xf8>)
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
 80009da:	e00d      	b.n	80009f8 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 1) {
 80009dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d102      	bne.n	80009ea <RCC_GetPCLK1Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <RCC_GetPCLK1Value+0xfc>)
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
 80009e8:	e006      	b.n	80009f8 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 2) {
 80009ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d102      	bne.n	80009f8 <RCC_GetPCLK1Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 80009f2:	f7ff ff7f 	bl	80008f4 <RCC_GetPLLOutputClock>
 80009f6:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << 4) & 0xF;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <RCC_GetPCLK1Value+0xf4>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 8000a0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	d802      	bhi.n	8000a18 <RCC_GetPCLK1Value+0x8c>
 8000a12:	2301      	movs	r3, #1
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
 8000a16:	e009      	b.n	8000a2c <RCC_GetPCLK1Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000a18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a24:	4413      	add	r3, r2
 8000a26:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << 10) & 0x7;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <RCC_GetPCLK1Value+0xf4>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000a36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d803      	bhi.n	8000a46 <RCC_GetPCLK1Value+0xba>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a44:	e009      	b.n	8000a5a <RCC_GetPCLK1Value+0xce>
	else clk_apb = ppre1_div_factors[temp - 4];
 8000a46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a50:	4413      	add	r3, r2
 8000a52:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk1 = (clk_sys / clk_ahb) / clk_apb;
 8000a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk1;
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3738      	adds	r7, #56	; 0x38
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bdb0      	pop	{r4, r5, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	08002008 	.word	0x08002008
 8000a7c:	08002028 	.word	0x08002028
 8000a80:	40023800 	.word	0x40023800
 8000a84:	00f42400 	.word	0x00f42400
 8000a88:	007a1200 	.word	0x007a1200

08000a8c <I2C_PeriClockControl>:
 * desc: enables the I2C peripheral clock for a specific I2C peripheral
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d120      	bne.n	8000ae0 <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <I2C_PeriClockControl+0x9c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d106      	bne.n	8000ab4 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI;
		}
	}
}
 8000ab2:	e032      	b.n	8000b1a <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <I2C_PeriClockControl+0xa4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d106      	bne.n	8000aca <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac8:	e027      	b.n	8000b1a <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <I2C_PeriClockControl+0xa8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d123      	bne.n	8000b1a <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_EN;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ade:	e01c      	b.n	8000b1a <I2C_PeriClockControl+0x8e>
		if (pI2Cx == I2C1) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <I2C_PeriClockControl+0x9c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d105      	bne.n	8000af4 <I2C_PeriClockControl+0x68>
			I2C1_PCLK_DI;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000af2:	e012      	b.n	8000b1a <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <I2C_PeriClockControl+0xa4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d105      	bne.n	8000b08 <I2C_PeriClockControl+0x7c>
			I2C2_PCLK_DI;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b06:	e008      	b.n	8000b1a <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <I2C_PeriClockControl+0xa8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d104      	bne.n	8000b1a <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_DI;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <I2C_PeriClockControl+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40005c00 	.word	0x40005c00

08000b38 <I2C_Init>:
 * I2C Peripheral Initialization
 * desc: initializes an I2C peripheral
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	uint32_t temp_reg = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff9e 	bl	8000a8c <I2C_PeriClockControl>

	// Configure I2C with the peripheral clocks frequency
	// only 5 bits are valid
	temp_reg = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
	temp_reg |= RCC_GetPCLK1Value() / 1000000U;
 8000b54:	f7ff ff1a 	bl	800098c <RCC_GetPCLK1Value>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <I2C_Init+0xfc>)
 8000b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = temp_reg & 0x3F;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b72:	605a      	str	r2, [r3, #4]

	// Specify the address of the device we are going to communicate with
	temp_reg = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	temp_reg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7a1b      	ldrb	r3, [r3, #8]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
	temp_reg |= (1 << I2C_OAR1_BIT14);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = temp_reg;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	609a      	str	r2, [r3, #8]

	// Configure the speed of the serial clock
	uint16_t ccr_val = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	817b      	strh	r3, [r7, #10]
	temp_reg = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <I2C_Init+0x100>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d80f      	bhi.n	8000bc8 <I2C_Init+0x90>
		// slow (standard) mode
		ccr_val = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000ba8:	f7ff fef0 	bl	800098c <RCC_GetPCLK1Value>
 8000bac:	4602      	mov	r2, r0
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	817b      	strh	r3, [r7, #10]
		temp_reg |= (ccr_val & 0xFFF);
 8000bba:	897b      	ldrh	r3, [r7, #10]
 8000bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e00a      	b.n	8000bde <I2C_Init+0xa6>
	} else {
		// fast mode
		temp_reg |= (1 << I2C_CCR_FS);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bce:	60fb      	str	r3, [r7, #12]
		temp_reg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7a9b      	ldrb	r3, [r3, #10]
 8000bd4:	039b      	lsls	r3, r3, #14
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = temp_reg;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	61da      	str	r2, [r3, #28]


	// Configure the rise time for I2C pins through TRISE
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <I2C_Init+0x100>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d109      	bne.n	8000c04 <I2C_Init+0xcc>
		temp_reg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000bf0:	f7ff fecc 	bl	800098c <RCC_GetPCLK1Value>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <I2C_Init+0xfc>)
 8000bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8000bfc:	0c9b      	lsrs	r3, r3, #18
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e00d      	b.n	8000c20 <I2C_Init+0xe8>
	}
	else {
		temp_reg = ((RCC_GetPCLK1Value() * 300) / 1000000000U + 1);
 8000c04:	f7ff fec2 	bl	800098c <RCC_GetPCLK1Value>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c0e:	fb03 f302 	mul.w	r3, r3, r2
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <I2C_Init+0x104>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	09db      	lsrs	r3, r3, #7
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (temp_reg & 0x3F);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c2a:	621a      	str	r2, [r3, #32]
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	000186a0 	.word	0x000186a0
 8000c3c:	00044b83 	.word	0x00044b83

08000c40 <I2C_PeripheralControl>:
 * desc: enables or disables the I2C peripheral (which enables all I2C devices?)
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == ENABLE) {
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d106      	bne.n	8000c60 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f043 0201 	orr.w	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000c5e:	e005      	b.n	8000c6c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 0201 	bic.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <I2C_SlaveSendData>:
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE) {
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
	}
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000c84:	78fa      	ldrb	r2, [r7, #3]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	611a      	str	r2, [r3, #16]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C) {
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2C->DR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <I2C_IRQInterruptConfig>:
 * desc: enables or disables a specific interrupt for a peripheral function
 * input1: a number describing which interrupt to enable
 * input2: an flag for disabling or enabling an NVIC reg
 * output: none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enable_flag) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	460a      	mov	r2, r1
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	71bb      	strb	r3, [r7, #6]
	if (enable_flag == ENABLE) {
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d133      	bne.n	8000d2e <I2C_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b1f      	cmp	r3, #31
 8000cca:	d80a      	bhi.n	8000ce2 <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <I2C_IRQInterruptConfig+0xf4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <I2C_IRQInterruptConfig+0xf4>)
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000ce0:	e059      	b.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	d90f      	bls.n	8000d08 <I2C_IRQInterruptConfig+0x58>
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b3f      	cmp	r3, #63	; 0x3f
 8000cec:	d80c      	bhi.n	8000d08 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <I2C_IRQInterruptConfig+0xf8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	f002 021f 	and.w	r2, r2, #31
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <I2C_IRQInterruptConfig+0xf8>)
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e046      	b.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0c:	d943      	bls.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b5f      	cmp	r3, #95	; 0x5f
 8000d12:	d840      	bhi.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <I2C_IRQInterruptConfig+0xfc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a21      	ldr	r2, [pc, #132]	; (8000dac <I2C_IRQInterruptConfig+0xfc>)
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	e033      	b.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b1f      	cmp	r3, #31
 8000d32:	d80a      	bhi.n	8000d4a <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <I2C_IRQInterruptConfig+0x100>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4611      	mov	r1, r2
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <I2C_IRQInterruptConfig+0x100>)
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	e025      	b.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b1f      	cmp	r3, #31
 8000d4e:	d90f      	bls.n	8000d70 <I2C_IRQInterruptConfig+0xc0>
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b3f      	cmp	r3, #63	; 0x3f
 8000d54:	d80c      	bhi.n	8000d70 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <I2C_IRQInterruptConfig+0x104>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	f002 021f 	and.w	r2, r2, #31
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <I2C_IRQInterruptConfig+0x104>)
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e012      	b.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b3f      	cmp	r3, #63	; 0x3f
 8000d74:	d90f      	bls.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b5f      	cmp	r3, #95	; 0x5f
 8000d7a:	d80c      	bhi.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <I2C_IRQInterruptConfig+0x108>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <I2C_IRQInterruptConfig+0x108>)
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	e7ff      	b.n	8000d96 <I2C_IRQInterruptConfig+0xe6>
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000e104 	.word	0xe000e104
 8000dac:	e000e108 	.word	0xe000e108
 8000db0:	e000e180 	.word	0xe000e180
 8000db4:	e000e184 	.word	0xe000e184
 8000db8:	e000e188 	.word	0xe000e188

08000dbc <I2C_EV_IRQHandling>:
 * I2C EV IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C interrupt events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint32_t ITEVTEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dce:	613b      	str	r3, [r7, #16]
	uint32_t ITBUFEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dda:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]

	// check SB
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by SB event
	// relevant only in master mode
	if (ITEVTEN_val && temp) {
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01b      	beq.n	8000e2a <I2C_EV_IRQHandling+0x6e>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d018      	beq.n	8000e2a <I2C_EV_IRQHandling+0x6e>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7f1b      	ldrb	r3, [r3, #28]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d108      	bne.n	8000e12 <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7f5b      	ldrb	r3, [r3, #29]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f000 fa6c 	bl	80012e8 <I2C_ExecuteAddressPhaseWrite>
 8000e10:	e00b      	b.n	8000e2a <I2C_EV_IRQHandling+0x6e>
		}
		else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7f1b      	ldrb	r3, [r3, #28]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d107      	bne.n	8000e2a <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7f5b      	ldrb	r3, [r3, #29]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f000 fa75 	bl	8001314 <I2C_ExecuteAddressPhaseRead>
		}
	}

	// check ADDR
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the ADDR event
	// master mode : address is sent
	// slave mode: address matched with own address
	if (ITEVTEN_val && temp) {
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <I2C_EV_IRQHandling+0x8c>
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <I2C_EV_IRQHandling+0x8c>
		// this function will handle the case of receiving the last byte
		I2C_ClearADDRFlag(pI2CHandle);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fa7c 	bl	8001340 <I2C_ClearADDRFlag>
	}

	// check BTF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the BTF event. Note that this event will only be triggered
	// from a transmission
	if (ITEVTEN_val && temp) {
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d021      	beq.n	8000e9e <I2C_EV_IRQHandling+0xe2>
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01e      	beq.n	8000e9e <I2C_EV_IRQHandling+0xe2>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7f1b      	ldrb	r3, [r3, #28]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d11a      	bne.n	8000e9e <I2C_EV_IRQHandling+0xe2>
			if (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d013      	beq.n	8000e9e <I2C_EV_IRQHandling+0xe2>
				if (pI2CHandle->TxLen == 0) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10f      	bne.n	8000e9e <I2C_EV_IRQHandling+0xe2>
					// Closing out an interrupt based data transmission requires 3 different steps.
					// 1. Generate the stop condition
					if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7fdb      	ldrb	r3, [r3, #31]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d104      	bne.n	8000e90 <I2C_EV_IRQHandling+0xd4>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f962 	bl	8001154 <I2C_GenerateStopCondition>
					// 2. Reset the handle struct
					I2C_CloseSendData(pI2CHandle);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f96f 	bl	8001174 <I2C_CloseSendData>
					// 3. Notify the application that the transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000e96:	2100      	movs	r1, #0
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fa4b 	bl	8000334 <I2C_ApplicationEventCallback>
			} else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {}
		}
	}

	// check STOPF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the STOPF event. This will only be generated by the slave
	if (ITEVTEN_val && temp) {
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00c      	beq.n	8000eca <I2C_EV_IRQHandling+0x10e>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d009      	beq.n	8000eca <I2C_EV_IRQHandling+0x10e>
		// to clear stop we need to read from SR1 and write to CR1. SR1 was already read above so we will write to SR1 here
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	601a      	str	r2, [r3, #0]
		// notify application about STOP
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fa35 	bl	8000334 <I2C_ApplicationEventCallback>
	}

	// check TxE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed4:	60bb      	str	r3, [r7, #8]
	// handle the TxE interrupt event
	// interrupt latency delay compensation?
	for (int i=0; i<150; i++) {}
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e002      	b.n	8000ee2 <I2C_EV_IRQHandling+0x126>
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2b95      	cmp	r3, #149	; 0x95
 8000ee6:	ddf9      	ble.n	8000edc <I2C_EV_IRQHandling+0x120>
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01f      	beq.n	8000f2e <I2C_EV_IRQHandling+0x172>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01c      	beq.n	8000f2e <I2C_EV_IRQHandling+0x172>
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d019      	beq.n	8000f2e <I2C_EV_IRQHandling+0x172>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <I2C_EV_IRQHandling+0x15c>
			if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7f1b      	ldrb	r3, [r3, #28]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d10e      	bne.n	8000f2e <I2C_EV_IRQHandling+0x172>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f980 	bl	8001216 <I2C_MasterHandleTXEInterrupt>
 8000f16:	e00a      	b.n	8000f2e <I2C_EV_IRQHandling+0x172>
			}
		}
		else {
			// slave
			// validate that the slave is transmitter mode as determined by the address command byte
			if (pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <I2C_EV_IRQHandling+0x172>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000f26:	2108      	movs	r1, #8
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fa03 	bl	8000334 <I2C_ApplicationEventCallback>
		}
	}

	// check RxNE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f38:	60bb      	str	r3, [r7, #8]
	// handle the RxNE interrupt event
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d01f      	beq.n	8000f80 <I2C_EV_IRQHandling+0x1c4>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d01c      	beq.n	8000f80 <I2C_EV_IRQHandling+0x1c4>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d019      	beq.n	8000f80 <I2C_EV_IRQHandling+0x1c4>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <I2C_EV_IRQHandling+0x1ae>
			// device is master
			// RXNE flag is set
			if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7f1b      	ldrb	r3, [r3, #28]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d10e      	bne.n	8000f80 <I2C_EV_IRQHandling+0x1c4>
				I2C_MasterHandleRNXEInterrupt(pI2CHandle);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f975 	bl	8001252 <I2C_MasterHandleRNXEInterrupt>
			// ensure the slave is in receiver mode
			if (!(pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA)))
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		}
	}
}
 8000f68:	e00a      	b.n	8000f80 <I2C_EV_IRQHandling+0x1c4>
			if (!(pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA)))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <I2C_EV_IRQHandling+0x1c4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000f78:	2109      	movs	r1, #9
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f9da 	bl	8000334 <I2C_ApplicationEventCallback>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <I2C_ER_IRQHandling>:
 * I2C ER IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C error events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	// for error handling clear the status bit and inform the application
	uint8_t ITERREN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITERREN);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73bb      	strb	r3, [r7, #14]

	// check BERR
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BERR);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00e      	beq.n	8000fd4 <I2C_ER_IRQHandling+0x4c>
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00b      	beq.n	8000fd4 <I2C_ER_IRQHandling+0x4c>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fca:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8000fcc:	2103      	movs	r1, #3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff f9b0 	bl	8000334 <I2C_ApplicationEventCallback>
	}
	// check ARLO
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ARLO);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00e      	beq.n	800100a <I2C_ER_IRQHandling+0x82>
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <I2C_ER_IRQHandling+0x82>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001000:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 8001002:	2104      	movs	r1, #4
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff f995 	bl	8000334 <I2C_ApplicationEventCallback>
	}
	// check AF, ack failure
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_AF);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001014:	b2da      	uxtb	r2, r3
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	4313      	orrs	r3, r2
 800101a:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <I2C_ER_IRQHandling+0xb8>
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <I2C_ER_IRQHandling+0xb8>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001036:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8001038:	2105      	movs	r1, #5
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff f97a 	bl	8000334 <I2C_ApplicationEventCallback>
	}
	// check OVR, overrun/underrun
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_OVR);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104a:	b2da      	uxtb	r2, r3
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	4313      	orrs	r3, r2
 8001050:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <I2C_ER_IRQHandling+0xee>
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <I2C_ER_IRQHandling+0xee>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800106c:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800106e:	2106      	movs	r1, #6
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff f95f 	bl	8000334 <I2C_ApplicationEventCallback>
	}
	// check TIMEOUT
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TIMEOUT);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	b2da      	uxtb	r2, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	4313      	orrs	r3, r2
 8001086:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00e      	beq.n	80010ac <I2C_ER_IRQHandling+0x124>
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00b      	beq.n	80010ac <I2C_ER_IRQHandling+0x124>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010a2:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 80010a4:	2107      	movs	r1, #7
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff f944 	bl	8000334 <I2C_ApplicationEventCallback>
	}
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <I2C_SlaveConfigureCallBackEvents>:

void I2C_SlaveConfigureCallBackEvents(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d112      	bne.n	80010ec <I2C_SlaveConfigureCallBackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
	} else {
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 80010ea:	e011      	b.n	8001110 <I2C_SlaveConfigureCallBackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	605a      	str	r2, [r3, #4]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <I2C_ManageAcking>:
 * desc: handles the enabling/disabling of I2C ACKing
 * input1: I2C register pointer mapped to an I2C peripheral
 * input2: a flag for enabling/disabling
 * output: none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == I2C_ACK_ENABLE) {
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d106      	bne.n	800113c <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800113a:	e005      	b.n	8001148 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <I2C_GenerateStopCondition>:
 * I2C Generate Stop Condition
 * desc: helper function that generates a stop condition
 * input1: pointer to the I2C peripheral addr
 * output: none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <I2C_CloseSendData>:
 * I2C Close Send Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800119a:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <I2C_CloseReceiveData>:
 * I2C Close Receive Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011d0:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011e0:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	779a      	strb	r2, [r3, #30]
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7a5b      	ldrb	r3, [r3, #9]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d105      	bne.n	800120e <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2101      	movs	r1, #1
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff87 	bl	800111c <I2C_ManageAcking>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <I2C_MasterHandleTXEInterrupt>:
 * I2C Master Handle TXE Interrupt
 * desc: interrupt function that handles I2C data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle) {
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	if (pI2CHandle->TxLen > 0) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00f      	beq.n	8001246 <I2C_MasterHandleTXEInterrupt+0x30>
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	611a      	str	r2, [r3, #16]
		pI2CHandle->pTxBuffer++;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen--;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	615a      	str	r2, [r3, #20]
	}
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <I2C_MasterHandleRNXEInterrupt>:
 * I2C Master Handle RNXE Interrupt
 * desc: interrupt function that handles I2C data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleRNXEInterrupt(I2C_Handle_t *pI2CHandle) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	// two cases: data reception and the last byte data reception
	if (pI2CHandle->RxSize == 1) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7f9b      	ldrb	r3, [r3, #30]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10b      	bne.n	800127a <I2C_MasterHandleRNXEInterrupt+0x28>
			// the clear address function will handle the addr clearing before this function is called
			// so ack disable is not required here
	//		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
			*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
			pI2CHandle->RxLen--;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
	}
	if (pI2CHandle->RxSize > 1) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7f9b      	ldrb	r3, [r3, #30]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d91a      	bls.n	80012b8 <I2C_MasterHandleRNXEInterrupt+0x66>
		if (pI2CHandle->RxLen == 2) I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d105      	bne.n	8001296 <I2C_MasterHandleRNXEInterrupt+0x44>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff43 	bl	800111c <I2C_ManageAcking>
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
	}
	// if we are at the end of the transmission, close the transmission
	if (pI2CHandle->RxLen == 0) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10f      	bne.n	80012e0 <I2C_MasterHandleRNXEInterrupt+0x8e>
		// generate stop
		if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7fdb      	ldrb	r3, [r3, #31]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d104      	bne.n	80012d2 <I2C_MasterHandleRNXEInterrupt+0x80>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff41 	bl	8001154 <I2C_GenerateStopCondition>
		// close I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff71 	bl	80011ba <I2C_CloseReceiveData>
		// notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 80012d8:	2101      	movs	r1, #1
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff f82a 	bl	8000334 <I2C_ApplicationEventCallback>
	}
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <I2C_ExecuteAddressPhaseWrite>:
 * desc: helper function that transmits the slave addr followed by a write command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	70fb      	strb	r3, [r7, #3]
	slave_addr &= ~(1);
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	611a      	str	r2, [r3, #16]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <I2C_ExecuteAddressPhaseRead>:
 * desc: helper function that transmits the slave addr followed by a read command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	70fb      	strb	r3, [r7, #3]
	slave_addr |= 1;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	611a      	str	r2, [r3, #16]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <I2C_ClearADDRFlag>:
 * I2C Clear Address Flag
 * desc: helper function that clears the ADDR bit in the in the SR1 reg
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	uint32_t clear_read = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
	// check if device is master or slave mode
	// master mode conditional
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d01f      	beq.n	800139a <I2C_ClearADDRFlag+0x5a>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7f1b      	ldrb	r3, [r3, #28]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d112      	bne.n	8001388 <I2C_ClearADDRFlag+0x48>
			if (pI2CHandle->RxSize == 1) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7f9b      	ldrb	r3, [r3, #30]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d11f      	bne.n	80013aa <I2C_ClearADDRFlag+0x6a>
				// disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fed3 	bl	800111c <I2C_ManageAcking>
				// then clear addr
				// SR->ADDR is cleared by reading SR1 and SR2
				clear_read = pI2CHandle->pI2Cx->SR1;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	60fb      	str	r3, [r7, #12]
				clear_read = pI2CHandle->pI2Cx->SR2;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	60fb      	str	r3, [r7, #12]
	} else { // slave mode conditional
		clear_read = pI2CHandle->pI2Cx->SR1;
		clear_read = pI2CHandle->pI2Cx->SR2;
		(void)clear_read;
	}
}
 8001386:	e010      	b.n	80013aa <I2C_ClearADDRFlag+0x6a>
			clear_read = pI2CHandle->pI2Cx->SR1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	60fb      	str	r3, [r7, #12]
			clear_read = pI2CHandle->pI2Cx->SR2;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	60fb      	str	r3, [r7, #12]
}
 8001398:	e007      	b.n	80013aa <I2C_ClearADDRFlag+0x6a>
		clear_read = pI2CHandle->pI2Cx->SR1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	60fb      	str	r3, [r7, #12]
		clear_read = pI2CHandle->pI2Cx->SR2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	60fb      	str	r3, [r7, #12]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013de:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80013e2:	f000 f817 	bl	8001414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7fe ff71 	bl	80002cc <main>

080013ea <LoopForever>:

LoopForever:
    b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   r0, =_estack
 80013ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013f8:	08002098 	.word	0x08002098
  ldr r2, =_sbss
 80013fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001400:	20000174 	.word	0x20000174

08001404 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <__errno>:
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <__errno+0x8>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000020 	.word	0x20000020

08001414 <__libc_init_array>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	4e0d      	ldr	r6, [pc, #52]	; (800144c <__libc_init_array+0x38>)
 8001418:	4c0d      	ldr	r4, [pc, #52]	; (8001450 <__libc_init_array+0x3c>)
 800141a:	1ba4      	subs	r4, r4, r6
 800141c:	10a4      	asrs	r4, r4, #2
 800141e:	2500      	movs	r5, #0
 8001420:	42a5      	cmp	r5, r4
 8001422:	d109      	bne.n	8001438 <__libc_init_array+0x24>
 8001424:	4e0b      	ldr	r6, [pc, #44]	; (8001454 <__libc_init_array+0x40>)
 8001426:	4c0c      	ldr	r4, [pc, #48]	; (8001458 <__libc_init_array+0x44>)
 8001428:	f000 fdda 	bl	8001fe0 <_init>
 800142c:	1ba4      	subs	r4, r4, r6
 800142e:	10a4      	asrs	r4, r4, #2
 8001430:	2500      	movs	r5, #0
 8001432:	42a5      	cmp	r5, r4
 8001434:	d105      	bne.n	8001442 <__libc_init_array+0x2e>
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800143c:	4798      	blx	r3
 800143e:	3501      	adds	r5, #1
 8001440:	e7ee      	b.n	8001420 <__libc_init_array+0xc>
 8001442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001446:	4798      	blx	r3
 8001448:	3501      	adds	r5, #1
 800144a:	e7f2      	b.n	8001432 <__libc_init_array+0x1e>
 800144c:	08002090 	.word	0x08002090
 8001450:	08002090 	.word	0x08002090
 8001454:	08002090 	.word	0x08002090
 8001458:	08002094 	.word	0x08002094

0800145c <memset>:
 800145c:	4402      	add	r2, r0
 800145e:	4603      	mov	r3, r0
 8001460:	4293      	cmp	r3, r2
 8001462:	d100      	bne.n	8001466 <memset+0xa>
 8001464:	4770      	bx	lr
 8001466:	f803 1b01 	strb.w	r1, [r3], #1
 800146a:	e7f9      	b.n	8001460 <memset+0x4>

0800146c <_puts_r>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	460e      	mov	r6, r1
 8001470:	4605      	mov	r5, r0
 8001472:	b118      	cbz	r0, 800147c <_puts_r+0x10>
 8001474:	6983      	ldr	r3, [r0, #24]
 8001476:	b90b      	cbnz	r3, 800147c <_puts_r+0x10>
 8001478:	f000 fa0c 	bl	8001894 <__sinit>
 800147c:	69ab      	ldr	r3, [r5, #24]
 800147e:	68ac      	ldr	r4, [r5, #8]
 8001480:	b913      	cbnz	r3, 8001488 <_puts_r+0x1c>
 8001482:	4628      	mov	r0, r5
 8001484:	f000 fa06 	bl	8001894 <__sinit>
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <_puts_r+0xac>)
 800148a:	429c      	cmp	r4, r3
 800148c:	d117      	bne.n	80014be <_puts_r+0x52>
 800148e:	686c      	ldr	r4, [r5, #4]
 8001490:	89a3      	ldrh	r3, [r4, #12]
 8001492:	071b      	lsls	r3, r3, #28
 8001494:	d51d      	bpl.n	80014d2 <_puts_r+0x66>
 8001496:	6923      	ldr	r3, [r4, #16]
 8001498:	b1db      	cbz	r3, 80014d2 <_puts_r+0x66>
 800149a:	3e01      	subs	r6, #1
 800149c:	68a3      	ldr	r3, [r4, #8]
 800149e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60a3      	str	r3, [r4, #8]
 80014a6:	b9e9      	cbnz	r1, 80014e4 <_puts_r+0x78>
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da2e      	bge.n	800150a <_puts_r+0x9e>
 80014ac:	4622      	mov	r2, r4
 80014ae:	210a      	movs	r1, #10
 80014b0:	4628      	mov	r0, r5
 80014b2:	f000 f83f 	bl	8001534 <__swbuf_r>
 80014b6:	3001      	adds	r0, #1
 80014b8:	d011      	beq.n	80014de <_puts_r+0x72>
 80014ba:	200a      	movs	r0, #10
 80014bc:	e011      	b.n	80014e2 <_puts_r+0x76>
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <_puts_r+0xb0>)
 80014c0:	429c      	cmp	r4, r3
 80014c2:	d101      	bne.n	80014c8 <_puts_r+0x5c>
 80014c4:	68ac      	ldr	r4, [r5, #8]
 80014c6:	e7e3      	b.n	8001490 <_puts_r+0x24>
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_puts_r+0xb4>)
 80014ca:	429c      	cmp	r4, r3
 80014cc:	bf08      	it	eq
 80014ce:	68ec      	ldreq	r4, [r5, #12]
 80014d0:	e7de      	b.n	8001490 <_puts_r+0x24>
 80014d2:	4621      	mov	r1, r4
 80014d4:	4628      	mov	r0, r5
 80014d6:	f000 f87f 	bl	80015d8 <__swsetup_r>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d0dd      	beq.n	800149a <_puts_r+0x2e>
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da04      	bge.n	80014f2 <_puts_r+0x86>
 80014e8:	69a2      	ldr	r2, [r4, #24]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dc06      	bgt.n	80014fc <_puts_r+0x90>
 80014ee:	290a      	cmp	r1, #10
 80014f0:	d004      	beq.n	80014fc <_puts_r+0x90>
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	6022      	str	r2, [r4, #0]
 80014f8:	7019      	strb	r1, [r3, #0]
 80014fa:	e7cf      	b.n	800149c <_puts_r+0x30>
 80014fc:	4622      	mov	r2, r4
 80014fe:	4628      	mov	r0, r5
 8001500:	f000 f818 	bl	8001534 <__swbuf_r>
 8001504:	3001      	adds	r0, #1
 8001506:	d1c9      	bne.n	800149c <_puts_r+0x30>
 8001508:	e7e9      	b.n	80014de <_puts_r+0x72>
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	200a      	movs	r0, #10
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	6022      	str	r2, [r4, #0]
 8001512:	7018      	strb	r0, [r3, #0]
 8001514:	e7e5      	b.n	80014e2 <_puts_r+0x76>
 8001516:	bf00      	nop
 8001518:	08002050 	.word	0x08002050
 800151c:	08002070 	.word	0x08002070
 8001520:	08002030 	.word	0x08002030

08001524 <puts>:
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <puts+0xc>)
 8001526:	4601      	mov	r1, r0
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	f7ff bf9f 	b.w	800146c <_puts_r>
 800152e:	bf00      	nop
 8001530:	20000020 	.word	0x20000020

08001534 <__swbuf_r>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	460e      	mov	r6, r1
 8001538:	4614      	mov	r4, r2
 800153a:	4605      	mov	r5, r0
 800153c:	b118      	cbz	r0, 8001546 <__swbuf_r+0x12>
 800153e:	6983      	ldr	r3, [r0, #24]
 8001540:	b90b      	cbnz	r3, 8001546 <__swbuf_r+0x12>
 8001542:	f000 f9a7 	bl	8001894 <__sinit>
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <__swbuf_r+0x98>)
 8001548:	429c      	cmp	r4, r3
 800154a:	d12a      	bne.n	80015a2 <__swbuf_r+0x6e>
 800154c:	686c      	ldr	r4, [r5, #4]
 800154e:	69a3      	ldr	r3, [r4, #24]
 8001550:	60a3      	str	r3, [r4, #8]
 8001552:	89a3      	ldrh	r3, [r4, #12]
 8001554:	071a      	lsls	r2, r3, #28
 8001556:	d52e      	bpl.n	80015b6 <__swbuf_r+0x82>
 8001558:	6923      	ldr	r3, [r4, #16]
 800155a:	b363      	cbz	r3, 80015b6 <__swbuf_r+0x82>
 800155c:	6923      	ldr	r3, [r4, #16]
 800155e:	6820      	ldr	r0, [r4, #0]
 8001560:	1ac0      	subs	r0, r0, r3
 8001562:	6963      	ldr	r3, [r4, #20]
 8001564:	b2f6      	uxtb	r6, r6
 8001566:	4283      	cmp	r3, r0
 8001568:	4637      	mov	r7, r6
 800156a:	dc04      	bgt.n	8001576 <__swbuf_r+0x42>
 800156c:	4621      	mov	r1, r4
 800156e:	4628      	mov	r0, r5
 8001570:	f000 f926 	bl	80017c0 <_fflush_r>
 8001574:	bb28      	cbnz	r0, 80015c2 <__swbuf_r+0x8e>
 8001576:	68a3      	ldr	r3, [r4, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60a3      	str	r3, [r4, #8]
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	6022      	str	r2, [r4, #0]
 8001582:	701e      	strb	r6, [r3, #0]
 8001584:	6963      	ldr	r3, [r4, #20]
 8001586:	3001      	adds	r0, #1
 8001588:	4283      	cmp	r3, r0
 800158a:	d004      	beq.n	8001596 <__swbuf_r+0x62>
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	07db      	lsls	r3, r3, #31
 8001590:	d519      	bpl.n	80015c6 <__swbuf_r+0x92>
 8001592:	2e0a      	cmp	r6, #10
 8001594:	d117      	bne.n	80015c6 <__swbuf_r+0x92>
 8001596:	4621      	mov	r1, r4
 8001598:	4628      	mov	r0, r5
 800159a:	f000 f911 	bl	80017c0 <_fflush_r>
 800159e:	b190      	cbz	r0, 80015c6 <__swbuf_r+0x92>
 80015a0:	e00f      	b.n	80015c2 <__swbuf_r+0x8e>
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <__swbuf_r+0x9c>)
 80015a4:	429c      	cmp	r4, r3
 80015a6:	d101      	bne.n	80015ac <__swbuf_r+0x78>
 80015a8:	68ac      	ldr	r4, [r5, #8]
 80015aa:	e7d0      	b.n	800154e <__swbuf_r+0x1a>
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <__swbuf_r+0xa0>)
 80015ae:	429c      	cmp	r4, r3
 80015b0:	bf08      	it	eq
 80015b2:	68ec      	ldreq	r4, [r5, #12]
 80015b4:	e7cb      	b.n	800154e <__swbuf_r+0x1a>
 80015b6:	4621      	mov	r1, r4
 80015b8:	4628      	mov	r0, r5
 80015ba:	f000 f80d 	bl	80015d8 <__swsetup_r>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d0cc      	beq.n	800155c <__swbuf_r+0x28>
 80015c2:	f04f 37ff 	mov.w	r7, #4294967295
 80015c6:	4638      	mov	r0, r7
 80015c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08002050 	.word	0x08002050
 80015d0:	08002070 	.word	0x08002070
 80015d4:	08002030 	.word	0x08002030

080015d8 <__swsetup_r>:
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <__swsetup_r+0xcc>)
 80015da:	b570      	push	{r4, r5, r6, lr}
 80015dc:	681d      	ldr	r5, [r3, #0]
 80015de:	4606      	mov	r6, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	b125      	cbz	r5, 80015ee <__swsetup_r+0x16>
 80015e4:	69ab      	ldr	r3, [r5, #24]
 80015e6:	b913      	cbnz	r3, 80015ee <__swsetup_r+0x16>
 80015e8:	4628      	mov	r0, r5
 80015ea:	f000 f953 	bl	8001894 <__sinit>
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <__swsetup_r+0xd0>)
 80015f0:	429c      	cmp	r4, r3
 80015f2:	d10f      	bne.n	8001614 <__swsetup_r+0x3c>
 80015f4:	686c      	ldr	r4, [r5, #4]
 80015f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	0715      	lsls	r5, r2, #28
 80015fe:	d42c      	bmi.n	800165a <__swsetup_r+0x82>
 8001600:	06d0      	lsls	r0, r2, #27
 8001602:	d411      	bmi.n	8001628 <__swsetup_r+0x50>
 8001604:	2209      	movs	r2, #9
 8001606:	6032      	str	r2, [r6, #0]
 8001608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160c:	81a3      	strh	r3, [r4, #12]
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
 8001612:	e03e      	b.n	8001692 <__swsetup_r+0xba>
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <__swsetup_r+0xd4>)
 8001616:	429c      	cmp	r4, r3
 8001618:	d101      	bne.n	800161e <__swsetup_r+0x46>
 800161a:	68ac      	ldr	r4, [r5, #8]
 800161c:	e7eb      	b.n	80015f6 <__swsetup_r+0x1e>
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <__swsetup_r+0xd8>)
 8001620:	429c      	cmp	r4, r3
 8001622:	bf08      	it	eq
 8001624:	68ec      	ldreq	r4, [r5, #12]
 8001626:	e7e6      	b.n	80015f6 <__swsetup_r+0x1e>
 8001628:	0751      	lsls	r1, r2, #29
 800162a:	d512      	bpl.n	8001652 <__swsetup_r+0x7a>
 800162c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800162e:	b141      	cbz	r1, 8001642 <__swsetup_r+0x6a>
 8001630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001634:	4299      	cmp	r1, r3
 8001636:	d002      	beq.n	800163e <__swsetup_r+0x66>
 8001638:	4630      	mov	r0, r6
 800163a:	f000 fa19 	bl	8001a70 <_free_r>
 800163e:	2300      	movs	r3, #0
 8001640:	6363      	str	r3, [r4, #52]	; 0x34
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001648:	81a3      	strh	r3, [r4, #12]
 800164a:	2300      	movs	r3, #0
 800164c:	6063      	str	r3, [r4, #4]
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	89a3      	ldrh	r3, [r4, #12]
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	81a3      	strh	r3, [r4, #12]
 800165a:	6923      	ldr	r3, [r4, #16]
 800165c:	b94b      	cbnz	r3, 8001672 <__swsetup_r+0x9a>
 800165e:	89a3      	ldrh	r3, [r4, #12]
 8001660:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001668:	d003      	beq.n	8001672 <__swsetup_r+0x9a>
 800166a:	4621      	mov	r1, r4
 800166c:	4630      	mov	r0, r6
 800166e:	f000 f9bf 	bl	80019f0 <__smakebuf_r>
 8001672:	89a2      	ldrh	r2, [r4, #12]
 8001674:	f012 0301 	ands.w	r3, r2, #1
 8001678:	d00c      	beq.n	8001694 <__swsetup_r+0xbc>
 800167a:	2300      	movs	r3, #0
 800167c:	60a3      	str	r3, [r4, #8]
 800167e:	6963      	ldr	r3, [r4, #20]
 8001680:	425b      	negs	r3, r3
 8001682:	61a3      	str	r3, [r4, #24]
 8001684:	6923      	ldr	r3, [r4, #16]
 8001686:	b953      	cbnz	r3, 800169e <__swsetup_r+0xc6>
 8001688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800168c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001690:	d1ba      	bne.n	8001608 <__swsetup_r+0x30>
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	0792      	lsls	r2, r2, #30
 8001696:	bf58      	it	pl
 8001698:	6963      	ldrpl	r3, [r4, #20]
 800169a:	60a3      	str	r3, [r4, #8]
 800169c:	e7f2      	b.n	8001684 <__swsetup_r+0xac>
 800169e:	2000      	movs	r0, #0
 80016a0:	e7f7      	b.n	8001692 <__swsetup_r+0xba>
 80016a2:	bf00      	nop
 80016a4:	20000020 	.word	0x20000020
 80016a8:	08002050 	.word	0x08002050
 80016ac:	08002070 	.word	0x08002070
 80016b0:	08002030 	.word	0x08002030

080016b4 <__sflush_r>:
 80016b4:	898a      	ldrh	r2, [r1, #12]
 80016b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ba:	4605      	mov	r5, r0
 80016bc:	0710      	lsls	r0, r2, #28
 80016be:	460c      	mov	r4, r1
 80016c0:	d458      	bmi.n	8001774 <__sflush_r+0xc0>
 80016c2:	684b      	ldr	r3, [r1, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	dc05      	bgt.n	80016d4 <__sflush_r+0x20>
 80016c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dc02      	bgt.n	80016d4 <__sflush_r+0x20>
 80016ce:	2000      	movs	r0, #0
 80016d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016d6:	2e00      	cmp	r6, #0
 80016d8:	d0f9      	beq.n	80016ce <__sflush_r+0x1a>
 80016da:	2300      	movs	r3, #0
 80016dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016e0:	682f      	ldr	r7, [r5, #0]
 80016e2:	6a21      	ldr	r1, [r4, #32]
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	d032      	beq.n	800174e <__sflush_r+0x9a>
 80016e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016ea:	89a3      	ldrh	r3, [r4, #12]
 80016ec:	075a      	lsls	r2, r3, #29
 80016ee:	d505      	bpl.n	80016fc <__sflush_r+0x48>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	1ac0      	subs	r0, r0, r3
 80016f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016f6:	b10b      	cbz	r3, 80016fc <__sflush_r+0x48>
 80016f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016fa:	1ac0      	subs	r0, r0, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	4602      	mov	r2, r0
 8001700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001702:	6a21      	ldr	r1, [r4, #32]
 8001704:	4628      	mov	r0, r5
 8001706:	47b0      	blx	r6
 8001708:	1c43      	adds	r3, r0, #1
 800170a:	89a3      	ldrh	r3, [r4, #12]
 800170c:	d106      	bne.n	800171c <__sflush_r+0x68>
 800170e:	6829      	ldr	r1, [r5, #0]
 8001710:	291d      	cmp	r1, #29
 8001712:	d848      	bhi.n	80017a6 <__sflush_r+0xf2>
 8001714:	4a29      	ldr	r2, [pc, #164]	; (80017bc <__sflush_r+0x108>)
 8001716:	40ca      	lsrs	r2, r1
 8001718:	07d6      	lsls	r6, r2, #31
 800171a:	d544      	bpl.n	80017a6 <__sflush_r+0xf2>
 800171c:	2200      	movs	r2, #0
 800171e:	6062      	str	r2, [r4, #4]
 8001720:	04d9      	lsls	r1, r3, #19
 8001722:	6922      	ldr	r2, [r4, #16]
 8001724:	6022      	str	r2, [r4, #0]
 8001726:	d504      	bpl.n	8001732 <__sflush_r+0x7e>
 8001728:	1c42      	adds	r2, r0, #1
 800172a:	d101      	bne.n	8001730 <__sflush_r+0x7c>
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	b903      	cbnz	r3, 8001732 <__sflush_r+0x7e>
 8001730:	6560      	str	r0, [r4, #84]	; 0x54
 8001732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001734:	602f      	str	r7, [r5, #0]
 8001736:	2900      	cmp	r1, #0
 8001738:	d0c9      	beq.n	80016ce <__sflush_r+0x1a>
 800173a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800173e:	4299      	cmp	r1, r3
 8001740:	d002      	beq.n	8001748 <__sflush_r+0x94>
 8001742:	4628      	mov	r0, r5
 8001744:	f000 f994 	bl	8001a70 <_free_r>
 8001748:	2000      	movs	r0, #0
 800174a:	6360      	str	r0, [r4, #52]	; 0x34
 800174c:	e7c0      	b.n	80016d0 <__sflush_r+0x1c>
 800174e:	2301      	movs	r3, #1
 8001750:	4628      	mov	r0, r5
 8001752:	47b0      	blx	r6
 8001754:	1c41      	adds	r1, r0, #1
 8001756:	d1c8      	bne.n	80016ea <__sflush_r+0x36>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0c5      	beq.n	80016ea <__sflush_r+0x36>
 800175e:	2b1d      	cmp	r3, #29
 8001760:	d001      	beq.n	8001766 <__sflush_r+0xb2>
 8001762:	2b16      	cmp	r3, #22
 8001764:	d101      	bne.n	800176a <__sflush_r+0xb6>
 8001766:	602f      	str	r7, [r5, #0]
 8001768:	e7b1      	b.n	80016ce <__sflush_r+0x1a>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001770:	81a3      	strh	r3, [r4, #12]
 8001772:	e7ad      	b.n	80016d0 <__sflush_r+0x1c>
 8001774:	690f      	ldr	r7, [r1, #16]
 8001776:	2f00      	cmp	r7, #0
 8001778:	d0a9      	beq.n	80016ce <__sflush_r+0x1a>
 800177a:	0793      	lsls	r3, r2, #30
 800177c:	680e      	ldr	r6, [r1, #0]
 800177e:	bf08      	it	eq
 8001780:	694b      	ldreq	r3, [r1, #20]
 8001782:	600f      	str	r7, [r1, #0]
 8001784:	bf18      	it	ne
 8001786:	2300      	movne	r3, #0
 8001788:	eba6 0807 	sub.w	r8, r6, r7
 800178c:	608b      	str	r3, [r1, #8]
 800178e:	f1b8 0f00 	cmp.w	r8, #0
 8001792:	dd9c      	ble.n	80016ce <__sflush_r+0x1a>
 8001794:	4643      	mov	r3, r8
 8001796:	463a      	mov	r2, r7
 8001798:	6a21      	ldr	r1, [r4, #32]
 800179a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800179c:	4628      	mov	r0, r5
 800179e:	47b0      	blx	r6
 80017a0:	2800      	cmp	r0, #0
 80017a2:	dc06      	bgt.n	80017b2 <__sflush_r+0xfe>
 80017a4:	89a3      	ldrh	r3, [r4, #12]
 80017a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017aa:	81a3      	strh	r3, [r4, #12]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	e78e      	b.n	80016d0 <__sflush_r+0x1c>
 80017b2:	4407      	add	r7, r0
 80017b4:	eba8 0800 	sub.w	r8, r8, r0
 80017b8:	e7e9      	b.n	800178e <__sflush_r+0xda>
 80017ba:	bf00      	nop
 80017bc:	20400001 	.word	0x20400001

080017c0 <_fflush_r>:
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	690b      	ldr	r3, [r1, #16]
 80017c4:	4605      	mov	r5, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	b1db      	cbz	r3, 8001802 <_fflush_r+0x42>
 80017ca:	b118      	cbz	r0, 80017d4 <_fflush_r+0x14>
 80017cc:	6983      	ldr	r3, [r0, #24]
 80017ce:	b90b      	cbnz	r3, 80017d4 <_fflush_r+0x14>
 80017d0:	f000 f860 	bl	8001894 <__sinit>
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <_fflush_r+0x48>)
 80017d6:	429c      	cmp	r4, r3
 80017d8:	d109      	bne.n	80017ee <_fflush_r+0x2e>
 80017da:	686c      	ldr	r4, [r5, #4]
 80017dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e0:	b17b      	cbz	r3, 8001802 <_fflush_r+0x42>
 80017e2:	4621      	mov	r1, r4
 80017e4:	4628      	mov	r0, r5
 80017e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017ea:	f7ff bf63 	b.w	80016b4 <__sflush_r>
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <_fflush_r+0x4c>)
 80017f0:	429c      	cmp	r4, r3
 80017f2:	d101      	bne.n	80017f8 <_fflush_r+0x38>
 80017f4:	68ac      	ldr	r4, [r5, #8]
 80017f6:	e7f1      	b.n	80017dc <_fflush_r+0x1c>
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <_fflush_r+0x50>)
 80017fa:	429c      	cmp	r4, r3
 80017fc:	bf08      	it	eq
 80017fe:	68ec      	ldreq	r4, [r5, #12]
 8001800:	e7ec      	b.n	80017dc <_fflush_r+0x1c>
 8001802:	2000      	movs	r0, #0
 8001804:	bd38      	pop	{r3, r4, r5, pc}
 8001806:	bf00      	nop
 8001808:	08002050 	.word	0x08002050
 800180c:	08002070 	.word	0x08002070
 8001810:	08002030 	.word	0x08002030

08001814 <std>:
 8001814:	2300      	movs	r3, #0
 8001816:	b510      	push	{r4, lr}
 8001818:	4604      	mov	r4, r0
 800181a:	e9c0 3300 	strd	r3, r3, [r0]
 800181e:	6083      	str	r3, [r0, #8]
 8001820:	8181      	strh	r1, [r0, #12]
 8001822:	6643      	str	r3, [r0, #100]	; 0x64
 8001824:	81c2      	strh	r2, [r0, #14]
 8001826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800182a:	6183      	str	r3, [r0, #24]
 800182c:	4619      	mov	r1, r3
 800182e:	2208      	movs	r2, #8
 8001830:	305c      	adds	r0, #92	; 0x5c
 8001832:	f7ff fe13 	bl	800145c <memset>
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <std+0x38>)
 8001838:	6263      	str	r3, [r4, #36]	; 0x24
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <std+0x3c>)
 800183c:	62a3      	str	r3, [r4, #40]	; 0x28
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <std+0x40>)
 8001840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <std+0x44>)
 8001844:	6224      	str	r4, [r4, #32]
 8001846:	6323      	str	r3, [r4, #48]	; 0x30
 8001848:	bd10      	pop	{r4, pc}
 800184a:	bf00      	nop
 800184c:	08001be1 	.word	0x08001be1
 8001850:	08001c03 	.word	0x08001c03
 8001854:	08001c3b 	.word	0x08001c3b
 8001858:	08001c5f 	.word	0x08001c5f

0800185c <_cleanup_r>:
 800185c:	4901      	ldr	r1, [pc, #4]	; (8001864 <_cleanup_r+0x8>)
 800185e:	f000 b885 	b.w	800196c <_fwalk_reent>
 8001862:	bf00      	nop
 8001864:	080017c1 	.word	0x080017c1

08001868 <__sfmoreglue>:
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	1e4a      	subs	r2, r1, #1
 800186c:	2568      	movs	r5, #104	; 0x68
 800186e:	4355      	muls	r5, r2
 8001870:	460e      	mov	r6, r1
 8001872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001876:	f000 f949 	bl	8001b0c <_malloc_r>
 800187a:	4604      	mov	r4, r0
 800187c:	b140      	cbz	r0, 8001890 <__sfmoreglue+0x28>
 800187e:	2100      	movs	r1, #0
 8001880:	e9c0 1600 	strd	r1, r6, [r0]
 8001884:	300c      	adds	r0, #12
 8001886:	60a0      	str	r0, [r4, #8]
 8001888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800188c:	f7ff fde6 	bl	800145c <memset>
 8001890:	4620      	mov	r0, r4
 8001892:	bd70      	pop	{r4, r5, r6, pc}

08001894 <__sinit>:
 8001894:	6983      	ldr	r3, [r0, #24]
 8001896:	b510      	push	{r4, lr}
 8001898:	4604      	mov	r4, r0
 800189a:	bb33      	cbnz	r3, 80018ea <__sinit+0x56>
 800189c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80018a0:	6503      	str	r3, [r0, #80]	; 0x50
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <__sinit+0x58>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <__sinit+0x5c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6282      	str	r2, [r0, #40]	; 0x28
 80018aa:	4298      	cmp	r0, r3
 80018ac:	bf04      	itt	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	6183      	streq	r3, [r0, #24]
 80018b2:	f000 f81f 	bl	80018f4 <__sfp>
 80018b6:	6060      	str	r0, [r4, #4]
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 f81b 	bl	80018f4 <__sfp>
 80018be:	60a0      	str	r0, [r4, #8]
 80018c0:	4620      	mov	r0, r4
 80018c2:	f000 f817 	bl	80018f4 <__sfp>
 80018c6:	2200      	movs	r2, #0
 80018c8:	60e0      	str	r0, [r4, #12]
 80018ca:	2104      	movs	r1, #4
 80018cc:	6860      	ldr	r0, [r4, #4]
 80018ce:	f7ff ffa1 	bl	8001814 <std>
 80018d2:	2201      	movs	r2, #1
 80018d4:	2109      	movs	r1, #9
 80018d6:	68a0      	ldr	r0, [r4, #8]
 80018d8:	f7ff ff9c 	bl	8001814 <std>
 80018dc:	2202      	movs	r2, #2
 80018de:	2112      	movs	r1, #18
 80018e0:	68e0      	ldr	r0, [r4, #12]
 80018e2:	f7ff ff97 	bl	8001814 <std>
 80018e6:	2301      	movs	r3, #1
 80018e8:	61a3      	str	r3, [r4, #24]
 80018ea:	bd10      	pop	{r4, pc}
 80018ec:	0800202c 	.word	0x0800202c
 80018f0:	0800185d 	.word	0x0800185d

080018f4 <__sfp>:
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <__sfp+0x70>)
 80018f8:	681e      	ldr	r6, [r3, #0]
 80018fa:	69b3      	ldr	r3, [r6, #24]
 80018fc:	4607      	mov	r7, r0
 80018fe:	b913      	cbnz	r3, 8001906 <__sfp+0x12>
 8001900:	4630      	mov	r0, r6
 8001902:	f7ff ffc7 	bl	8001894 <__sinit>
 8001906:	3648      	adds	r6, #72	; 0x48
 8001908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800190c:	3b01      	subs	r3, #1
 800190e:	d503      	bpl.n	8001918 <__sfp+0x24>
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	b133      	cbz	r3, 8001922 <__sfp+0x2e>
 8001914:	6836      	ldr	r6, [r6, #0]
 8001916:	e7f7      	b.n	8001908 <__sfp+0x14>
 8001918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800191c:	b16d      	cbz	r5, 800193a <__sfp+0x46>
 800191e:	3468      	adds	r4, #104	; 0x68
 8001920:	e7f4      	b.n	800190c <__sfp+0x18>
 8001922:	2104      	movs	r1, #4
 8001924:	4638      	mov	r0, r7
 8001926:	f7ff ff9f 	bl	8001868 <__sfmoreglue>
 800192a:	6030      	str	r0, [r6, #0]
 800192c:	2800      	cmp	r0, #0
 800192e:	d1f1      	bne.n	8001914 <__sfp+0x20>
 8001930:	230c      	movs	r3, #12
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4604      	mov	r4, r0
 8001936:	4620      	mov	r0, r4
 8001938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <__sfp+0x74>)
 800193c:	6665      	str	r5, [r4, #100]	; 0x64
 800193e:	e9c4 5500 	strd	r5, r5, [r4]
 8001942:	60a5      	str	r5, [r4, #8]
 8001944:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001948:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800194c:	2208      	movs	r2, #8
 800194e:	4629      	mov	r1, r5
 8001950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001954:	f7ff fd82 	bl	800145c <memset>
 8001958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800195c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001960:	e7e9      	b.n	8001936 <__sfp+0x42>
 8001962:	bf00      	nop
 8001964:	0800202c 	.word	0x0800202c
 8001968:	ffff0001 	.word	0xffff0001

0800196c <_fwalk_reent>:
 800196c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001970:	4680      	mov	r8, r0
 8001972:	4689      	mov	r9, r1
 8001974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001978:	2600      	movs	r6, #0
 800197a:	b914      	cbnz	r4, 8001982 <_fwalk_reent+0x16>
 800197c:	4630      	mov	r0, r6
 800197e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001982:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001986:	3f01      	subs	r7, #1
 8001988:	d501      	bpl.n	800198e <_fwalk_reent+0x22>
 800198a:	6824      	ldr	r4, [r4, #0]
 800198c:	e7f5      	b.n	800197a <_fwalk_reent+0xe>
 800198e:	89ab      	ldrh	r3, [r5, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d907      	bls.n	80019a4 <_fwalk_reent+0x38>
 8001994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001998:	3301      	adds	r3, #1
 800199a:	d003      	beq.n	80019a4 <_fwalk_reent+0x38>
 800199c:	4629      	mov	r1, r5
 800199e:	4640      	mov	r0, r8
 80019a0:	47c8      	blx	r9
 80019a2:	4306      	orrs	r6, r0
 80019a4:	3568      	adds	r5, #104	; 0x68
 80019a6:	e7ee      	b.n	8001986 <_fwalk_reent+0x1a>

080019a8 <__swhatbuf_r>:
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	460e      	mov	r6, r1
 80019ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b0:	2900      	cmp	r1, #0
 80019b2:	b096      	sub	sp, #88	; 0x58
 80019b4:	4614      	mov	r4, r2
 80019b6:	461d      	mov	r5, r3
 80019b8:	da07      	bge.n	80019ca <__swhatbuf_r+0x22>
 80019ba:	2300      	movs	r3, #0
 80019bc:	602b      	str	r3, [r5, #0]
 80019be:	89b3      	ldrh	r3, [r6, #12]
 80019c0:	061a      	lsls	r2, r3, #24
 80019c2:	d410      	bmi.n	80019e6 <__swhatbuf_r+0x3e>
 80019c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c8:	e00e      	b.n	80019e8 <__swhatbuf_r+0x40>
 80019ca:	466a      	mov	r2, sp
 80019cc:	f000 f96e 	bl	8001cac <_fstat_r>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	dbf2      	blt.n	80019ba <__swhatbuf_r+0x12>
 80019d4:	9a01      	ldr	r2, [sp, #4]
 80019d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019de:	425a      	negs	r2, r3
 80019e0:	415a      	adcs	r2, r3
 80019e2:	602a      	str	r2, [r5, #0]
 80019e4:	e7ee      	b.n	80019c4 <__swhatbuf_r+0x1c>
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	2000      	movs	r0, #0
 80019ea:	6023      	str	r3, [r4, #0]
 80019ec:	b016      	add	sp, #88	; 0x58
 80019ee:	bd70      	pop	{r4, r5, r6, pc}

080019f0 <__smakebuf_r>:
 80019f0:	898b      	ldrh	r3, [r1, #12]
 80019f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019f4:	079d      	lsls	r5, r3, #30
 80019f6:	4606      	mov	r6, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	d507      	bpl.n	8001a0c <__smakebuf_r+0x1c>
 80019fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a00:	6023      	str	r3, [r4, #0]
 8001a02:	6123      	str	r3, [r4, #16]
 8001a04:	2301      	movs	r3, #1
 8001a06:	6163      	str	r3, [r4, #20]
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
 8001a0c:	ab01      	add	r3, sp, #4
 8001a0e:	466a      	mov	r2, sp
 8001a10:	f7ff ffca 	bl	80019a8 <__swhatbuf_r>
 8001a14:	9900      	ldr	r1, [sp, #0]
 8001a16:	4605      	mov	r5, r0
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f000 f877 	bl	8001b0c <_malloc_r>
 8001a1e:	b948      	cbnz	r0, 8001a34 <__smakebuf_r+0x44>
 8001a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a24:	059a      	lsls	r2, r3, #22
 8001a26:	d4ef      	bmi.n	8001a08 <__smakebuf_r+0x18>
 8001a28:	f023 0303 	bic.w	r3, r3, #3
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	81a3      	strh	r3, [r4, #12]
 8001a32:	e7e3      	b.n	80019fc <__smakebuf_r+0xc>
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <__smakebuf_r+0x7c>)
 8001a36:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	6020      	str	r0, [r4, #0]
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	81a3      	strh	r3, [r4, #12]
 8001a42:	9b00      	ldr	r3, [sp, #0]
 8001a44:	6163      	str	r3, [r4, #20]
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	6120      	str	r0, [r4, #16]
 8001a4a:	b15b      	cbz	r3, 8001a64 <__smakebuf_r+0x74>
 8001a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a50:	4630      	mov	r0, r6
 8001a52:	f000 f93d 	bl	8001cd0 <_isatty_r>
 8001a56:	b128      	cbz	r0, 8001a64 <__smakebuf_r+0x74>
 8001a58:	89a3      	ldrh	r3, [r4, #12]
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	81a3      	strh	r3, [r4, #12]
 8001a64:	89a3      	ldrh	r3, [r4, #12]
 8001a66:	431d      	orrs	r5, r3
 8001a68:	81a5      	strh	r5, [r4, #12]
 8001a6a:	e7cd      	b.n	8001a08 <__smakebuf_r+0x18>
 8001a6c:	0800185d 	.word	0x0800185d

08001a70 <_free_r>:
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	4605      	mov	r5, r0
 8001a74:	2900      	cmp	r1, #0
 8001a76:	d045      	beq.n	8001b04 <_free_r+0x94>
 8001a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a7c:	1f0c      	subs	r4, r1, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bfb8      	it	lt
 8001a82:	18e4      	addlt	r4, r4, r3
 8001a84:	f000 f946 	bl	8001d14 <__malloc_lock>
 8001a88:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <_free_r+0x98>)
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	b933      	cbnz	r3, 8001a9e <_free_r+0x2e>
 8001a90:	6063      	str	r3, [r4, #4]
 8001a92:	6014      	str	r4, [r2, #0]
 8001a94:	4628      	mov	r0, r5
 8001a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a9a:	f000 b93c 	b.w	8001d16 <__malloc_unlock>
 8001a9e:	42a3      	cmp	r3, r4
 8001aa0:	d90c      	bls.n	8001abc <_free_r+0x4c>
 8001aa2:	6821      	ldr	r1, [r4, #0]
 8001aa4:	1862      	adds	r2, r4, r1
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	bf04      	itt	eq
 8001aaa:	681a      	ldreq	r2, [r3, #0]
 8001aac:	685b      	ldreq	r3, [r3, #4]
 8001aae:	6063      	str	r3, [r4, #4]
 8001ab0:	bf04      	itt	eq
 8001ab2:	1852      	addeq	r2, r2, r1
 8001ab4:	6022      	streq	r2, [r4, #0]
 8001ab6:	6004      	str	r4, [r0, #0]
 8001ab8:	e7ec      	b.n	8001a94 <_free_r+0x24>
 8001aba:	4613      	mov	r3, r2
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	b10a      	cbz	r2, 8001ac4 <_free_r+0x54>
 8001ac0:	42a2      	cmp	r2, r4
 8001ac2:	d9fa      	bls.n	8001aba <_free_r+0x4a>
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	1858      	adds	r0, r3, r1
 8001ac8:	42a0      	cmp	r0, r4
 8001aca:	d10b      	bne.n	8001ae4 <_free_r+0x74>
 8001acc:	6820      	ldr	r0, [r4, #0]
 8001ace:	4401      	add	r1, r0
 8001ad0:	1858      	adds	r0, r3, r1
 8001ad2:	4282      	cmp	r2, r0
 8001ad4:	6019      	str	r1, [r3, #0]
 8001ad6:	d1dd      	bne.n	8001a94 <_free_r+0x24>
 8001ad8:	6810      	ldr	r0, [r2, #0]
 8001ada:	6852      	ldr	r2, [r2, #4]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	4401      	add	r1, r0
 8001ae0:	6019      	str	r1, [r3, #0]
 8001ae2:	e7d7      	b.n	8001a94 <_free_r+0x24>
 8001ae4:	d902      	bls.n	8001aec <_free_r+0x7c>
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	602b      	str	r3, [r5, #0]
 8001aea:	e7d3      	b.n	8001a94 <_free_r+0x24>
 8001aec:	6820      	ldr	r0, [r4, #0]
 8001aee:	1821      	adds	r1, r4, r0
 8001af0:	428a      	cmp	r2, r1
 8001af2:	bf04      	itt	eq
 8001af4:	6811      	ldreq	r1, [r2, #0]
 8001af6:	6852      	ldreq	r2, [r2, #4]
 8001af8:	6062      	str	r2, [r4, #4]
 8001afa:	bf04      	itt	eq
 8001afc:	1809      	addeq	r1, r1, r0
 8001afe:	6021      	streq	r1, [r4, #0]
 8001b00:	605c      	str	r4, [r3, #4]
 8001b02:	e7c7      	b.n	8001a94 <_free_r+0x24>
 8001b04:	bd38      	pop	{r3, r4, r5, pc}
 8001b06:	bf00      	nop
 8001b08:	200000a8 	.word	0x200000a8

08001b0c <_malloc_r>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	1ccd      	adds	r5, r1, #3
 8001b10:	f025 0503 	bic.w	r5, r5, #3
 8001b14:	3508      	adds	r5, #8
 8001b16:	2d0c      	cmp	r5, #12
 8001b18:	bf38      	it	cc
 8001b1a:	250c      	movcc	r5, #12
 8001b1c:	2d00      	cmp	r5, #0
 8001b1e:	4606      	mov	r6, r0
 8001b20:	db01      	blt.n	8001b26 <_malloc_r+0x1a>
 8001b22:	42a9      	cmp	r1, r5
 8001b24:	d903      	bls.n	8001b2e <_malloc_r+0x22>
 8001b26:	230c      	movs	r3, #12
 8001b28:	6033      	str	r3, [r6, #0]
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
 8001b2e:	f000 f8f1 	bl	8001d14 <__malloc_lock>
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <_malloc_r+0xac>)
 8001b34:	6814      	ldr	r4, [r2, #0]
 8001b36:	4621      	mov	r1, r4
 8001b38:	b991      	cbnz	r1, 8001b60 <_malloc_r+0x54>
 8001b3a:	4c20      	ldr	r4, [pc, #128]	; (8001bbc <_malloc_r+0xb0>)
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	b91b      	cbnz	r3, 8001b48 <_malloc_r+0x3c>
 8001b40:	4630      	mov	r0, r6
 8001b42:	f000 f83d 	bl	8001bc0 <_sbrk_r>
 8001b46:	6020      	str	r0, [r4, #0]
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f000 f838 	bl	8001bc0 <_sbrk_r>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	d124      	bne.n	8001b9e <_malloc_r+0x92>
 8001b54:	230c      	movs	r3, #12
 8001b56:	6033      	str	r3, [r6, #0]
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f000 f8dc 	bl	8001d16 <__malloc_unlock>
 8001b5e:	e7e4      	b.n	8001b2a <_malloc_r+0x1e>
 8001b60:	680b      	ldr	r3, [r1, #0]
 8001b62:	1b5b      	subs	r3, r3, r5
 8001b64:	d418      	bmi.n	8001b98 <_malloc_r+0x8c>
 8001b66:	2b0b      	cmp	r3, #11
 8001b68:	d90f      	bls.n	8001b8a <_malloc_r+0x7e>
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	50cd      	str	r5, [r1, r3]
 8001b6e:	18cc      	adds	r4, r1, r3
 8001b70:	4630      	mov	r0, r6
 8001b72:	f000 f8d0 	bl	8001d16 <__malloc_unlock>
 8001b76:	f104 000b 	add.w	r0, r4, #11
 8001b7a:	1d23      	adds	r3, r4, #4
 8001b7c:	f020 0007 	bic.w	r0, r0, #7
 8001b80:	1ac3      	subs	r3, r0, r3
 8001b82:	d0d3      	beq.n	8001b2c <_malloc_r+0x20>
 8001b84:	425a      	negs	r2, r3
 8001b86:	50e2      	str	r2, [r4, r3]
 8001b88:	e7d0      	b.n	8001b2c <_malloc_r+0x20>
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	684b      	ldr	r3, [r1, #4]
 8001b8e:	bf16      	itet	ne
 8001b90:	6063      	strne	r3, [r4, #4]
 8001b92:	6013      	streq	r3, [r2, #0]
 8001b94:	460c      	movne	r4, r1
 8001b96:	e7eb      	b.n	8001b70 <_malloc_r+0x64>
 8001b98:	460c      	mov	r4, r1
 8001b9a:	6849      	ldr	r1, [r1, #4]
 8001b9c:	e7cc      	b.n	8001b38 <_malloc_r+0x2c>
 8001b9e:	1cc4      	adds	r4, r0, #3
 8001ba0:	f024 0403 	bic.w	r4, r4, #3
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	d005      	beq.n	8001bb4 <_malloc_r+0xa8>
 8001ba8:	1a21      	subs	r1, r4, r0
 8001baa:	4630      	mov	r0, r6
 8001bac:	f000 f808 	bl	8001bc0 <_sbrk_r>
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	d0cf      	beq.n	8001b54 <_malloc_r+0x48>
 8001bb4:	6025      	str	r5, [r4, #0]
 8001bb6:	e7db      	b.n	8001b70 <_malloc_r+0x64>
 8001bb8:	200000a8 	.word	0x200000a8
 8001bbc:	200000ac 	.word	0x200000ac

08001bc0 <_sbrk_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4c06      	ldr	r4, [pc, #24]	; (8001bdc <_sbrk_r+0x1c>)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	6023      	str	r3, [r4, #0]
 8001bcc:	f7fe fc04 	bl	80003d8 <_sbrk>
 8001bd0:	1c43      	adds	r3, r0, #1
 8001bd2:	d102      	bne.n	8001bda <_sbrk_r+0x1a>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	b103      	cbz	r3, 8001bda <_sbrk_r+0x1a>
 8001bd8:	602b      	str	r3, [r5, #0]
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
 8001bdc:	20000170 	.word	0x20000170

08001be0 <__sread>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	460c      	mov	r4, r1
 8001be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001be8:	f000 f896 	bl	8001d18 <_read_r>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	bfab      	itete	ge
 8001bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8001bf4:	181b      	addge	r3, r3, r0
 8001bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bfa:	bfac      	ite	ge
 8001bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bfe:	81a3      	strhlt	r3, [r4, #12]
 8001c00:	bd10      	pop	{r4, pc}

08001c02 <__swrite>:
 8001c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c06:	461f      	mov	r7, r3
 8001c08:	898b      	ldrh	r3, [r1, #12]
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	4605      	mov	r5, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	4616      	mov	r6, r2
 8001c12:	d505      	bpl.n	8001c20 <__swrite+0x1e>
 8001c14:	2302      	movs	r3, #2
 8001c16:	2200      	movs	r2, #0
 8001c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c1c:	f000 f868 	bl	8001cf0 <_lseek_r>
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4628      	mov	r0, r5
 8001c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c36:	f000 b817 	b.w	8001c68 <_write_r>

08001c3a <__sseek>:
 8001c3a:	b510      	push	{r4, lr}
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c42:	f000 f855 	bl	8001cf0 <_lseek_r>
 8001c46:	1c43      	adds	r3, r0, #1
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	bf15      	itete	ne
 8001c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c56:	81a3      	strheq	r3, [r4, #12]
 8001c58:	bf18      	it	ne
 8001c5a:	81a3      	strhne	r3, [r4, #12]
 8001c5c:	bd10      	pop	{r4, pc}

08001c5e <__sclose>:
 8001c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c62:	f000 b813 	b.w	8001c8c <_close_r>
	...

08001c68 <_write_r>:
 8001c68:	b538      	push	{r3, r4, r5, lr}
 8001c6a:	4c07      	ldr	r4, [pc, #28]	; (8001c88 <_write_r+0x20>)
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	4608      	mov	r0, r1
 8001c70:	4611      	mov	r1, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	6022      	str	r2, [r4, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f000 f911 	bl	8001e9e <_write>
 8001c7c:	1c43      	adds	r3, r0, #1
 8001c7e:	d102      	bne.n	8001c86 <_write_r+0x1e>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	b103      	cbz	r3, 8001c86 <_write_r+0x1e>
 8001c84:	602b      	str	r3, [r5, #0]
 8001c86:	bd38      	pop	{r3, r4, r5, pc}
 8001c88:	20000170 	.word	0x20000170

08001c8c <_close_r>:
 8001c8c:	b538      	push	{r3, r4, r5, lr}
 8001c8e:	4c06      	ldr	r4, [pc, #24]	; (8001ca8 <_close_r+0x1c>)
 8001c90:	2300      	movs	r3, #0
 8001c92:	4605      	mov	r5, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	6023      	str	r3, [r4, #0]
 8001c98:	f000 f930 	bl	8001efc <_close>
 8001c9c:	1c43      	adds	r3, r0, #1
 8001c9e:	d102      	bne.n	8001ca6 <_close_r+0x1a>
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	b103      	cbz	r3, 8001ca6 <_close_r+0x1a>
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	bd38      	pop	{r3, r4, r5, pc}
 8001ca8:	20000170 	.word	0x20000170

08001cac <_fstat_r>:
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4c07      	ldr	r4, [pc, #28]	; (8001ccc <_fstat_r+0x20>)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	4605      	mov	r5, r0
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	f000 f966 	bl	8001f8a <_fstat>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	d102      	bne.n	8001cc8 <_fstat_r+0x1c>
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	b103      	cbz	r3, 8001cc8 <_fstat_r+0x1c>
 8001cc6:	602b      	str	r3, [r5, #0]
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000170 	.word	0x20000170

08001cd0 <_isatty_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4c06      	ldr	r4, [pc, #24]	; (8001cec <_isatty_r+0x1c>)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	6023      	str	r3, [r4, #0]
 8001cdc:	f000 f963 	bl	8001fa6 <_isatty>
 8001ce0:	1c43      	adds	r3, r0, #1
 8001ce2:	d102      	bne.n	8001cea <_isatty_r+0x1a>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	b103      	cbz	r3, 8001cea <_isatty_r+0x1a>
 8001ce8:	602b      	str	r3, [r5, #0]
 8001cea:	bd38      	pop	{r3, r4, r5, pc}
 8001cec:	20000170 	.word	0x20000170

08001cf0 <_lseek_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4c07      	ldr	r4, [pc, #28]	; (8001d10 <_lseek_r+0x20>)
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	4608      	mov	r0, r1
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	6022      	str	r2, [r4, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f000 f8bb 	bl	8001e7a <_lseek>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d102      	bne.n	8001d0e <_lseek_r+0x1e>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	b103      	cbz	r3, 8001d0e <_lseek_r+0x1e>
 8001d0c:	602b      	str	r3, [r5, #0]
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	20000170 	.word	0x20000170

08001d14 <__malloc_lock>:
 8001d14:	4770      	bx	lr

08001d16 <__malloc_unlock>:
 8001d16:	4770      	bx	lr

08001d18 <_read_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4c07      	ldr	r4, [pc, #28]	; (8001d38 <_read_r+0x20>)
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4611      	mov	r1, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	6022      	str	r2, [r4, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f000 f850 	bl	8001dcc <_read>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d102      	bne.n	8001d36 <_read_r+0x1e>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	b103      	cbz	r3, 8001d36 <_read_r+0x1e>
 8001d34:	602b      	str	r3, [r5, #0]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	20000170 	.word	0x20000170

08001d3c <findslot>:
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <findslot+0x2c>)
 8001d3e:	b510      	push	{r4, lr}
 8001d40:	4604      	mov	r4, r0
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	b118      	cbz	r0, 8001d4e <findslot+0x12>
 8001d46:	6983      	ldr	r3, [r0, #24]
 8001d48:	b90b      	cbnz	r3, 8001d4e <findslot+0x12>
 8001d4a:	f7ff fda3 	bl	8001894 <__sinit>
 8001d4e:	2c13      	cmp	r4, #19
 8001d50:	d807      	bhi.n	8001d62 <findslot+0x26>
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <findslot+0x30>)
 8001d54:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	d002      	beq.n	8001d62 <findslot+0x26>
 8001d5c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	2000      	movs	r0, #0
 8001d64:	e7fc      	b.n	8001d60 <findslot+0x24>
 8001d66:	bf00      	nop
 8001d68:	20000020 	.word	0x20000020
 8001d6c:	200000b0 	.word	0x200000b0

08001d70 <checkerror>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	1c43      	adds	r3, r0, #1
 8001d74:	4605      	mov	r5, r0
 8001d76:	d109      	bne.n	8001d8c <checkerror+0x1c>
 8001d78:	f7ff fb46 	bl	8001408 <__errno>
 8001d7c:	2413      	movs	r4, #19
 8001d7e:	4606      	mov	r6, r0
 8001d80:	2700      	movs	r7, #0
 8001d82:	4620      	mov	r0, r4
 8001d84:	4639      	mov	r1, r7
 8001d86:	beab      	bkpt	0x00ab
 8001d88:	4604      	mov	r4, r0
 8001d8a:	6034      	str	r4, [r6, #0]
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d90 <error>:
 8001d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d92:	4605      	mov	r5, r0
 8001d94:	f7ff fb38 	bl	8001408 <__errno>
 8001d98:	2413      	movs	r4, #19
 8001d9a:	4606      	mov	r6, r0
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4639      	mov	r1, r7
 8001da2:	beab      	bkpt	0x00ab
 8001da4:	4604      	mov	r4, r0
 8001da6:	6034      	str	r4, [r6, #0]
 8001da8:	4628      	mov	r0, r5
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001dac <_swiread>:
 8001dac:	b530      	push	{r4, r5, lr}
 8001dae:	b085      	sub	sp, #20
 8001db0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001db4:	9203      	str	r2, [sp, #12]
 8001db6:	2406      	movs	r4, #6
 8001db8:	ad01      	add	r5, sp, #4
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	beab      	bkpt	0x00ab
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff ffd4 	bl	8001d70 <checkerror>
 8001dc8:	b005      	add	sp, #20
 8001dca:	bd30      	pop	{r4, r5, pc}

08001dcc <_read>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	460e      	mov	r6, r1
 8001dd0:	4615      	mov	r5, r2
 8001dd2:	f7ff ffb3 	bl	8001d3c <findslot>
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	b930      	cbnz	r0, 8001de8 <_read+0x1c>
 8001dda:	f7ff fb15 	bl	8001408 <__errno>
 8001dde:	2309      	movs	r3, #9
 8001de0:	6003      	str	r3, [r0, #0]
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	462a      	mov	r2, r5
 8001dea:	4631      	mov	r1, r6
 8001dec:	6800      	ldr	r0, [r0, #0]
 8001dee:	f7ff ffdd 	bl	8001dac <_swiread>
 8001df2:	1c43      	adds	r3, r0, #1
 8001df4:	bf1f      	itttt	ne
 8001df6:	6863      	ldrne	r3, [r4, #4]
 8001df8:	1a28      	subne	r0, r5, r0
 8001dfa:	181b      	addne	r3, r3, r0
 8001dfc:	6063      	strne	r3, [r4, #4]
 8001dfe:	e7f2      	b.n	8001de6 <_read+0x1a>

08001e00 <_swilseek>:
 8001e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e02:	460c      	mov	r4, r1
 8001e04:	4616      	mov	r6, r2
 8001e06:	f7ff ff99 	bl	8001d3c <findslot>
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	b940      	cbnz	r0, 8001e20 <_swilseek+0x20>
 8001e0e:	f7ff fafb 	bl	8001408 <__errno>
 8001e12:	2309      	movs	r3, #9
 8001e14:	6003      	str	r3, [r0, #0]
 8001e16:	f04f 34ff 	mov.w	r4, #4294967295
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e20:	2e02      	cmp	r6, #2
 8001e22:	d903      	bls.n	8001e2c <_swilseek+0x2c>
 8001e24:	f7ff faf0 	bl	8001408 <__errno>
 8001e28:	2316      	movs	r3, #22
 8001e2a:	e7f3      	b.n	8001e14 <_swilseek+0x14>
 8001e2c:	2e01      	cmp	r6, #1
 8001e2e:	d112      	bne.n	8001e56 <_swilseek+0x56>
 8001e30:	6843      	ldr	r3, [r0, #4]
 8001e32:	18e4      	adds	r4, r4, r3
 8001e34:	d4f6      	bmi.n	8001e24 <_swilseek+0x24>
 8001e36:	682b      	ldr	r3, [r5, #0]
 8001e38:	260a      	movs	r6, #10
 8001e3a:	e9cd 3400 	strd	r3, r4, [sp]
 8001e3e:	466f      	mov	r7, sp
 8001e40:	4630      	mov	r0, r6
 8001e42:	4639      	mov	r1, r7
 8001e44:	beab      	bkpt	0x00ab
 8001e46:	4606      	mov	r6, r0
 8001e48:	4630      	mov	r0, r6
 8001e4a:	f7ff ff91 	bl	8001d70 <checkerror>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	dbe1      	blt.n	8001e16 <_swilseek+0x16>
 8001e52:	606c      	str	r4, [r5, #4]
 8001e54:	e7e1      	b.n	8001e1a <_swilseek+0x1a>
 8001e56:	2e02      	cmp	r6, #2
 8001e58:	d1ed      	bne.n	8001e36 <_swilseek+0x36>
 8001e5a:	af02      	add	r7, sp, #8
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001e62:	260c      	movs	r6, #12
 8001e64:	4630      	mov	r0, r6
 8001e66:	4639      	mov	r1, r7
 8001e68:	beab      	bkpt	0x00ab
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f7ff ff7f 	bl	8001d70 <checkerror>
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	d0cf      	beq.n	8001e16 <_swilseek+0x16>
 8001e76:	4404      	add	r4, r0
 8001e78:	e7dd      	b.n	8001e36 <_swilseek+0x36>

08001e7a <_lseek>:
 8001e7a:	f7ff bfc1 	b.w	8001e00 <_swilseek>

08001e7e <_swiwrite>:
 8001e7e:	b530      	push	{r4, r5, lr}
 8001e80:	b085      	sub	sp, #20
 8001e82:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2405      	movs	r4, #5
 8001e8a:	ad01      	add	r5, sp, #4
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	beab      	bkpt	0x00ab
 8001e92:	4604      	mov	r4, r0
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff ff6b 	bl	8001d70 <checkerror>
 8001e9a:	b005      	add	sp, #20
 8001e9c:	bd30      	pop	{r4, r5, pc}

08001e9e <_write>:
 8001e9e:	b570      	push	{r4, r5, r6, lr}
 8001ea0:	460e      	mov	r6, r1
 8001ea2:	4615      	mov	r5, r2
 8001ea4:	f7ff ff4a 	bl	8001d3c <findslot>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	b930      	cbnz	r0, 8001eba <_write+0x1c>
 8001eac:	f7ff faac 	bl	8001408 <__errno>
 8001eb0:	2309      	movs	r3, #9
 8001eb2:	6003      	str	r3, [r0, #0]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
 8001eba:	462a      	mov	r2, r5
 8001ebc:	4631      	mov	r1, r6
 8001ebe:	6800      	ldr	r0, [r0, #0]
 8001ec0:	f7ff ffdd 	bl	8001e7e <_swiwrite>
 8001ec4:	1e02      	subs	r2, r0, #0
 8001ec6:	dbf5      	blt.n	8001eb4 <_write+0x16>
 8001ec8:	6863      	ldr	r3, [r4, #4]
 8001eca:	1aa8      	subs	r0, r5, r2
 8001ecc:	4403      	add	r3, r0
 8001ece:	42aa      	cmp	r2, r5
 8001ed0:	6063      	str	r3, [r4, #4]
 8001ed2:	d1f1      	bne.n	8001eb8 <_write+0x1a>
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001eda:	f7ff bf59 	b.w	8001d90 <error>

08001ede <_swiclose>:
 8001ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ee0:	ad02      	add	r5, sp, #8
 8001ee2:	2402      	movs	r4, #2
 8001ee4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	beab      	bkpt	0x00ab
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff ff3d 	bl	8001d70 <checkerror>
 8001ef6:	b003      	add	sp, #12
 8001ef8:	bd30      	pop	{r4, r5, pc}
	...

08001efc <_close>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4605      	mov	r5, r0
 8001f00:	f7ff ff1c 	bl	8001d3c <findslot>
 8001f04:	4604      	mov	r4, r0
 8001f06:	b930      	cbnz	r0, 8001f16 <_close+0x1a>
 8001f08:	f7ff fa7e 	bl	8001408 <__errno>
 8001f0c:	2309      	movs	r3, #9
 8001f0e:	6003      	str	r3, [r0, #0]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
 8001f16:	3d01      	subs	r5, #1
 8001f18:	2d01      	cmp	r5, #1
 8001f1a:	d809      	bhi.n	8001f30 <_close+0x34>
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <_close+0x48>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d104      	bne.n	8001f30 <_close+0x34>
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	6003      	str	r3, [r0, #0]
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7f1      	b.n	8001f14 <_close+0x18>
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	f7ff ffd4 	bl	8001ede <_swiclose>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d1ec      	bne.n	8001f14 <_close+0x18>
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	6023      	str	r3, [r4, #0]
 8001f40:	e7e8      	b.n	8001f14 <_close+0x18>
 8001f42:	bf00      	nop
 8001f44:	200000b0 	.word	0x200000b0

08001f48 <_swistat>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	f7ff fef6 	bl	8001d3c <findslot>
 8001f50:	4606      	mov	r6, r0
 8001f52:	b930      	cbnz	r0, 8001f62 <_swistat+0x1a>
 8001f54:	f7ff fa58 	bl	8001408 <__errno>
 8001f58:	2309      	movs	r3, #9
 8001f5a:	6003      	str	r3, [r0, #0]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
 8001f62:	6863      	ldr	r3, [r4, #4]
 8001f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f68:	6063      	str	r3, [r4, #4]
 8001f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6e:	6463      	str	r3, [r4, #68]	; 0x44
 8001f70:	250c      	movs	r5, #12
 8001f72:	4628      	mov	r0, r5
 8001f74:	4631      	mov	r1, r6
 8001f76:	beab      	bkpt	0x00ab
 8001f78:	4605      	mov	r5, r0
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f7ff fef8 	bl	8001d70 <checkerror>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	bf1c      	itt	ne
 8001f84:	6120      	strne	r0, [r4, #16]
 8001f86:	2000      	movne	r0, #0
 8001f88:	e7ea      	b.n	8001f60 <_swistat+0x18>

08001f8a <_fstat>:
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4604      	mov	r4, r0
 8001f92:	2258      	movs	r2, #88	; 0x58
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fa61 	bl	800145c <memset>
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fa2:	f7ff bfd1 	b.w	8001f48 <_swistat>

08001fa6 <_isatty>:
 8001fa6:	b570      	push	{r4, r5, r6, lr}
 8001fa8:	f7ff fec8 	bl	8001d3c <findslot>
 8001fac:	2509      	movs	r5, #9
 8001fae:	4604      	mov	r4, r0
 8001fb0:	b920      	cbnz	r0, 8001fbc <_isatty+0x16>
 8001fb2:	f7ff fa29 	bl	8001408 <__errno>
 8001fb6:	6005      	str	r5, [r0, #0]
 8001fb8:	4620      	mov	r0, r4
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	beab      	bkpt	0x00ab
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	2c01      	cmp	r4, #1
 8001fc6:	d0f7      	beq.n	8001fb8 <_isatty+0x12>
 8001fc8:	f7ff fa1e 	bl	8001408 <__errno>
 8001fcc:	2400      	movs	r4, #0
 8001fce:	4606      	mov	r6, r0
 8001fd0:	2513      	movs	r5, #19
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	beab      	bkpt	0x00ab
 8001fd8:	4605      	mov	r5, r0
 8001fda:	6035      	str	r5, [r6, #0]
 8001fdc:	e7ec      	b.n	8001fb8 <_isatty+0x12>
	...

08001fe0 <_init>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr

08001fec <_fini>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	bf00      	nop
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr
