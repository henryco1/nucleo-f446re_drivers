
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000df8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fe4  08000fe4  00020400  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe4  08000fe4  00020400  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe4  08000fe4  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe8  08000fe8  00010fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08000fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000400  080013ec  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080013ec  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000381b  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000086b  00000000  00000000  00023c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  000244b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00024670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001a93  00000000  00000000  000247e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002011  00000000  00000000  00026273  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b929  00000000  00000000  00028284  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000640  00000000  00000000  00033c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000400 	.word	0x20000400
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000fa4 	.word	0x08000fa4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000404 	.word	0x20000404
 8000200:	08000fa4 	.word	0x08000fa4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
//uint8_t TxBuffer[] = "Hello World.....I am a very nice robotic machine. I can help with reading books, brewing coffee, and carrying heavy items. I hope that we can become good friends...unless 0.0 uwu 0.0 uwu 0.0 uwu 0.0 uwu 0.0 uwu 0.0 uwu 0.0 uwu 0.0 :flushed:";
char msg[1024] = "UART Hello World\n";
/*
 * PUPD LED control
 */
void delay(int value) {
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e002      	b.n	8000228 <delay+0x14>
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f8      	bcc.n	8000222 <delay+0xe>
}
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <UART4_GPIO_Init>:
/*
 * PC10 = TX
 * PC11 = RX
 * Alt Func mode = 7
 */
void UART4_GPIO_Init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t USARTPins;
	USARTPins.pGPIOx = GPIOC;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <UART4_GPIO_Init+0x40>)
 8000244:	607b      	str	r3, [r7, #4]

	USARTPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	USARTPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 8;
 800024a:	2308      	movs	r3, #8
 800024c:	737b      	strb	r3, [r7, #13]
	USARTPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSH_PULL; // why push pull
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	USARTPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 8000252:	2301      	movs	r3, #1
 8000254:	72fb      	strb	r3, [r7, #11]
	USARTPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000256:	2302      	movs	r3, #2
 8000258:	72bb      	strb	r3, [r7, #10]

	// TX
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 800025a:	230a      	movs	r3, #10
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f947 	bl	80004f4 <GPIO_Init>

	// RX
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000266:	230b      	movs	r3, #11
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f941 	bl	80004f4 <GPIO_Init>
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020800 	.word	0x40020800

08000280 <UART4_Init>:

void UART4_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	UART4Handle.pUSARTx = UART4;
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <UART4_Init+0x3c>)
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <UART4_Init+0x40>)
 8000288:	601a      	str	r2, [r3, #0]
	UART4Handle.USART_Config.USART_BaudRate = USART_STD_BAUD_115200;
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <UART4_Init+0x3c>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000290:	609a      	str	r2, [r3, #8]
	UART4Handle.USART_Config.USART_DeviceMode = USART_DEVICE_MODE_TX_ONLY;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <UART4_Init+0x3c>)
 8000294:	2200      	movs	r2, #0
 8000296:	711a      	strb	r2, [r3, #4]
	UART4Handle.USART_Config.USART_HwFlowCtrl = USART_HW_FLOW_CTRL_NONE;
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <UART4_Init+0x3c>)
 800029a:	2200      	movs	r2, #0
 800029c:	73da      	strb	r2, [r3, #15]
	UART4Handle.USART_Config.USART_NumStopBits = USART_NUM_STOP_BITS_1;
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <UART4_Init+0x3c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	731a      	strb	r2, [r3, #12]
	UART4Handle.USART_Config.USART_ParityCtrl = USART_PARITY_CTRL_DISABLE;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <UART4_Init+0x3c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	739a      	strb	r2, [r3, #14]
	UART4Handle.USART_Config.USART_WordLength = USART_WORD_LENGTH_8_BITS;
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <UART4_Init+0x3c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	735a      	strb	r2, [r3, #13]

	USART_Init(&UART4Handle);
 80002b0:	4802      	ldr	r0, [pc, #8]	; (80002bc <UART4_Init+0x3c>)
 80002b2:	f000 fcb5 	bl	8000c20 <USART_Init>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000420 	.word	0x20000420
 80002c0:	40004c00 	.word	0x40004c00

080002c4 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	220c      	movs	r2, #12
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fe5f 	bl	8000f94 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <GPIO_Button_Init+0x38>)
 80002d8:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002da:	230d      	movs	r3, #13
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002de:	2300      	movs	r3, #0
 80002e0:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002e2:	2302      	movs	r3, #2
 80002e4:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f901 	bl	80004f4 <GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020800 	.word	0x40020800

08000300 <main>:

int main(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
//	initialise_monitor_handles();
//	printf("Semihosting successful\n");
	data_len = strlen((char*)msg);
 8000304:	4811      	ldr	r0, [pc, #68]	; (800034c <main+0x4c>)
 8000306:	f7ff ff7d 	bl	8000204 <strlen>
 800030a:	4602      	mov	r2, r0
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <main+0x50>)
 800030e:	601a      	str	r2, [r3, #0]
	GPIO_Button_Init();
 8000310:	f7ff ffd8 	bl	80002c4 <GPIO_Button_Init>
	UART4_GPIO_Init();
 8000314:	f7ff ff92 	bl	800023c <UART4_GPIO_Init>
	UART4_Init();
 8000318:	f7ff ffb2 	bl	8000280 <UART4_Init>
	USART_PeripheralControl(UART4, ENABLE);
 800031c:	2101      	movs	r1, #1
 800031e:	480d      	ldr	r0, [pc, #52]	; (8000354 <main+0x54>)
 8000320:	f000 fdce 	bl	8000ec0 <USART_PeripheralControl>

	while (1) {
		// wait for button press
		while (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13));
 8000324:	bf00      	nop
 8000326:	210d      	movs	r1, #13
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <main+0x58>)
 800032a:	f000 fa7d 	bl	8000828 <GPIO_ReadFromInputPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f8      	bne.n	8000326 <main+0x26>
		// avoid button de-bounce
		delay(200000);
 8000334:	4809      	ldr	r0, [pc, #36]	; (800035c <main+0x5c>)
 8000336:	f7ff ff6d 	bl	8000214 <delay>

		USART_TransmitData(&UART4Handle, (uint8_t*)msg, data_len);
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <main+0x50>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	4902      	ldr	r1, [pc, #8]	; (800034c <main+0x4c>)
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <main+0x60>)
 8000344:	f000 fd62 	bl	8000e0c <USART_TransmitData>
		while (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13));
 8000348:	e7ec      	b.n	8000324 <main+0x24>
 800034a:	bf00      	nop
 800034c:	20000000 	.word	0x20000000
 8000350:	2000041c 	.word	0x2000041c
 8000354:	40004c00 	.word	0x40004c00
 8000358:	40020800 	.word	0x40020800
 800035c:	00030d40 	.word	0x00030d40
 8000360:	20000420 	.word	0x20000420

08000364 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d157      	bne.n	8000426 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a55      	ldr	r2, [pc, #340]	; (80004d0 <GPIO_PeriClockControl+0x16c>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800037e:	4b55      	ldr	r3, [pc, #340]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a54      	ldr	r2, [pc, #336]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 800038a:	e09b      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a52      	ldr	r2, [pc, #328]	; (80004d8 <GPIO_PeriClockControl+0x174>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000394:	4b4f      	ldr	r3, [pc, #316]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a4e      	ldr	r2, [pc, #312]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e090      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a4d      	ldr	r2, [pc, #308]	; (80004dc <GPIO_PeriClockControl+0x178>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 80003aa:	4b4a      	ldr	r3, [pc, #296]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a49      	ldr	r2, [pc, #292]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e085      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a49      	ldr	r2, [pc, #292]	; (80004e0 <GPIO_PeriClockControl+0x17c>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 80003c0:	4b44      	ldr	r3, [pc, #272]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a43      	ldr	r2, [pc, #268]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e07a      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a44      	ldr	r2, [pc, #272]	; (80004e4 <GPIO_PeriClockControl+0x180>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80003d6:	4b3f      	ldr	r3, [pc, #252]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a3e      	ldr	r2, [pc, #248]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e06f      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a40      	ldr	r2, [pc, #256]	; (80004e8 <GPIO_PeriClockControl+0x184>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e064      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a3b      	ldr	r2, [pc, #236]	; (80004ec <GPIO_PeriClockControl+0x188>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 8000402:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a33      	ldr	r2, [pc, #204]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e059      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a37      	ldr	r2, [pc, #220]	; (80004f0 <GPIO_PeriClockControl+0x18c>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d155      	bne.n	80004c4 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e04e      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a29      	ldr	r2, [pc, #164]	; (80004d0 <GPIO_PeriClockControl+0x16c>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d105      	bne.n	800043a <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 800042e:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000434:	2200      	movs	r2, #0
 8000436:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000438:	e044      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <GPIO_PeriClockControl+0x174>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d105      	bne.n	800044e <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000448:	2200      	movs	r2, #0
 800044a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800044c:	e03a      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <GPIO_PeriClockControl+0x178>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000460:	e030      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <GPIO_PeriClockControl+0x17c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d105      	bne.n	8000476 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000470:	2200      	movs	r2, #0
 8000472:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000474:	e026      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a1a      	ldr	r2, [pc, #104]	; (80004e4 <GPIO_PeriClockControl+0x180>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d105      	bne.n	800048a <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000484:	2200      	movs	r2, #0
 8000486:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000488:	e01c      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <GPIO_PeriClockControl+0x184>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d105      	bne.n	800049e <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 8000498:	2200      	movs	r2, #0
 800049a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800049c:	e012      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a12      	ldr	r2, [pc, #72]	; (80004ec <GPIO_PeriClockControl+0x188>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d105      	bne.n	80004b2 <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004b0:	e008      	b.n	80004c4 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <GPIO_PeriClockControl+0x18c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d104      	bne.n	80004c4 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <GPIO_PeriClockControl+0x170>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40021400 	.word	0x40021400
 80004ec:	40021800 	.word	0x40021800
 80004f0:	40021c00 	.word	0x40021c00

080004f4 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ff2c 	bl	8000364 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d822      	bhi.n	800055a <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2103      	movs	r1, #3
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	400a      	ands	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6819      	ldr	r1, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e0c3      	b.n	80006e2 <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b04      	cmp	r3, #4
 8000560:	d117      	bne.n	8000592 <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <GPIO_Init+0x198>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	4611      	mov	r1, r2
 8000572:	4a46      	ldr	r2, [pc, #280]	; (800068c <GPIO_Init+0x198>)
 8000574:	430b      	orrs	r3, r1
 8000576:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b44      	ldr	r3, [pc, #272]	; (800068c <GPIO_Init+0x198>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	43d2      	mvns	r2, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a40      	ldr	r2, [pc, #256]	; (800068c <GPIO_Init+0x198>)
 800058c:	400b      	ands	r3, r1
 800058e:	6093      	str	r3, [r2, #8]
 8000590:	e036      	b.n	8000600 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b05      	cmp	r3, #5
 8000598:	d117      	bne.n	80005ca <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b3c      	ldr	r3, [pc, #240]	; (800068c <GPIO_Init+0x198>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a38      	ldr	r2, [pc, #224]	; (800068c <GPIO_Init+0x198>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <GPIO_Init+0x198>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	43d2      	mvns	r2, r2
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a32      	ldr	r2, [pc, #200]	; (800068c <GPIO_Init+0x198>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	60d3      	str	r3, [r2, #12]
 80005c8:	e01a      	b.n	8000600 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	795b      	ldrb	r3, [r3, #5]
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d116      	bne.n	8000600 <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <GPIO_Init+0x198>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a2a      	ldr	r2, [pc, #168]	; (800068c <GPIO_Init+0x198>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <GPIO_Init+0x198>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	4611      	mov	r1, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	408a      	lsls	r2, r1
 80005f6:	43d2      	mvns	r2, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a24      	ldr	r2, [pc, #144]	; (800068c <GPIO_Init+0x198>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	089b      	lsrs	r3, r3, #2
 8000606:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	f003 0303 	and.w	r3, r3, #3
 8000610:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <GPIO_Init+0x19c>)
 8000614:	7cfb      	ldrb	r3, [r7, #19]
 8000616:	3302      	adds	r3, #2
 8000618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	491c      	ldr	r1, [pc, #112]	; (8000694 <GPIO_Init+0x1a0>)
 8000622:	428b      	cmp	r3, r1
 8000624:	d046      	beq.n	80006b4 <GPIO_Init+0x1c0>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	491b      	ldr	r1, [pc, #108]	; (8000698 <GPIO_Init+0x1a4>)
 800062c:	428b      	cmp	r3, r1
 800062e:	d02b      	beq.n	8000688 <GPIO_Init+0x194>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4919      	ldr	r1, [pc, #100]	; (800069c <GPIO_Init+0x1a8>)
 8000636:	428b      	cmp	r3, r1
 8000638:	d024      	beq.n	8000684 <GPIO_Init+0x190>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4918      	ldr	r1, [pc, #96]	; (80006a0 <GPIO_Init+0x1ac>)
 8000640:	428b      	cmp	r3, r1
 8000642:	d01d      	beq.n	8000680 <GPIO_Init+0x18c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4916      	ldr	r1, [pc, #88]	; (80006a4 <GPIO_Init+0x1b0>)
 800064a:	428b      	cmp	r3, r1
 800064c:	d016      	beq.n	800067c <GPIO_Init+0x188>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4915      	ldr	r1, [pc, #84]	; (80006a8 <GPIO_Init+0x1b4>)
 8000654:	428b      	cmp	r3, r1
 8000656:	d00f      	beq.n	8000678 <GPIO_Init+0x184>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4913      	ldr	r1, [pc, #76]	; (80006ac <GPIO_Init+0x1b8>)
 800065e:	428b      	cmp	r3, r1
 8000660:	d008      	beq.n	8000674 <GPIO_Init+0x180>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4912      	ldr	r1, [pc, #72]	; (80006b0 <GPIO_Init+0x1bc>)
 8000668:	428b      	cmp	r3, r1
 800066a:	d101      	bne.n	8000670 <GPIO_Init+0x17c>
 800066c:	2307      	movs	r3, #7
 800066e:	e022      	b.n	80006b6 <GPIO_Init+0x1c2>
 8000670:	2300      	movs	r3, #0
 8000672:	e020      	b.n	80006b6 <GPIO_Init+0x1c2>
 8000674:	2306      	movs	r3, #6
 8000676:	e01e      	b.n	80006b6 <GPIO_Init+0x1c2>
 8000678:	2305      	movs	r3, #5
 800067a:	e01c      	b.n	80006b6 <GPIO_Init+0x1c2>
 800067c:	2304      	movs	r3, #4
 800067e:	e01a      	b.n	80006b6 <GPIO_Init+0x1c2>
 8000680:	2303      	movs	r3, #3
 8000682:	e018      	b.n	80006b6 <GPIO_Init+0x1c2>
 8000684:	2302      	movs	r3, #2
 8000686:	e016      	b.n	80006b6 <GPIO_Init+0x1c2>
 8000688:	2301      	movs	r3, #1
 800068a:	e014      	b.n	80006b6 <GPIO_Init+0x1c2>
 800068c:	40013c00 	.word	0x40013c00
 8000690:	40013800 	.word	0x40013800
 8000694:	40020000 	.word	0x40020000
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40021400 	.word	0x40021400
 80006ac:	40021800 	.word	0x40021800
 80006b0:	40021c00 	.word	0x40021c00
 80006b4:	2300      	movs	r3, #0
 80006b6:	7cb9      	ldrb	r1, [r7, #18]
 80006b8:	0089      	lsls	r1, r1, #2
 80006ba:	408b      	lsls	r3, r1
 80006bc:	43db      	mvns	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	4957      	ldr	r1, [pc, #348]	; (8000820 <GPIO_Init+0x32c>)
 80006c2:	7cfb      	ldrb	r3, [r7, #19]
 80006c4:	4002      	ands	r2, r0
 80006c6:	3302      	adds	r3, #2
 80006c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006cc:	4b55      	ldr	r3, [pc, #340]	; (8000824 <GPIO_Init+0x330>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7912      	ldrb	r2, [r2, #4]
 80006d4:	4611      	mov	r1, r2
 80006d6:	2201      	movs	r2, #1
 80006d8:	408a      	lsls	r2, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	4a51      	ldr	r2, [pc, #324]	; (8000824 <GPIO_Init+0x330>)
 80006de:	430b      	orrs	r3, r1
 80006e0:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2103      	movs	r1, #3
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	400a      	ands	r2, r1
 8000710:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6899      	ldr	r1, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	430a      	orrs	r2, r1
 8000720:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	79db      	ldrb	r3, [r3, #7]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68d9      	ldr	r1, [r3, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	430a      	orrs	r2, r1
 8000764:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a1b      	ldrb	r3, [r3, #8]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	4619      	mov	r1, r3
 8000786:	2301      	movs	r3, #1
 8000788:	408b      	lsls	r3, r1
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6859      	ldr	r1, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	795b      	ldrb	r3, [r3, #5]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d132      	bne.n	8000818 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	f003 0307 	and.w	r3, r3, #7
 80007c4:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	3208      	adds	r2, #8
 80007ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	210f      	movs	r1, #15
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	43db      	mvns	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4011      	ands	r1, r2
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	3208      	adds	r2, #8
 80007ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	3208      	adds	r2, #8
 80007f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a5b      	ldrb	r3, [r3, #9]
 80007fe:	4619      	mov	r1, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	fa01 f303 	lsl.w	r3, r1, r3
 8000808:	4619      	mov	r1, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4311      	orrs	r1, r2
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	3208      	adds	r2, #8
 8000814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40013800 	.word	0x40013800
 8000824:	40013c00 	.word	0x40013c00

08000828 <GPIO_ReadFromInputPin>:
 * desc: reads the input pin of a GPIOx peripheral (specified by pinNumber)
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: 2 byte pin register data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	uint8_t out;
	out = (uint8_t)((pGPIOx->IDR >> pinNumber) & 1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	fa22 f303 	lsr.w	r3, r2, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
	return out;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <RCC_GetPLLOutputClock>:
 * RCC Get PLL Output Clock
 * desc: gets the pll output clock
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPLLOutputClock(void) {
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
	 * Definitions:
	 * 	PLLP = main PLL division factor for main system clock
	 * 	PLLN = main PLL multiplication factor for VCO
	 * 	PLLM = division factor for the main PLL input clock
	 */
	uint8_t pll_div_factors[4] = {2, 4, 6, 8};
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <RCC_GetPLLOutputClock+0x88>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	607b      	str	r3, [r7, #4]

	uint32_t clk_src, clk_vco, plln, clk_pll = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
	uint8_t pllp, pllm = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	75bb      	strb	r3, [r7, #22]

	temp = (RCC->PLLCFGR << RCC_PLLCFGR_PLLSRC) & 1;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <RCC_GetPLLOutputClock+0x8c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2300      	movs	r3, #0
 8000872:	75bb      	strb	r3, [r7, #22]
	if (temp) {
 8000874:	7dbb      	ldrb	r3, [r7, #22]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <RCC_GetPLLOutputClock+0x2c>
		// HSI clock selected as PLL
		clk_src = 16000000;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <RCC_GetPLLOutputClock+0x90>)
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e001      	b.n	8000884 <RCC_GetPLLOutputClock+0x30>
	} else {
		// HSE clock selected as PLL
		clk_src = 8000000;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <RCC_GetPLLOutputClock+0x94>)
 8000882:	61fb      	str	r3, [r7, #28]
	}

	plln = (RCC->PLLCFGR << RCC_PLLCFGR_PLLN) & 0x1FF;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <RCC_GetPLLOutputClock+0x8c>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800088e:	613b      	str	r3, [r7, #16]
	pllm = (RCC->PLLCFGR << RCC_PLLCFGR_PLLM) & 0x3F;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <RCC_GetPLLOutputClock+0x8c>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800089a:	75fb      	strb	r3, [r7, #23]

	clk_vco = clk_src * (plln / pllm);
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	fb02 f303 	mul.w	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]

	temp = (RCC->PLLCFGR << RCC_PLLCFGR_PLLP) & 0x3;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <RCC_GetPLLOutputClock+0x8c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2300      	movs	r3, #0
 80008b2:	75bb      	strb	r3, [r7, #22]
	pllp = pll_div_factors[temp];
 80008b4:	7dbb      	ldrb	r3, [r7, #22]
 80008b6:	f107 0220 	add.w	r2, r7, #32
 80008ba:	4413      	add	r3, r2
 80008bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80008c0:	72fb      	strb	r3, [r7, #11]
	clk_pll = clk_vco / pllp;
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	61bb      	str	r3, [r7, #24]

	return clk_pll;
 80008cc:	69bb      	ldr	r3, [r7, #24]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3724      	adds	r7, #36	; 0x24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08000fbc 	.word	0x08000fbc
 80008e0:	40023800 	.word	0x40023800
 80008e4:	00f42400 	.word	0x00f42400
 80008e8:	007a1200 	.word	0x007a1200

080008ec <RCC_GetPCLK1Value>:
 * RCC Get PLL PCLK1 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK1Value(void) {
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <RCC_GetPCLK1Value+0xec>)
 8000904:	f107 0408 	add.w	r4, r7, #8
 8000908:	461d      	mov	r5, r3
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre1_div_factors[4] = {2, 4, 8, 16};
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <RCC_GetPCLK1Value+0xf0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << RCC_CFGR_SWS) & 0x3;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <RCC_GetPCLK1Value+0xf4>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 800092e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <RCC_GetPCLK1Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <RCC_GetPCLK1Value+0xf8>)
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
 800093a:	e00d      	b.n	8000958 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 1) {
 800093c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000940:	2b01      	cmp	r3, #1
 8000942:	d102      	bne.n	800094a <RCC_GetPCLK1Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <RCC_GetPCLK1Value+0xfc>)
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
 8000948:	e006      	b.n	8000958 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 2) {
 800094a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800094e:	2b02      	cmp	r3, #2
 8000950:	d102      	bne.n	8000958 <RCC_GetPCLK1Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 8000952:	f7ff ff7f 	bl	8000854 <RCC_GetPLLOutputClock>
 8000956:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << RCC_CFGR_HPRE) & 0xF;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <RCC_GetPCLK1Value+0xf4>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 800096a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800096e:	2b07      	cmp	r3, #7
 8000970:	d802      	bhi.n	8000978 <RCC_GetPCLK1Value+0x8c>
 8000972:	2301      	movs	r3, #1
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
 8000976:	e009      	b.n	800098c <RCC_GetPCLK1Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000978:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800097c:	3b08      	subs	r3, #8
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000984:	4413      	add	r3, r2
 8000986:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800098a:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << RCC_CFGR_PPRE1) & 0x7;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <RCC_GetPCLK1Value+0xf4>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2300      	movs	r3, #0
 8000992:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000996:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800099a:	2b03      	cmp	r3, #3
 800099c:	d803      	bhi.n	80009a6 <RCC_GetPCLK1Value+0xba>
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80009a4:	e009      	b.n	80009ba <RCC_GetPCLK1Value+0xce>
	else clk_apb = ppre1_div_factors[temp - 4];
 80009a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009aa:	3b04      	subs	r3, #4
 80009ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009b0:	4413      	add	r3, r2
 80009b2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80009b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk1 = (clk_sys / clk_ahb) / clk_apb;
 80009ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	fbb2 f2f3 	udiv	r2, r2, r3
 80009c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk1;
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3738      	adds	r7, #56	; 0x38
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bdb0      	pop	{r4, r5, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08000fc0 	.word	0x08000fc0
 80009dc:	08000fe0 	.word	0x08000fe0
 80009e0:	40023800 	.word	0x40023800
 80009e4:	00f42400 	.word	0x00f42400
 80009e8:	007a1200 	.word	0x007a1200

080009ec <RCC_GetPCLK2Value>:
 * RCC Get PLL PCLK2 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK2Value(void) {
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk2;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <RCC_GetPCLK2Value+0xec>)
 8000a04:	f107 0408 	add.w	r4, r7, #8
 8000a08:	461d      	mov	r5, r3
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre2_div_factors[4] = {2, 4, 8, 16};
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <RCC_GetPCLK2Value+0xf0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << RCC_CFGR_SWS) & 0x3;
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <RCC_GetPCLK2Value+0xf4>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 8000a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <RCC_GetPCLK2Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <RCC_GetPCLK2Value+0xf8>)
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
 8000a3a:	e00d      	b.n	8000a58 <RCC_GetPCLK2Value+0x6c>
	} else if (temp == 1) {
 8000a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d102      	bne.n	8000a4a <RCC_GetPCLK2Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <RCC_GetPCLK2Value+0xfc>)
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
 8000a48:	e006      	b.n	8000a58 <RCC_GetPCLK2Value+0x6c>
	} else if (temp == 2) {
 8000a4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d102      	bne.n	8000a58 <RCC_GetPCLK2Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 8000a52:	f7ff feff 	bl	8000854 <RCC_GetPLLOutputClock>
 8000a56:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << RCC_CFGR_HPRE) & 0xF;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <RCC_GetPCLK2Value+0xf4>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 8000a6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a6e:	2b07      	cmp	r3, #7
 8000a70:	d802      	bhi.n	8000a78 <RCC_GetPCLK2Value+0x8c>
 8000a72:	2301      	movs	r3, #1
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
 8000a76:	e009      	b.n	8000a8c <RCC_GetPCLK2Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000a78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a84:	4413      	add	r3, r2
 8000a86:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << RCC_CFGR_PPRE2) & 0x7;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <RCC_GetPCLK2Value+0xf4>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000a96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d803      	bhi.n	8000aa6 <RCC_GetPCLK2Value+0xba>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000aa4:	e009      	b.n	8000aba <RCC_GetPCLK2Value+0xce>
	else clk_apb = ppre2_div_factors[temp - 4];
 8000aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk2 = (clk_sys / clk_ahb) / clk_apb;
 8000aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk2;
 8000acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3738      	adds	r7, #56	; 0x38
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08000fc0 	.word	0x08000fc0
 8000adc:	08000fe0 	.word	0x08000fe0
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	00f42400 	.word	0x00f42400
 8000ae8:	007a1200 	.word	0x007a1200

08000aec <USART_PeriClockControl>:
 * desc: enables the USART peripheral clock for a specific USART peripheral
 * input1: a pointer to an USART peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t enable_flag) {
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d141      	bne.n	8000b82 <USART_PeriClockControl+0x96>
		if (pUSARTx == USART1) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <USART_PeriClockControl+0x118>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN;
 8000b06:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pUSARTx == USART6) {
			USART6_PCLK_DI;
		}
	}
}
 8000b12:	e071      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == USART2) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <USART_PeriClockControl+0x120>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a39      	ldr	r2, [pc, #228]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b28:	e066      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == USART3) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <USART_PeriClockControl+0x124>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d106      	bne.n	8000b40 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN;
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a34      	ldr	r2, [pc, #208]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b3e:	e05b      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == UART4) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <USART_PeriClockControl+0x128>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d106      	bne.n	8000b56 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b54:	e050      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == UART5) {
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <USART_PeriClockControl+0x12c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d106      	bne.n	8000b6c <USART_PeriClockControl+0x80>
			UART5_PCLK_EN;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a29      	ldr	r2, [pc, #164]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b6a:	e045      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == USART6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <USART_PeriClockControl+0x130>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d141      	bne.n	8000bf8 <USART_PeriClockControl+0x10c>
			USART6_PCLK_EN;
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b7a:	f043 0320 	orr.w	r3, r3, #32
 8000b7e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b80:	e03a      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		if (pUSARTx == USART1) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <USART_PeriClockControl+0x118>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d105      	bne.n	8000b96 <USART_PeriClockControl+0xaa>
			USART1_PCLK_DI;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000b94:	e030      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == USART2) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <USART_PeriClockControl+0x120>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d105      	bne.n	8000baa <USART_PeriClockControl+0xbe>
			USART2_PCLK_DI;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ba8:	e026      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == USART3) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <USART_PeriClockControl+0x124>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d105      	bne.n	8000bbe <USART_PeriClockControl+0xd2>
			USART3_PCLK_DI;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bbc:	e01c      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == UART4) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <USART_PeriClockControl+0x128>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d105      	bne.n	8000bd2 <USART_PeriClockControl+0xe6>
			UART4_PCLK_DI;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bd0:	e012      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == UART5) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <USART_PeriClockControl+0x12c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d105      	bne.n	8000be6 <USART_PeriClockControl+0xfa>
			UART5_PCLK_DI;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000be4:	e008      	b.n	8000bf8 <USART_PeriClockControl+0x10c>
		else if (pUSARTx == USART6) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <USART_PeriClockControl+0x130>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d104      	bne.n	8000bf8 <USART_PeriClockControl+0x10c>
			USART6_PCLK_DI;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <USART_PeriClockControl+0x11c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40004800 	.word	0x40004800
 8000c14:	40004c00 	.word	0x40004c00
 8000c18:	40005000 	.word	0x40005000
 8000c1c:	40011400 	.word	0x40011400

08000c20 <USART_Init>:
 * USART Initialization Function
 * desc: initializes a USARTx peripheral
 * input1: USART handle struct containing config and address information
 * output: none
 */
void USART_Init(USART_Handle_t *pUSARTHandle) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff5c 	bl	8000aec <USART_PeriClockControl>

	/****************
	 *  Configure CR1
	 ****************/
	uint32_t temp = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]

	// device mode
	if (pUSARTHandle->USART_Config.USART_DeviceMode == USART_DEVICE_MODE_TX_ONLY) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <USART_Init+0x2a>
		temp |= (1 << USART_CR1_TE);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	e014      	b.n	8000c74 <USART_Init+0x54>
	} else if (pUSARTHandle->USART_Config.USART_DeviceMode == USART_DEVICE_MODE_RX_ONLY) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d104      	bne.n	8000c5c <USART_Init+0x3c>
		temp |= (1 << USART_CR1_RE);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e00b      	b.n	8000c74 <USART_Init+0x54>
	} else if (pUSARTHandle->USART_Config.USART_DeviceMode == USART_DEVICE_MODE_TX_RX) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d107      	bne.n	8000c74 <USART_Init+0x54>
		temp |= (1 << USART_CR1_TE);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
		temp |= (1 << USART_CR1_RE);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
	}

	// word length
	temp |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7b5b      	ldrb	r3, [r3, #13]
 8000c78:	031b      	lsls	r3, r3, #12
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]

	// parity
	if (pUSARTHandle->USART_Config.USART_ParityCtrl == USART_PARITY_CTRL_EVEN) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7b9b      	ldrb	r3, [r3, #14]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d104      	bne.n	8000c94 <USART_Init+0x74>
		temp |= (1 << USART_CR1_PCE);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e00b      	b.n	8000cac <USART_Init+0x8c>
		// the even parity config (USART_CR1_PS == 0) is the default, no need to config
	} else if (pUSARTHandle->USART_Config.USART_ParityCtrl == USART_PARITY_CTRL_ODD) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7b9b      	ldrb	r3, [r3, #14]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d107      	bne.n	8000cac <USART_Init+0x8c>
		temp |= (1 << USART_CR1_PCE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	60fb      	str	r3, [r7, #12]
		temp |= (1 << USART_CR1_PS);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	60fb      	str	r3, [r7, #12]
	}

	// write config to CR1
	pUSARTHandle->pUSARTx->CR1 = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	60da      	str	r2, [r3, #12]

	/****************
	 *  Configure CR2
	 ****************/
	temp = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]

	// num of stop bits
	temp |= pUSARTHandle->USART_Config.USART_NumStopBits << USART_CR2_STOP;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	031b      	lsls	r3, r3, #12
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]

	// write config to CR2
	pUSARTHandle->pUSARTx->CR2 = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

	/****************
	 *  Configure CR3
	 ****************/
	temp = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]

	// hardware flow control mode
	if (pUSARTHandle->USART_Config.USART_HwFlowCtrl == USART_HW_FLOW_CTRL_CTS) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7bdb      	ldrb	r3, [r3, #15]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d104      	bne.n	8000ce4 <USART_Init+0xc4>
		temp |= (1 << USART_CR3_CTSE);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e014      	b.n	8000d0e <USART_Init+0xee>
	} else if (pUSARTHandle->USART_Config.USART_HwFlowCtrl == USART_HW_FLOW_CTRL_RTS) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7bdb      	ldrb	r3, [r3, #15]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d104      	bne.n	8000cf6 <USART_Init+0xd6>
		temp |= (1 << USART_CR3_RTSE);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e00b      	b.n	8000d0e <USART_Init+0xee>
	} else if (pUSARTHandle->USART_Config.USART_HwFlowCtrl == USART_HW_FLOW_CTRL_CTS_RTS) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7bdb      	ldrb	r3, [r3, #15]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d107      	bne.n	8000d0e <USART_Init+0xee>
		temp |= (1 << USART_CR3_CTSE);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d04:	60fb      	str	r3, [r7, #12]
		temp |= (1 << USART_CR3_RTSE);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	60fb      	str	r3, [r7, #12]
	}

	// write config to CR3
	pUSARTHandle->pUSARTx->CR3 = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	615a      	str	r2, [r3, #20]

	// TODO: init baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_BaudRate);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4610      	mov	r0, r2
 8000d22:	f000 f805 	bl	8000d30 <USART_SetBaudRate>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <USART_SetBaudRate>:
 * desc: configures the baud rate through the BRR mantissa and fraction for standard USART
 * input1: USART register struct
 * input2: desired baud rate value
 * output: none
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t baudRate) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	uint32_t usartdiv;
	uint32_t mantissa;
	uint32_t fraction;
	uint32_t temp = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]

	if (pUSARTx == USART1 || pUSARTx == USART6) {
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <USART_SetBaudRate+0xd0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d003      	beq.n	8000d4e <USART_SetBaudRate+0x1e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a2e      	ldr	r2, [pc, #184]	; (8000e04 <USART_SetBaudRate+0xd4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d103      	bne.n	8000d56 <USART_SetBaudRate+0x26>
		PCLKx = RCC_GetPCLK2Value();
 8000d4e:	f7ff fe4d 	bl	80009ec <RCC_GetPCLK2Value>
 8000d52:	61f8      	str	r0, [r7, #28]
 8000d54:	e002      	b.n	8000d5c <USART_SetBaudRate+0x2c>
	} else {
		PCLKx = RCC_GetPCLK1Value();
 8000d56:	f7ff fdc9 	bl	80008ec <RCC_GetPCLK1Value>
 8000d5a:	61f8      	str	r0, [r7, #28]
	}

	if (pUSARTx->CR1 & ~(1 << USART_CR1_OVER8)) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <USART_SetBaudRate+0x4c>
		// 16 bit oversampling rate case (value = 0)
		usartdiv = ((PCLKx * 100) / (baudRate * (2 - 0) * 8));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2264      	movs	r2, #100	; 0x64
 8000d6c:	fb02 f203 	mul.w	r2, r2, r3
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	e008      	b.n	8000d8e <USART_SetBaudRate+0x5e>
	} else {
		// 8 bit oversampling rate case
		usartdiv = ((PCLKx * 100) / (baudRate * (2 - 1) * 8));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	2264      	movs	r2, #100	; 0x64
 8000d80:	fb02 f203 	mul.w	r2, r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8c:	61bb      	str	r3, [r7, #24]
	}

	mantissa = usartdiv / 100;
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <USART_SetBaudRate+0xd8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	60fb      	str	r3, [r7, #12]
	temp |= mantissa << 4;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

	fraction = usartdiv - (mantissa * 100);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2264      	movs	r2, #100	; 0x64
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]

	if(pUSARTx->CR1 & ~( 1 << USART_CR1_OVER8)) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00a      	beq.n	8000dd4 <USART_SetBaudRate+0xa4>
		//over sampling by 16
		fraction = ((( fraction * 16) + 50) / 100 ) & ((uint8_t)0x0F);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	3332      	adds	r3, #50	; 0x32
 8000dc4:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <USART_SetBaudRate+0xd8>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e009      	b.n	8000de8 <USART_SetBaudRate+0xb8>
	} else {
		//OVER8 = 1 , over sampling by 8
		fraction = ((( fraction * 8) + 50) / 100 )& ((uint8_t)0x07);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	3332      	adds	r3, #50	; 0x32
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <USART_SetBaudRate+0xd8>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	095b      	lsrs	r3, r3, #5
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	617b      	str	r3, [r7, #20]

	}
	temp |= fraction;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

	pUSARTx->BRR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	609a      	str	r2, [r3, #8]
}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40011400 	.word	0x40011400
 8000e08:	51eb851f 	.word	0x51eb851f

08000e0c <USART_TransmitData>:
 * input1: a pointer to an USART handle struct
 * input2: a uint8 pointer to a buffer
 * input3: the size of the message to send
 * output: none
 */
void USART_TransmitData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t len) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
//	pUSARTHandle->pUSARTx->CR1 &= (1 << USART_CR1_UE);
//	// enable transmitter (TE)
//	pUSARTHandle->pUSARTx->CR1 &= (1 << USART_CR1_TE);

	// write data
	while (len--) {
 8000e18:	e02b      	b.n	8000e72 <USART_TransmitData+0x66>
		// wait for the data transmission to finish
		while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE)) {}
 8000e1a:	bf00      	nop
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f838 	bl	8000e98 <USART_GetFlagStatus>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f6      	beq.n	8000e1c <USART_TransmitData+0x10>

		// handle 9-bit and 8-bit frame
		if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORD_LENGTH_9_BITS) {
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	7b5b      	ldrb	r3, [r3, #13]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d115      	bne.n	8000e62 <USART_TransmitData+0x56>
			uint16_t *largeData = (uint16_t*) pTxBuffer;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	617b      	str	r3, [r7, #20]
			pUSARTHandle->pUSARTx->DR = (*largeData & (uint16_t)0x01FF);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e48:	605a      	str	r2, [r3, #4]

			// also need to handle parity bit config
			if (pUSARTHandle->USART_Config.USART_ParityCtrl == USART_PARITY_CTRL_DISABLE) {
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	7b9b      	ldrb	r3, [r3, #14]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d103      	bne.n	8000e5a <USART_TransmitData+0x4e>
				// no parity used, therefore all 9 bits contain message data
				pTxBuffer += 2;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3302      	adds	r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e00b      	b.n	8000e72 <USART_TransmitData+0x66>
			} else {
				// otherwise, the parity bit is enabled and the HARDWARE will add the 9th bit. So only send 8 bits
				pTxBuffer++;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	e007      	b.n	8000e72 <USART_TransmitData+0x66>
			}
		} else {
			// if its just 8 bits, load a bit and increment the buffer ptr
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1ce      	bne.n	8000e1a <USART_TransmitData+0xe>
		}
	}
	while (!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC)) {}
 8000e7c:	bf00      	nop
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f807 	bl	8000e98 <USART_GetFlagStatus>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f6      	beq.n	8000e7e <USART_TransmitData+0x72>
}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <USART_GetFlagStatus>:
 * desc: checks the status of a user specified register
 * input1: USART register pointer mapped to an USART peripheral
 * input2: an uint32_t status to check for
 * output: the flag register's status
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t flag_name) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    if (pUSARTx->SR & flag_name) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <USART_GetFlagStatus+0x1a>
    	return SET;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <USART_GetFlagStatus+0x1c>
    }
   return RESET;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <USART_PeripheralControl>:
 * USART Clear Flag Status Helper
 * desc: clears the status of a user specified register
 * input1: USART register pointer mapped to an USART peripheral
 * input2: an uint8_t flag for enabling or disabling
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t enable_flag) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d106      	bne.n	8000ee0 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60da      	str	r2, [r3, #12]
	}
	else {
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000ede:	e005      	b.n	8000eec <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60da      	str	r2, [r3, #12]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0b      	ldr	r4, [pc, #44]	; (8000f44 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f22:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000f26:	f000 f811 	bl	8000f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f2a:	f7ff f9e9 	bl	8000300 <main>

08000f2e <LoopForever>:

LoopForever:
    b LoopForever
 8000f2e:	e7fe      	b.n	8000f2e <LoopForever>
  ldr   r0, =_estack
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8000f3c:	08000fec 	.word	0x08000fec
  ldr r2, =_sbss
 8000f40:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8000f44:	20000448 	.word	0x20000448

08000f48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <__libc_init_array>:
 8000f4c:	b570      	push	{r4, r5, r6, lr}
 8000f4e:	4e0d      	ldr	r6, [pc, #52]	; (8000f84 <__libc_init_array+0x38>)
 8000f50:	4c0d      	ldr	r4, [pc, #52]	; (8000f88 <__libc_init_array+0x3c>)
 8000f52:	1ba4      	subs	r4, r4, r6
 8000f54:	10a4      	asrs	r4, r4, #2
 8000f56:	2500      	movs	r5, #0
 8000f58:	42a5      	cmp	r5, r4
 8000f5a:	d109      	bne.n	8000f70 <__libc_init_array+0x24>
 8000f5c:	4e0b      	ldr	r6, [pc, #44]	; (8000f8c <__libc_init_array+0x40>)
 8000f5e:	4c0c      	ldr	r4, [pc, #48]	; (8000f90 <__libc_init_array+0x44>)
 8000f60:	f000 f820 	bl	8000fa4 <_init>
 8000f64:	1ba4      	subs	r4, r4, r6
 8000f66:	10a4      	asrs	r4, r4, #2
 8000f68:	2500      	movs	r5, #0
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	d105      	bne.n	8000f7a <__libc_init_array+0x2e>
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f74:	4798      	blx	r3
 8000f76:	3501      	adds	r5, #1
 8000f78:	e7ee      	b.n	8000f58 <__libc_init_array+0xc>
 8000f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f7e:	4798      	blx	r3
 8000f80:	3501      	adds	r5, #1
 8000f82:	e7f2      	b.n	8000f6a <__libc_init_array+0x1e>
 8000f84:	08000fe4 	.word	0x08000fe4
 8000f88:	08000fe4 	.word	0x08000fe4
 8000f8c:	08000fe4 	.word	0x08000fe4
 8000f90:	08000fe8 	.word	0x08000fe8

08000f94 <memset>:
 8000f94:	4402      	add	r2, r0
 8000f96:	4603      	mov	r3, r0
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <memset+0xa>
 8000f9c:	4770      	bx	lr
 8000f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000fa2:	e7f9      	b.n	8000f98 <memset+0x4>

08000fa4 <_init>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr

08000fb0 <_fini>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	bf00      	nop
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr
