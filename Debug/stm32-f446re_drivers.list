
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000189c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b60  08001b60  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b60  08001b60  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b60  08001b60  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b60  08001b60  00011b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b64  08001b64  00011b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000006c  08001bd4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08001bd4  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003518  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000852  00000000  00000000  000235b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  00023e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00023fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000332e  00000000  00000000  00024130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e3e  00000000  00000000  0002745e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bcb0  00000000  00000000  0002929c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034f4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fc0  00000000  00000000  00034fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001a48 	.word	0x08001a48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	08001a48 	.word	0x08001a48

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
extern void initialise_monitor_handles(void);

/*
 * PUPD LED control
 */
void delay(int value) {
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e002      	b.n	8000228 <delay+0x14>
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f8      	bcc.n	8000222 <delay+0xe>
}
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <SPI2_GPIO_Init>:
 * PB12 = SPI2_NSS
 * PB13	= SPI2_SCLK
 * PB15 = SPI2_MOSI
 * Alt Func mode = 5
 */
void SPI2_GPIO_Init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOB_Handle;
	memset(&GPIOB_Handle, 0 , sizeof(GPIO_Handle_t));
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	220c      	movs	r2, #12
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fce4 	bl	8000c16 <memset>
	GPIOB_Handle.pGPIOx = GPIOB;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <SPI2_GPIO_Init+0x58>)
 8000250:	607b      	str	r3, [r7, #4]

	GPIOB_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinAltFuncMode = 5;
 8000256:	2305      	movs	r3, #5
 8000258:	737b      	strb	r3, [r7, #13]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSH_PULL;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 800025e:	2301      	movs	r3, #1
 8000260:	72fb      	strb	r3, [r7, #11]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]

	// NSS
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000266:	230c      	movs	r3, #12
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f997 	bl	80005a0 <GPIO_Init>

	// SCLK
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000272:	230d      	movs	r3, #13
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f991 	bl	80005a0 <GPIO_Init>

	// MOSI
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800027e:	230f      	movs	r3, #15
 8000280:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f98b 	bl	80005a0 <GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020400 	.word	0x40020400

08000298 <SPI2_Init>:

void SPI2_Init(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;
	memset(&SPI2_Handle, 0 , sizeof(SPI_Handle_t));
 800029e:	463b      	mov	r3, r7
 80002a0:	2220      	movs	r2, #32
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fcb6 	bl	8000c16 <memset>
	SPI2_Handle.pSPIx = SPI2;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SPI2_Init+0x44>)
 80002ac:	603b      	str	r3, [r7, #0]

	SPI2_Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_DUPLEX;
 80002ae:	2300      	movs	r3, #0
 80002b0:	717b      	strb	r3, [r7, #5]
	SPI2_Handle.SPI_Config.SPI_DataFrameFormat = SPI_DATA_FRAME_8_BIT;
 80002b2:	2300      	movs	r3, #0
 80002b4:	71fb      	strb	r3, [r7, #7]
	SPI2_Handle.SPI_Config.SPI_SoftwareSlaveManagement = SPI_SOFTWARE_SLAVE_DISABLE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_SerialClkSpeed = SPI_SCLK_FPCLK_16;
 80002ba:	2303      	movs	r3, #3
 80002bc:	71bb      	strb	r3, [r7, #6]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80002be:	2300      	movs	r3, #0
 80002c0:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002c6:	2301      	movs	r3, #1
 80002c8:	713b      	strb	r3, [r7, #4]

	SPI_Init(&SPI2_Handle);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fb6d 	bl	80009ac <SPI_Init>
}
 80002d2:	bf00      	nop
 80002d4:	3720      	adds	r7, #32
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40003800 	.word	0x40003800

080002e0 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	220c      	movs	r2, #12
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fc92 	bl	8000c16 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <GPIO_Button_Init+0x38>)
 80002f4:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002f6:	230d      	movs	r3, #13
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002fa:	2300      	movs	r3, #0
 80002fc:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002fe:	2302      	movs	r3, #2
 8000300:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 8000302:	2300      	movs	r3, #0
 8000304:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f949 	bl	80005a0 <GPIO_Init>
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020800 	.word	0x40020800

0800031c <main>:

int main(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b098      	sub	sp, #96	; 0x60
 8000320:	af00      	add	r7, sp, #0
	char data[] = "Hello Worldd a s asd q t s cg sg  sjg biy  7 9 d9 uhf9  adj ia if ia aop eiuy oa68 89 a 9";
 8000322:	4a20      	ldr	r2, [pc, #128]	; (80003a4 <main+0x88>)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4611      	mov	r1, r2
 8000328:	225a      	movs	r2, #90	; 0x5a
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fc68 	bl	8000c00 <memcpy>
	uint8_t data_size = strlen(data);
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff66 	bl	8000204 <strlen>
 8000338:	4603      	mov	r3, r0
 800033a:	b2db      	uxtb	r3, r3
 800033c:	70fb      	strb	r3, [r7, #3]

	initialise_monitor_handles();
 800033e:	f001 fb09 	bl	8001954 <initialise_monitor_handles>
	printf("Semihosting successful\n");
 8000342:	4819      	ldr	r0, [pc, #100]	; (80003a8 <main+0x8c>)
 8000344:	f000 fccc 	bl	8000ce0 <puts>

	// initialization
	GPIO_Button_Init();
 8000348:	f7ff ffca 	bl	80002e0 <GPIO_Button_Init>
	SPI2_GPIO_Init();
 800034c:	f7ff ff76 	bl	800023c <SPI2_GPIO_Init>
	SPI2_Init();
 8000350:	f7ff ffa2 	bl	8000298 <SPI2_Init>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000354:	2101      	movs	r1, #1
 8000356:	4815      	ldr	r0, [pc, #84]	; (80003ac <main+0x90>)
 8000358:	f000 fbe2 	bl	8000b20 <SPI_SSOEConfig>

	while (1) {
		// wait till button press
//		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
		delay(500000);
 800035c:	4814      	ldr	r0, [pc, #80]	; (80003b0 <main+0x94>)
 800035e:	f7ff ff59 	bl	8000214 <delay>

		SPI_PeripheralControl(SPI2, ENABLE);
 8000362:	2101      	movs	r1, #1
 8000364:	4811      	ldr	r0, [pc, #68]	; (80003ac <main+0x90>)
 8000366:	f000 fbbf 	bl	8000ae8 <SPI_PeripheralControl>
		printf("Hello world\n");
 800036a:	4812      	ldr	r0, [pc, #72]	; (80003b4 <main+0x98>)
 800036c:	f000 fcb8 	bl	8000ce0 <puts>
		// slave needs to know how much data is being sent. The slave script expect 1 byte of msg length then msg data
		SPI_SendData(SPI2, &data_size, 1);
 8000370:	1cfb      	adds	r3, r7, #3
 8000372:	2201      	movs	r2, #1
 8000374:	4619      	mov	r1, r3
 8000376:	480d      	ldr	r0, [pc, #52]	; (80003ac <main+0x90>)
 8000378:	f000 fb6f 	bl	8000a5a <SPI_SendData>
		SPI_SendData(SPI2, (uint8_t*)data, data_size);
 800037c:	78fb      	ldrb	r3, [r7, #3]
 800037e:	461a      	mov	r2, r3
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4809      	ldr	r0, [pc, #36]	; (80003ac <main+0x90>)
 8000386:	f000 fb68 	bl	8000a5a <SPI_SendData>

		while(SPI_GetFlagStatus(SPI2, SPI_STATUS_BUSY_FLAG));
 800038a:	bf00      	nop
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	4807      	ldr	r0, [pc, #28]	; (80003ac <main+0x90>)
 8000390:	f000 fb96 	bl	8000ac0 <SPI_GetFlagStatus>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1f8      	bne.n	800038c <main+0x70>

		SPI_PeripheralControl(SPI2, DISABLE);
 800039a:	2100      	movs	r1, #0
 800039c:	4803      	ldr	r0, [pc, #12]	; (80003ac <main+0x90>)
 800039e:	f000 fba3 	bl	8000ae8 <SPI_PeripheralControl>
		delay(500000);
 80003a2:	e7db      	b.n	800035c <main+0x40>
 80003a4:	08001a84 	.word	0x08001a84
 80003a8:	08001a60 	.word	0x08001a60
 80003ac:	40003800 	.word	0x40003800
 80003b0:	0007a120 	.word	0x0007a120
 80003b4:	08001a78 	.word	0x08001a78

080003b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <_sbrk+0x50>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <_sbrk+0x16>
		heap_end = &end;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <_sbrk+0x50>)
 80003ca:	4a10      	ldr	r2, [pc, #64]	; (800040c <_sbrk+0x54>)
 80003cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <_sbrk+0x50>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <_sbrk+0x50>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	466a      	mov	r2, sp
 80003de:	4293      	cmp	r3, r2
 80003e0:	d907      	bls.n	80003f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80003e2:	f000 fbe3 	bl	8000bac <__errno>
 80003e6:	4602      	mov	r2, r0
 80003e8:	230c      	movs	r3, #12
 80003ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	e006      	b.n	8000400 <_sbrk+0x48>
	}

	heap_end += incr;
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <_sbrk+0x50>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	4a03      	ldr	r2, [pc, #12]	; (8000408 <_sbrk+0x50>)
 80003fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000088 	.word	0x20000088
 800040c:	20000148 	.word	0x20000148

08000410 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d157      	bne.n	80004d2 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a55      	ldr	r2, [pc, #340]	; (800057c <GPIO_PeriClockControl+0x16c>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800042a:	4b55      	ldr	r3, [pc, #340]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a54      	ldr	r2, [pc, #336]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 8000436:	e09b      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a52      	ldr	r2, [pc, #328]	; (8000584 <GPIO_PeriClockControl+0x174>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000440:	4b4f      	ldr	r3, [pc, #316]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a4e      	ldr	r2, [pc, #312]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e090      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a4d      	ldr	r2, [pc, #308]	; (8000588 <GPIO_PeriClockControl+0x178>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 8000456:	4b4a      	ldr	r3, [pc, #296]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a49      	ldr	r2, [pc, #292]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	e085      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a49      	ldr	r2, [pc, #292]	; (800058c <GPIO_PeriClockControl+0x17c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 800046c:	4b44      	ldr	r3, [pc, #272]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a43      	ldr	r2, [pc, #268]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000478:	e07a      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a44      	ldr	r2, [pc, #272]	; (8000590 <GPIO_PeriClockControl+0x180>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a3e      	ldr	r2, [pc, #248]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000488:	f043 0310 	orr.w	r3, r3, #16
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048e:	e06f      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a40      	ldr	r2, [pc, #256]	; (8000594 <GPIO_PeriClockControl+0x184>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 8000498:	4b39      	ldr	r3, [pc, #228]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a38      	ldr	r2, [pc, #224]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e064      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a3b      	ldr	r2, [pc, #236]	; (8000598 <GPIO_PeriClockControl+0x188>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a33      	ldr	r2, [pc, #204]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e059      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a37      	ldr	r2, [pc, #220]	; (800059c <GPIO_PeriClockControl+0x18c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d155      	bne.n	8000570 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80004c4:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a2d      	ldr	r2, [pc, #180]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	e04e      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a29      	ldr	r2, [pc, #164]	; (800057c <GPIO_PeriClockControl+0x16c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d105      	bne.n	80004e6 <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004e4:	e044      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a26      	ldr	r2, [pc, #152]	; (8000584 <GPIO_PeriClockControl+0x174>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d105      	bne.n	80004fa <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <GPIO_PeriClockControl+0x170>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004f8:	e03a      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a22      	ldr	r2, [pc, #136]	; (8000588 <GPIO_PeriClockControl+0x178>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d105      	bne.n	800050e <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000508:	2200      	movs	r2, #0
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800050c:	e030      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a1e      	ldr	r2, [pc, #120]	; (800058c <GPIO_PeriClockControl+0x17c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d105      	bne.n	8000522 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000520:	e026      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <GPIO_PeriClockControl+0x180>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d105      	bne.n	8000536 <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000530:	2200      	movs	r2, #0
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000534:	e01c      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a16      	ldr	r2, [pc, #88]	; (8000594 <GPIO_PeriClockControl+0x184>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d105      	bne.n	800054a <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000544:	2200      	movs	r2, #0
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000548:	e012      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <GPIO_PeriClockControl+0x188>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d105      	bne.n	800055e <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800055c:	e008      	b.n	8000570 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <GPIO_PeriClockControl+0x18c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d104      	bne.n	8000570 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <GPIO_PeriClockControl+0x170>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <GPIO_PeriClockControl+0x170>)
 800056c:	2200      	movs	r2, #0
 800056e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40020000 	.word	0x40020000
 8000580:	40023800 	.word	0x40023800
 8000584:	40020400 	.word	0x40020400
 8000588:	40020800 	.word	0x40020800
 800058c:	40020c00 	.word	0x40020c00
 8000590:	40021000 	.word	0x40021000
 8000594:	40021400 	.word	0x40021400
 8000598:	40021800 	.word	0x40021800
 800059c:	40021c00 	.word	0x40021c00

080005a0 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff2c 	bl	8000410 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d822      	bhi.n	8000606 <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	2103      	movs	r1, #3
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	400a      	ands	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	430a      	orrs	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e0c3      	b.n	800078e <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b04      	cmp	r3, #4
 800060c:	d117      	bne.n	800063e <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <GPIO_Init+0x198>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a46      	ldr	r2, [pc, #280]	; (8000738 <GPIO_Init+0x198>)
 8000620:	430b      	orrs	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <GPIO_Init+0x198>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a40      	ldr	r2, [pc, #256]	; (8000738 <GPIO_Init+0x198>)
 8000638:	400b      	ands	r3, r1
 800063a:	6093      	str	r3, [r2, #8]
 800063c:	e036      	b.n	80006ac <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d117      	bne.n	8000676 <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <GPIO_Init+0x198>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a38      	ldr	r2, [pc, #224]	; (8000738 <GPIO_Init+0x198>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <GPIO_Init+0x198>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	43d2      	mvns	r2, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a32      	ldr	r2, [pc, #200]	; (8000738 <GPIO_Init+0x198>)
 8000670:	430b      	orrs	r3, r1
 8000672:	60d3      	str	r3, [r2, #12]
 8000674:	e01a      	b.n	80006ac <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	2b06      	cmp	r3, #6
 800067c:	d116      	bne.n	80006ac <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <GPIO_Init+0x198>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	7912      	ldrb	r2, [r2, #4]
 8000686:	4611      	mov	r1, r2
 8000688:	2201      	movs	r2, #1
 800068a:	408a      	lsls	r2, r1
 800068c:	4611      	mov	r1, r2
 800068e:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <GPIO_Init+0x198>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <GPIO_Init+0x198>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	43d2      	mvns	r2, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <GPIO_Init+0x198>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	089b      	lsrs	r3, r3, #2
 80006b2:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	f003 0303 	and.w	r3, r3, #3
 80006bc:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <GPIO_Init+0x19c>)
 80006c0:	7cfb      	ldrb	r3, [r7, #19]
 80006c2:	3302      	adds	r3, #2
 80006c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	491c      	ldr	r1, [pc, #112]	; (8000740 <GPIO_Init+0x1a0>)
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d046      	beq.n	8000760 <GPIO_Init+0x1c0>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	491b      	ldr	r1, [pc, #108]	; (8000744 <GPIO_Init+0x1a4>)
 80006d8:	428b      	cmp	r3, r1
 80006da:	d02b      	beq.n	8000734 <GPIO_Init+0x194>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4919      	ldr	r1, [pc, #100]	; (8000748 <GPIO_Init+0x1a8>)
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d024      	beq.n	8000730 <GPIO_Init+0x190>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4918      	ldr	r1, [pc, #96]	; (800074c <GPIO_Init+0x1ac>)
 80006ec:	428b      	cmp	r3, r1
 80006ee:	d01d      	beq.n	800072c <GPIO_Init+0x18c>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4916      	ldr	r1, [pc, #88]	; (8000750 <GPIO_Init+0x1b0>)
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d016      	beq.n	8000728 <GPIO_Init+0x188>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4915      	ldr	r1, [pc, #84]	; (8000754 <GPIO_Init+0x1b4>)
 8000700:	428b      	cmp	r3, r1
 8000702:	d00f      	beq.n	8000724 <GPIO_Init+0x184>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4913      	ldr	r1, [pc, #76]	; (8000758 <GPIO_Init+0x1b8>)
 800070a:	428b      	cmp	r3, r1
 800070c:	d008      	beq.n	8000720 <GPIO_Init+0x180>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4912      	ldr	r1, [pc, #72]	; (800075c <GPIO_Init+0x1bc>)
 8000714:	428b      	cmp	r3, r1
 8000716:	d101      	bne.n	800071c <GPIO_Init+0x17c>
 8000718:	2307      	movs	r3, #7
 800071a:	e022      	b.n	8000762 <GPIO_Init+0x1c2>
 800071c:	2300      	movs	r3, #0
 800071e:	e020      	b.n	8000762 <GPIO_Init+0x1c2>
 8000720:	2306      	movs	r3, #6
 8000722:	e01e      	b.n	8000762 <GPIO_Init+0x1c2>
 8000724:	2305      	movs	r3, #5
 8000726:	e01c      	b.n	8000762 <GPIO_Init+0x1c2>
 8000728:	2304      	movs	r3, #4
 800072a:	e01a      	b.n	8000762 <GPIO_Init+0x1c2>
 800072c:	2303      	movs	r3, #3
 800072e:	e018      	b.n	8000762 <GPIO_Init+0x1c2>
 8000730:	2302      	movs	r3, #2
 8000732:	e016      	b.n	8000762 <GPIO_Init+0x1c2>
 8000734:	2301      	movs	r3, #1
 8000736:	e014      	b.n	8000762 <GPIO_Init+0x1c2>
 8000738:	40013c00 	.word	0x40013c00
 800073c:	40013800 	.word	0x40013800
 8000740:	40020000 	.word	0x40020000
 8000744:	40020400 	.word	0x40020400
 8000748:	40020800 	.word	0x40020800
 800074c:	40020c00 	.word	0x40020c00
 8000750:	40021000 	.word	0x40021000
 8000754:	40021400 	.word	0x40021400
 8000758:	40021800 	.word	0x40021800
 800075c:	40021c00 	.word	0x40021c00
 8000760:	2300      	movs	r3, #0
 8000762:	7cb9      	ldrb	r1, [r7, #18]
 8000764:	0089      	lsls	r1, r1, #2
 8000766:	408b      	lsls	r3, r1
 8000768:	43db      	mvns	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	4957      	ldr	r1, [pc, #348]	; (80008cc <GPIO_Init+0x32c>)
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	4002      	ands	r2, r0
 8000772:	3302      	adds	r3, #2
 8000774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000778:	4b55      	ldr	r3, [pc, #340]	; (80008d0 <GPIO_Init+0x330>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a51      	ldr	r2, [pc, #324]	; (80008d0 <GPIO_Init+0x330>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	799b      	ldrb	r3, [r3, #6]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2103      	movs	r1, #3
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	400a      	ands	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6899      	ldr	r1, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	79db      	ldrb	r3, [r3, #7]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2103      	movs	r1, #3
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68d9      	ldr	r1, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	430a      	orrs	r2, r1
 8000810:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	4619      	mov	r1, r3
 8000832:	2301      	movs	r3, #1
 8000834:	408b      	lsls	r3, r1
 8000836:	43db      	mvns	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	400a      	ands	r2, r1
 8000840:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	430a      	orrs	r2, r1
 8000850:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d132      	bne.n	80008c4 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	3208      	adds	r2, #8
 800087a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	210f      	movs	r1, #15
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4011      	ands	r1, r2
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	3208      	adds	r2, #8
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7a5b      	ldrb	r3, [r3, #9]
 80008aa:	4619      	mov	r1, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4311      	orrs	r1, r2
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	3208      	adds	r2, #8
 80008c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40013800 	.word	0x40013800
 80008d0:	40013c00 	.word	0x40013c00

080008d4 <SPI_PeriClockControl>:
 * desc: enables or disables the clock for a given SPI peripheral
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d12b      	bne.n	800093e <SPI_PeriClockControl+0x6a>
		if (pSPIx == SPI1) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <SPI_PeriClockControl+0xc4>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <SPI_PeriClockControl+0xc8>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a2a      	ldr	r2, [pc, #168]	; (800099c <SPI_PeriClockControl+0xc8>)
 80008f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pSPIx == SPI4) {
			SPI4_PCLK_DI;
		}
	}
}
 80008fa:	e047      	b.n	800098c <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI2) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <SPI_PeriClockControl+0xcc>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d106      	bne.n	8000912 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN;
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a24      	ldr	r2, [pc, #144]	; (800099c <SPI_PeriClockControl+0xc8>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000910:	e03c      	b.n	800098c <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI3) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <SPI_PeriClockControl+0xd0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <SPI_PeriClockControl+0xc8>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000926:	e031      	b.n	800098c <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI4) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <SPI_PeriClockControl+0xd4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <SPI_PeriClockControl+0xb8>
			SPI4_PCLK_EN;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000936:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800093a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800093c:	e026      	b.n	800098c <SPI_PeriClockControl+0xb8>
		if (pSPIx == SPI1) {
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a15      	ldr	r2, [pc, #84]	; (8000998 <SPI_PeriClockControl+0xc4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d105      	bne.n	8000952 <SPI_PeriClockControl+0x7e>
			SPI1_PCLK_DI;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <SPI_PeriClockControl+0xc8>)
 800094c:	2200      	movs	r2, #0
 800094e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000950:	e01c      	b.n	800098c <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI2) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <SPI_PeriClockControl+0xcc>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d105      	bne.n	8000966 <SPI_PeriClockControl+0x92>
			SPI2_PCLK_DI;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <SPI_PeriClockControl+0xc8>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000960:	2200      	movs	r2, #0
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000964:	e012      	b.n	800098c <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI3) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <SPI_PeriClockControl+0xd0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d105      	bne.n	800097a <SPI_PeriClockControl+0xa6>
			SPI3_PCLK_DI;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000974:	2200      	movs	r2, #0
 8000976:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000978:	e008      	b.n	800098c <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI4) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SPI_PeriClockControl+0xd4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d104      	bne.n	800098c <SPI_PeriClockControl+0xb8>
			SPI4_PCLK_DI;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <SPI_PeriClockControl+0xc8>)
 8000988:	2200      	movs	r2, #0
 800098a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40013000 	.word	0x40013000
 800099c:	40023800 	.word	0x40023800
 80009a0:	40003800 	.word	0x40003800
 80009a4:	40003c00 	.word	0x40003c00
 80009a8:	40013400 	.word	0x40013400

080009ac <SPI_Init>:

/****************************
 * Initialization functions
 ****************************/
// Peripheral Init
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	uint32_t reg_data = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff88 	bl	80008d4 <SPI_PeriClockControl>

	// 1. configure device mode
	reg_data |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]

	// 2. init spi bus configuration
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_DUPLEX) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d104      	bne.n	80009e4 <SPI_Init+0x38>
		// clear bidirectional mode
		reg_data &= ~(1 << SPI_CR1_BIDIMODE);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e010      	b.n	8000a06 <SPI_Init+0x5a>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d104      	bne.n	80009f6 <SPI_Init+0x4a>
		// enable bidirectional mode
		// keep RXONLY clear when bidirectional mode is active
		reg_data |= (1 << SPI_CR1_BIDIMODE);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e007      	b.n	8000a06 <SPI_Init+0x5a>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	795b      	ldrb	r3, [r3, #5]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d103      	bne.n	8000a06 <SPI_Init+0x5a>
		// RXONLY and BIDIMODE can't be set at the same time, so configure RXONLY
		// handle RXONLY
//		reg_data &= ~(1 << SPI_CR1_BIDIMODE);
		reg_data |= (1 << SPI_CR1_RXONLY);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a04:	60fb      	str	r3, [r7, #12]
	}

	// 3. set clock speed
	reg_data |= (pSPIHandle->SPI_Config.SPI_SerialClkSpeed << SPI_CR1_BR);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	799b      	ldrb	r3, [r3, #6]
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

	// 4. set data frame format
	reg_data |= (pSPIHandle->SPI_Config.SPI_DataFrameFormat << SPI_CR1_DFF);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	79db      	ldrb	r3, [r3, #7]
 8000a18:	02db      	lsls	r3, r3, #11
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]

	// 5. set cpol
	reg_data |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

	// 6. set cpha
	reg_data |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7a5b      	ldrb	r3, [r3, #9]
 8000a34:	461a      	mov	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

	// 7. configure software slave management
	reg_data |= (pSPIHandle->SPI_Config.SPI_SoftwareSlaveManagement<< SPI_CR1_SSM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7a9b      	ldrb	r3, [r3, #10]
 8000a40:	025b      	lsls	r3, r3, #9
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = reg_data;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <SPI_SendData>:
 * input1: SPI register struct mapped to the SPI base address
 * input2: a buffer for holding information that goes into the txbuffer
 * input3: the size of the transmission in bytes
 * output: none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	while (len > 0) {
 8000a66:	e024      	b.n	8000ab2 <SPI_SendData+0x58>
		// 1. wait until TXE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_STATUS_TXE_FLAG) == FLAG_RESET);
 8000a68:	bf00      	nop
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f000 f827 	bl	8000ac0 <SPI_GetFlagStatus>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f8      	beq.n	8000a6a <SPI_SendData+0x10>

		// 2. check the DFF register
		// 3. then load the data into the data register
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <SPI_SendData+0x42>
			// 16 bits
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	60da      	str	r2, [r3, #12]
			len =- 2;
 8000a8e:	f06f 0301 	mvn.w	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	e00a      	b.n	8000ab2 <SPI_SendData+0x58>
		} else {
			// 8 bits
			pSPIx->DR = *pTxBuffer;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	60da      	str	r2, [r3, #12]
			len--;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
	while (len > 0) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1d7      	bne.n	8000a68 <SPI_SendData+0xe>
		}
	}
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SPI_GetFlagStatus>:
 * desc: checks the status of a user specified register
 * input1: SPI register pointer mapped to an SPI peripheral
 * input2: an uint32_t status to check for
 * output: the flag register's status
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag_name) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flag_name) return FLAG_SET;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SPI_GetFlagStatus+0x1a>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <SPI_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SPI_PeripheralControl>:
 * desc: enables the SPI peripheral for data transmission
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d106      	bne.n	8000b08 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000b06:	e005      	b.n	8000b14 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SPI_SSOEConfig>:
 *		configuration. Note that when SPE = 1, SSOE = 0 when SSOE is enabled
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d106      	bne.n	8000b40 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f043 0204 	orr.w	r2, r3, #4
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000b3e:	e005      	b.n	8000b4c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f023 0204 	bic.w	r2, r3, #4
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	605a      	str	r2, [r3, #4]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490e      	ldr	r1, [pc, #56]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0b      	ldr	r4, [pc, #44]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b82:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000b86:	f000 f817 	bl	8000bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fbc7 	bl	800031c <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b9c:	08001b68 	.word	0x08001b68
  ldr r2, =_sbss
 8000ba0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ba4:	20000144 	.word	0x20000144

08000ba8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_IRQHandler>
	...

08000bac <__errno>:
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <__errno+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <__libc_init_array>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	4e0d      	ldr	r6, [pc, #52]	; (8000bf0 <__libc_init_array+0x38>)
 8000bbc:	4c0d      	ldr	r4, [pc, #52]	; (8000bf4 <__libc_init_array+0x3c>)
 8000bbe:	1ba4      	subs	r4, r4, r6
 8000bc0:	10a4      	asrs	r4, r4, #2
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	42a5      	cmp	r5, r4
 8000bc6:	d109      	bne.n	8000bdc <__libc_init_array+0x24>
 8000bc8:	4e0b      	ldr	r6, [pc, #44]	; (8000bf8 <__libc_init_array+0x40>)
 8000bca:	4c0c      	ldr	r4, [pc, #48]	; (8000bfc <__libc_init_array+0x44>)
 8000bcc:	f000 ff3c 	bl	8001a48 <_init>
 8000bd0:	1ba4      	subs	r4, r4, r6
 8000bd2:	10a4      	asrs	r4, r4, #2
 8000bd4:	2500      	movs	r5, #0
 8000bd6:	42a5      	cmp	r5, r4
 8000bd8:	d105      	bne.n	8000be6 <__libc_init_array+0x2e>
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be0:	4798      	blx	r3
 8000be2:	3501      	adds	r5, #1
 8000be4:	e7ee      	b.n	8000bc4 <__libc_init_array+0xc>
 8000be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bea:	4798      	blx	r3
 8000bec:	3501      	adds	r5, #1
 8000bee:	e7f2      	b.n	8000bd6 <__libc_init_array+0x1e>
 8000bf0:	08001b60 	.word	0x08001b60
 8000bf4:	08001b60 	.word	0x08001b60
 8000bf8:	08001b60 	.word	0x08001b60
 8000bfc:	08001b64 	.word	0x08001b64

08000c00 <memcpy>:
 8000c00:	b510      	push	{r4, lr}
 8000c02:	1e43      	subs	r3, r0, #1
 8000c04:	440a      	add	r2, r1
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d100      	bne.n	8000c0c <memcpy+0xc>
 8000c0a:	bd10      	pop	{r4, pc}
 8000c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000c14:	e7f7      	b.n	8000c06 <memcpy+0x6>

08000c16 <memset>:
 8000c16:	4402      	add	r2, r0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <memset+0xa>
 8000c1e:	4770      	bx	lr
 8000c20:	f803 1b01 	strb.w	r1, [r3], #1
 8000c24:	e7f9      	b.n	8000c1a <memset+0x4>
	...

08000c28 <_puts_r>:
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	460e      	mov	r6, r1
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	b118      	cbz	r0, 8000c38 <_puts_r+0x10>
 8000c30:	6983      	ldr	r3, [r0, #24]
 8000c32:	b90b      	cbnz	r3, 8000c38 <_puts_r+0x10>
 8000c34:	f000 fa0c 	bl	8001050 <__sinit>
 8000c38:	69ab      	ldr	r3, [r5, #24]
 8000c3a:	68ac      	ldr	r4, [r5, #8]
 8000c3c:	b913      	cbnz	r3, 8000c44 <_puts_r+0x1c>
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f000 fa06 	bl	8001050 <__sinit>
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <_puts_r+0xac>)
 8000c46:	429c      	cmp	r4, r3
 8000c48:	d117      	bne.n	8000c7a <_puts_r+0x52>
 8000c4a:	686c      	ldr	r4, [r5, #4]
 8000c4c:	89a3      	ldrh	r3, [r4, #12]
 8000c4e:	071b      	lsls	r3, r3, #28
 8000c50:	d51d      	bpl.n	8000c8e <_puts_r+0x66>
 8000c52:	6923      	ldr	r3, [r4, #16]
 8000c54:	b1db      	cbz	r3, 8000c8e <_puts_r+0x66>
 8000c56:	3e01      	subs	r6, #1
 8000c58:	68a3      	ldr	r3, [r4, #8]
 8000c5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	60a3      	str	r3, [r4, #8]
 8000c62:	b9e9      	cbnz	r1, 8000ca0 <_puts_r+0x78>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da2e      	bge.n	8000cc6 <_puts_r+0x9e>
 8000c68:	4622      	mov	r2, r4
 8000c6a:	210a      	movs	r1, #10
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f000 f83f 	bl	8000cf0 <__swbuf_r>
 8000c72:	3001      	adds	r0, #1
 8000c74:	d011      	beq.n	8000c9a <_puts_r+0x72>
 8000c76:	200a      	movs	r0, #10
 8000c78:	e011      	b.n	8000c9e <_puts_r+0x76>
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <_puts_r+0xb0>)
 8000c7c:	429c      	cmp	r4, r3
 8000c7e:	d101      	bne.n	8000c84 <_puts_r+0x5c>
 8000c80:	68ac      	ldr	r4, [r5, #8]
 8000c82:	e7e3      	b.n	8000c4c <_puts_r+0x24>
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_puts_r+0xb4>)
 8000c86:	429c      	cmp	r4, r3
 8000c88:	bf08      	it	eq
 8000c8a:	68ec      	ldreq	r4, [r5, #12]
 8000c8c:	e7de      	b.n	8000c4c <_puts_r+0x24>
 8000c8e:	4621      	mov	r1, r4
 8000c90:	4628      	mov	r0, r5
 8000c92:	f000 f87f 	bl	8000d94 <__swsetup_r>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d0dd      	beq.n	8000c56 <_puts_r+0x2e>
 8000c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da04      	bge.n	8000cae <_puts_r+0x86>
 8000ca4:	69a2      	ldr	r2, [r4, #24]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dc06      	bgt.n	8000cb8 <_puts_r+0x90>
 8000caa:	290a      	cmp	r1, #10
 8000cac:	d004      	beq.n	8000cb8 <_puts_r+0x90>
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	6022      	str	r2, [r4, #0]
 8000cb4:	7019      	strb	r1, [r3, #0]
 8000cb6:	e7cf      	b.n	8000c58 <_puts_r+0x30>
 8000cb8:	4622      	mov	r2, r4
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f000 f818 	bl	8000cf0 <__swbuf_r>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d1c9      	bne.n	8000c58 <_puts_r+0x30>
 8000cc4:	e7e9      	b.n	8000c9a <_puts_r+0x72>
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	200a      	movs	r0, #10
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	6022      	str	r2, [r4, #0]
 8000cce:	7018      	strb	r0, [r3, #0]
 8000cd0:	e7e5      	b.n	8000c9e <_puts_r+0x76>
 8000cd2:	bf00      	nop
 8000cd4:	08001b04 	.word	0x08001b04
 8000cd8:	08001b24 	.word	0x08001b24
 8000cdc:	08001ae4 	.word	0x08001ae4

08000ce0 <puts>:
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <puts+0xc>)
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f7ff bf9f 	b.w	8000c28 <_puts_r>
 8000cea:	bf00      	nop
 8000cec:	20000000 	.word	0x20000000

08000cf0 <__swbuf_r>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	460e      	mov	r6, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	b118      	cbz	r0, 8000d02 <__swbuf_r+0x12>
 8000cfa:	6983      	ldr	r3, [r0, #24]
 8000cfc:	b90b      	cbnz	r3, 8000d02 <__swbuf_r+0x12>
 8000cfe:	f000 f9a7 	bl	8001050 <__sinit>
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <__swbuf_r+0x98>)
 8000d04:	429c      	cmp	r4, r3
 8000d06:	d12a      	bne.n	8000d5e <__swbuf_r+0x6e>
 8000d08:	686c      	ldr	r4, [r5, #4]
 8000d0a:	69a3      	ldr	r3, [r4, #24]
 8000d0c:	60a3      	str	r3, [r4, #8]
 8000d0e:	89a3      	ldrh	r3, [r4, #12]
 8000d10:	071a      	lsls	r2, r3, #28
 8000d12:	d52e      	bpl.n	8000d72 <__swbuf_r+0x82>
 8000d14:	6923      	ldr	r3, [r4, #16]
 8000d16:	b363      	cbz	r3, 8000d72 <__swbuf_r+0x82>
 8000d18:	6923      	ldr	r3, [r4, #16]
 8000d1a:	6820      	ldr	r0, [r4, #0]
 8000d1c:	1ac0      	subs	r0, r0, r3
 8000d1e:	6963      	ldr	r3, [r4, #20]
 8000d20:	b2f6      	uxtb	r6, r6
 8000d22:	4283      	cmp	r3, r0
 8000d24:	4637      	mov	r7, r6
 8000d26:	dc04      	bgt.n	8000d32 <__swbuf_r+0x42>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	4628      	mov	r0, r5
 8000d2c:	f000 f926 	bl	8000f7c <_fflush_r>
 8000d30:	bb28      	cbnz	r0, 8000d7e <__swbuf_r+0x8e>
 8000d32:	68a3      	ldr	r3, [r4, #8]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	60a3      	str	r3, [r4, #8]
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	6022      	str	r2, [r4, #0]
 8000d3e:	701e      	strb	r6, [r3, #0]
 8000d40:	6963      	ldr	r3, [r4, #20]
 8000d42:	3001      	adds	r0, #1
 8000d44:	4283      	cmp	r3, r0
 8000d46:	d004      	beq.n	8000d52 <__swbuf_r+0x62>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	07db      	lsls	r3, r3, #31
 8000d4c:	d519      	bpl.n	8000d82 <__swbuf_r+0x92>
 8000d4e:	2e0a      	cmp	r6, #10
 8000d50:	d117      	bne.n	8000d82 <__swbuf_r+0x92>
 8000d52:	4621      	mov	r1, r4
 8000d54:	4628      	mov	r0, r5
 8000d56:	f000 f911 	bl	8000f7c <_fflush_r>
 8000d5a:	b190      	cbz	r0, 8000d82 <__swbuf_r+0x92>
 8000d5c:	e00f      	b.n	8000d7e <__swbuf_r+0x8e>
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <__swbuf_r+0x9c>)
 8000d60:	429c      	cmp	r4, r3
 8000d62:	d101      	bne.n	8000d68 <__swbuf_r+0x78>
 8000d64:	68ac      	ldr	r4, [r5, #8]
 8000d66:	e7d0      	b.n	8000d0a <__swbuf_r+0x1a>
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <__swbuf_r+0xa0>)
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	bf08      	it	eq
 8000d6e:	68ec      	ldreq	r4, [r5, #12]
 8000d70:	e7cb      	b.n	8000d0a <__swbuf_r+0x1a>
 8000d72:	4621      	mov	r1, r4
 8000d74:	4628      	mov	r0, r5
 8000d76:	f000 f80d 	bl	8000d94 <__swsetup_r>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d0cc      	beq.n	8000d18 <__swbuf_r+0x28>
 8000d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8000d82:	4638      	mov	r0, r7
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	08001b04 	.word	0x08001b04
 8000d8c:	08001b24 	.word	0x08001b24
 8000d90:	08001ae4 	.word	0x08001ae4

08000d94 <__swsetup_r>:
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <__swsetup_r+0xcc>)
 8000d96:	b570      	push	{r4, r5, r6, lr}
 8000d98:	681d      	ldr	r5, [r3, #0]
 8000d9a:	4606      	mov	r6, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	b125      	cbz	r5, 8000daa <__swsetup_r+0x16>
 8000da0:	69ab      	ldr	r3, [r5, #24]
 8000da2:	b913      	cbnz	r3, 8000daa <__swsetup_r+0x16>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f000 f953 	bl	8001050 <__sinit>
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <__swsetup_r+0xd0>)
 8000dac:	429c      	cmp	r4, r3
 8000dae:	d10f      	bne.n	8000dd0 <__swsetup_r+0x3c>
 8000db0:	686c      	ldr	r4, [r5, #4]
 8000db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	0715      	lsls	r5, r2, #28
 8000dba:	d42c      	bmi.n	8000e16 <__swsetup_r+0x82>
 8000dbc:	06d0      	lsls	r0, r2, #27
 8000dbe:	d411      	bmi.n	8000de4 <__swsetup_r+0x50>
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	6032      	str	r2, [r6, #0]
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	81a3      	strh	r3, [r4, #12]
 8000dca:	f04f 30ff 	mov.w	r0, #4294967295
 8000dce:	e03e      	b.n	8000e4e <__swsetup_r+0xba>
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <__swsetup_r+0xd4>)
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	d101      	bne.n	8000dda <__swsetup_r+0x46>
 8000dd6:	68ac      	ldr	r4, [r5, #8]
 8000dd8:	e7eb      	b.n	8000db2 <__swsetup_r+0x1e>
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <__swsetup_r+0xd8>)
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	bf08      	it	eq
 8000de0:	68ec      	ldreq	r4, [r5, #12]
 8000de2:	e7e6      	b.n	8000db2 <__swsetup_r+0x1e>
 8000de4:	0751      	lsls	r1, r2, #29
 8000de6:	d512      	bpl.n	8000e0e <__swsetup_r+0x7a>
 8000de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dea:	b141      	cbz	r1, 8000dfe <__swsetup_r+0x6a>
 8000dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d002      	beq.n	8000dfa <__swsetup_r+0x66>
 8000df4:	4630      	mov	r0, r6
 8000df6:	f000 fa19 	bl	800122c <_free_r>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8000dfe:	89a3      	ldrh	r3, [r4, #12]
 8000e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e04:	81a3      	strh	r3, [r4, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	6063      	str	r3, [r4, #4]
 8000e0a:	6923      	ldr	r3, [r4, #16]
 8000e0c:	6023      	str	r3, [r4, #0]
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	6923      	ldr	r3, [r4, #16]
 8000e18:	b94b      	cbnz	r3, 8000e2e <__swsetup_r+0x9a>
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e24:	d003      	beq.n	8000e2e <__swsetup_r+0x9a>
 8000e26:	4621      	mov	r1, r4
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f000 f9bf 	bl	80011ac <__smakebuf_r>
 8000e2e:	89a2      	ldrh	r2, [r4, #12]
 8000e30:	f012 0301 	ands.w	r3, r2, #1
 8000e34:	d00c      	beq.n	8000e50 <__swsetup_r+0xbc>
 8000e36:	2300      	movs	r3, #0
 8000e38:	60a3      	str	r3, [r4, #8]
 8000e3a:	6963      	ldr	r3, [r4, #20]
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	61a3      	str	r3, [r4, #24]
 8000e40:	6923      	ldr	r3, [r4, #16]
 8000e42:	b953      	cbnz	r3, 8000e5a <__swsetup_r+0xc6>
 8000e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000e4c:	d1ba      	bne.n	8000dc4 <__swsetup_r+0x30>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	0792      	lsls	r2, r2, #30
 8000e52:	bf58      	it	pl
 8000e54:	6963      	ldrpl	r3, [r4, #20]
 8000e56:	60a3      	str	r3, [r4, #8]
 8000e58:	e7f2      	b.n	8000e40 <__swsetup_r+0xac>
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e7f7      	b.n	8000e4e <__swsetup_r+0xba>
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000
 8000e64:	08001b04 	.word	0x08001b04
 8000e68:	08001b24 	.word	0x08001b24
 8000e6c:	08001ae4 	.word	0x08001ae4

08000e70 <__sflush_r>:
 8000e70:	898a      	ldrh	r2, [r1, #12]
 8000e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e76:	4605      	mov	r5, r0
 8000e78:	0710      	lsls	r0, r2, #28
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	d458      	bmi.n	8000f30 <__sflush_r+0xc0>
 8000e7e:	684b      	ldr	r3, [r1, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dc05      	bgt.n	8000e90 <__sflush_r+0x20>
 8000e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dc02      	bgt.n	8000e90 <__sflush_r+0x20>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d0f9      	beq.n	8000e8a <__sflush_r+0x1a>
 8000e96:	2300      	movs	r3, #0
 8000e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000e9c:	682f      	ldr	r7, [r5, #0]
 8000e9e:	6a21      	ldr	r1, [r4, #32]
 8000ea0:	602b      	str	r3, [r5, #0]
 8000ea2:	d032      	beq.n	8000f0a <__sflush_r+0x9a>
 8000ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	075a      	lsls	r2, r3, #29
 8000eaa:	d505      	bpl.n	8000eb8 <__sflush_r+0x48>
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	1ac0      	subs	r0, r0, r3
 8000eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000eb2:	b10b      	cbz	r3, 8000eb8 <__sflush_r+0x48>
 8000eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eb6:	1ac0      	subs	r0, r0, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ebe:	6a21      	ldr	r1, [r4, #32]
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	47b0      	blx	r6
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	89a3      	ldrh	r3, [r4, #12]
 8000ec8:	d106      	bne.n	8000ed8 <__sflush_r+0x68>
 8000eca:	6829      	ldr	r1, [r5, #0]
 8000ecc:	291d      	cmp	r1, #29
 8000ece:	d848      	bhi.n	8000f62 <__sflush_r+0xf2>
 8000ed0:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <__sflush_r+0x108>)
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	07d6      	lsls	r6, r2, #31
 8000ed6:	d544      	bpl.n	8000f62 <__sflush_r+0xf2>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6062      	str	r2, [r4, #4]
 8000edc:	04d9      	lsls	r1, r3, #19
 8000ede:	6922      	ldr	r2, [r4, #16]
 8000ee0:	6022      	str	r2, [r4, #0]
 8000ee2:	d504      	bpl.n	8000eee <__sflush_r+0x7e>
 8000ee4:	1c42      	adds	r2, r0, #1
 8000ee6:	d101      	bne.n	8000eec <__sflush_r+0x7c>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	b903      	cbnz	r3, 8000eee <__sflush_r+0x7e>
 8000eec:	6560      	str	r0, [r4, #84]	; 0x54
 8000eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ef0:	602f      	str	r7, [r5, #0]
 8000ef2:	2900      	cmp	r1, #0
 8000ef4:	d0c9      	beq.n	8000e8a <__sflush_r+0x1a>
 8000ef6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d002      	beq.n	8000f04 <__sflush_r+0x94>
 8000efe:	4628      	mov	r0, r5
 8000f00:	f000 f994 	bl	800122c <_free_r>
 8000f04:	2000      	movs	r0, #0
 8000f06:	6360      	str	r0, [r4, #52]	; 0x34
 8000f08:	e7c0      	b.n	8000e8c <__sflush_r+0x1c>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	47b0      	blx	r6
 8000f10:	1c41      	adds	r1, r0, #1
 8000f12:	d1c8      	bne.n	8000ea6 <__sflush_r+0x36>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0c5      	beq.n	8000ea6 <__sflush_r+0x36>
 8000f1a:	2b1d      	cmp	r3, #29
 8000f1c:	d001      	beq.n	8000f22 <__sflush_r+0xb2>
 8000f1e:	2b16      	cmp	r3, #22
 8000f20:	d101      	bne.n	8000f26 <__sflush_r+0xb6>
 8000f22:	602f      	str	r7, [r5, #0]
 8000f24:	e7b1      	b.n	8000e8a <__sflush_r+0x1a>
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2c:	81a3      	strh	r3, [r4, #12]
 8000f2e:	e7ad      	b.n	8000e8c <__sflush_r+0x1c>
 8000f30:	690f      	ldr	r7, [r1, #16]
 8000f32:	2f00      	cmp	r7, #0
 8000f34:	d0a9      	beq.n	8000e8a <__sflush_r+0x1a>
 8000f36:	0793      	lsls	r3, r2, #30
 8000f38:	680e      	ldr	r6, [r1, #0]
 8000f3a:	bf08      	it	eq
 8000f3c:	694b      	ldreq	r3, [r1, #20]
 8000f3e:	600f      	str	r7, [r1, #0]
 8000f40:	bf18      	it	ne
 8000f42:	2300      	movne	r3, #0
 8000f44:	eba6 0807 	sub.w	r8, r6, r7
 8000f48:	608b      	str	r3, [r1, #8]
 8000f4a:	f1b8 0f00 	cmp.w	r8, #0
 8000f4e:	dd9c      	ble.n	8000e8a <__sflush_r+0x1a>
 8000f50:	4643      	mov	r3, r8
 8000f52:	463a      	mov	r2, r7
 8000f54:	6a21      	ldr	r1, [r4, #32]
 8000f56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f58:	4628      	mov	r0, r5
 8000f5a:	47b0      	blx	r6
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	dc06      	bgt.n	8000f6e <__sflush_r+0xfe>
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	81a3      	strh	r3, [r4, #12]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	e78e      	b.n	8000e8c <__sflush_r+0x1c>
 8000f6e:	4407      	add	r7, r0
 8000f70:	eba8 0800 	sub.w	r8, r8, r0
 8000f74:	e7e9      	b.n	8000f4a <__sflush_r+0xda>
 8000f76:	bf00      	nop
 8000f78:	20400001 	.word	0x20400001

08000f7c <_fflush_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	690b      	ldr	r3, [r1, #16]
 8000f80:	4605      	mov	r5, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	b1db      	cbz	r3, 8000fbe <_fflush_r+0x42>
 8000f86:	b118      	cbz	r0, 8000f90 <_fflush_r+0x14>
 8000f88:	6983      	ldr	r3, [r0, #24]
 8000f8a:	b90b      	cbnz	r3, 8000f90 <_fflush_r+0x14>
 8000f8c:	f000 f860 	bl	8001050 <__sinit>
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <_fflush_r+0x48>)
 8000f92:	429c      	cmp	r4, r3
 8000f94:	d109      	bne.n	8000faa <_fflush_r+0x2e>
 8000f96:	686c      	ldr	r4, [r5, #4]
 8000f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f9c:	b17b      	cbz	r3, 8000fbe <_fflush_r+0x42>
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa6:	f7ff bf63 	b.w	8000e70 <__sflush_r>
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_fflush_r+0x4c>)
 8000fac:	429c      	cmp	r4, r3
 8000fae:	d101      	bne.n	8000fb4 <_fflush_r+0x38>
 8000fb0:	68ac      	ldr	r4, [r5, #8]
 8000fb2:	e7f1      	b.n	8000f98 <_fflush_r+0x1c>
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_fflush_r+0x50>)
 8000fb6:	429c      	cmp	r4, r3
 8000fb8:	bf08      	it	eq
 8000fba:	68ec      	ldreq	r4, [r5, #12]
 8000fbc:	e7ec      	b.n	8000f98 <_fflush_r+0x1c>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08001b04 	.word	0x08001b04
 8000fc8:	08001b24 	.word	0x08001b24
 8000fcc:	08001ae4 	.word	0x08001ae4

08000fd0 <std>:
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	b510      	push	{r4, lr}
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8000fda:	6083      	str	r3, [r0, #8]
 8000fdc:	8181      	strh	r1, [r0, #12]
 8000fde:	6643      	str	r3, [r0, #100]	; 0x64
 8000fe0:	81c2      	strh	r2, [r0, #14]
 8000fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fe6:	6183      	str	r3, [r0, #24]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2208      	movs	r2, #8
 8000fec:	305c      	adds	r0, #92	; 0x5c
 8000fee:	f7ff fe12 	bl	8000c16 <memset>
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <std+0x38>)
 8000ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <std+0x3c>)
 8000ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <std+0x40>)
 8000ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <std+0x44>)
 8001000:	6224      	str	r4, [r4, #32]
 8001002:	6323      	str	r3, [r4, #48]	; 0x30
 8001004:	bd10      	pop	{r4, pc}
 8001006:	bf00      	nop
 8001008:	0800139d 	.word	0x0800139d
 800100c:	080013bf 	.word	0x080013bf
 8001010:	080013f7 	.word	0x080013f7
 8001014:	0800141b 	.word	0x0800141b

08001018 <_cleanup_r>:
 8001018:	4901      	ldr	r1, [pc, #4]	; (8001020 <_cleanup_r+0x8>)
 800101a:	f000 b885 	b.w	8001128 <_fwalk_reent>
 800101e:	bf00      	nop
 8001020:	08000f7d 	.word	0x08000f7d

08001024 <__sfmoreglue>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	1e4a      	subs	r2, r1, #1
 8001028:	2568      	movs	r5, #104	; 0x68
 800102a:	4355      	muls	r5, r2
 800102c:	460e      	mov	r6, r1
 800102e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001032:	f000 f949 	bl	80012c8 <_malloc_r>
 8001036:	4604      	mov	r4, r0
 8001038:	b140      	cbz	r0, 800104c <__sfmoreglue+0x28>
 800103a:	2100      	movs	r1, #0
 800103c:	e9c0 1600 	strd	r1, r6, [r0]
 8001040:	300c      	adds	r0, #12
 8001042:	60a0      	str	r0, [r4, #8]
 8001044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001048:	f7ff fde5 	bl	8000c16 <memset>
 800104c:	4620      	mov	r0, r4
 800104e:	bd70      	pop	{r4, r5, r6, pc}

08001050 <__sinit>:
 8001050:	6983      	ldr	r3, [r0, #24]
 8001052:	b510      	push	{r4, lr}
 8001054:	4604      	mov	r4, r0
 8001056:	bb33      	cbnz	r3, 80010a6 <__sinit+0x56>
 8001058:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800105c:	6503      	str	r3, [r0, #80]	; 0x50
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <__sinit+0x58>)
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <__sinit+0x5c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6282      	str	r2, [r0, #40]	; 0x28
 8001066:	4298      	cmp	r0, r3
 8001068:	bf04      	itt	eq
 800106a:	2301      	moveq	r3, #1
 800106c:	6183      	streq	r3, [r0, #24]
 800106e:	f000 f81f 	bl	80010b0 <__sfp>
 8001072:	6060      	str	r0, [r4, #4]
 8001074:	4620      	mov	r0, r4
 8001076:	f000 f81b 	bl	80010b0 <__sfp>
 800107a:	60a0      	str	r0, [r4, #8]
 800107c:	4620      	mov	r0, r4
 800107e:	f000 f817 	bl	80010b0 <__sfp>
 8001082:	2200      	movs	r2, #0
 8001084:	60e0      	str	r0, [r4, #12]
 8001086:	2104      	movs	r1, #4
 8001088:	6860      	ldr	r0, [r4, #4]
 800108a:	f7ff ffa1 	bl	8000fd0 <std>
 800108e:	2201      	movs	r2, #1
 8001090:	2109      	movs	r1, #9
 8001092:	68a0      	ldr	r0, [r4, #8]
 8001094:	f7ff ff9c 	bl	8000fd0 <std>
 8001098:	2202      	movs	r2, #2
 800109a:	2112      	movs	r1, #18
 800109c:	68e0      	ldr	r0, [r4, #12]
 800109e:	f7ff ff97 	bl	8000fd0 <std>
 80010a2:	2301      	movs	r3, #1
 80010a4:	61a3      	str	r3, [r4, #24]
 80010a6:	bd10      	pop	{r4, pc}
 80010a8:	08001ae0 	.word	0x08001ae0
 80010ac:	08001019 	.word	0x08001019

080010b0 <__sfp>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <__sfp+0x70>)
 80010b4:	681e      	ldr	r6, [r3, #0]
 80010b6:	69b3      	ldr	r3, [r6, #24]
 80010b8:	4607      	mov	r7, r0
 80010ba:	b913      	cbnz	r3, 80010c2 <__sfp+0x12>
 80010bc:	4630      	mov	r0, r6
 80010be:	f7ff ffc7 	bl	8001050 <__sinit>
 80010c2:	3648      	adds	r6, #72	; 0x48
 80010c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	d503      	bpl.n	80010d4 <__sfp+0x24>
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	b133      	cbz	r3, 80010de <__sfp+0x2e>
 80010d0:	6836      	ldr	r6, [r6, #0]
 80010d2:	e7f7      	b.n	80010c4 <__sfp+0x14>
 80010d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80010d8:	b16d      	cbz	r5, 80010f6 <__sfp+0x46>
 80010da:	3468      	adds	r4, #104	; 0x68
 80010dc:	e7f4      	b.n	80010c8 <__sfp+0x18>
 80010de:	2104      	movs	r1, #4
 80010e0:	4638      	mov	r0, r7
 80010e2:	f7ff ff9f 	bl	8001024 <__sfmoreglue>
 80010e6:	6030      	str	r0, [r6, #0]
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d1f1      	bne.n	80010d0 <__sfp+0x20>
 80010ec:	230c      	movs	r3, #12
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4604      	mov	r4, r0
 80010f2:	4620      	mov	r0, r4
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <__sfp+0x74>)
 80010f8:	6665      	str	r5, [r4, #100]	; 0x64
 80010fa:	e9c4 5500 	strd	r5, r5, [r4]
 80010fe:	60a5      	str	r5, [r4, #8]
 8001100:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001104:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001108:	2208      	movs	r2, #8
 800110a:	4629      	mov	r1, r5
 800110c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001110:	f7ff fd81 	bl	8000c16 <memset>
 8001114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800111c:	e7e9      	b.n	80010f2 <__sfp+0x42>
 800111e:	bf00      	nop
 8001120:	08001ae0 	.word	0x08001ae0
 8001124:	ffff0001 	.word	0xffff0001

08001128 <_fwalk_reent>:
 8001128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800112c:	4680      	mov	r8, r0
 800112e:	4689      	mov	r9, r1
 8001130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001134:	2600      	movs	r6, #0
 8001136:	b914      	cbnz	r4, 800113e <_fwalk_reent+0x16>
 8001138:	4630      	mov	r0, r6
 800113a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800113e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001142:	3f01      	subs	r7, #1
 8001144:	d501      	bpl.n	800114a <_fwalk_reent+0x22>
 8001146:	6824      	ldr	r4, [r4, #0]
 8001148:	e7f5      	b.n	8001136 <_fwalk_reent+0xe>
 800114a:	89ab      	ldrh	r3, [r5, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d907      	bls.n	8001160 <_fwalk_reent+0x38>
 8001150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001154:	3301      	adds	r3, #1
 8001156:	d003      	beq.n	8001160 <_fwalk_reent+0x38>
 8001158:	4629      	mov	r1, r5
 800115a:	4640      	mov	r0, r8
 800115c:	47c8      	blx	r9
 800115e:	4306      	orrs	r6, r0
 8001160:	3568      	adds	r5, #104	; 0x68
 8001162:	e7ee      	b.n	8001142 <_fwalk_reent+0x1a>

08001164 <__swhatbuf_r>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	460e      	mov	r6, r1
 8001168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116c:	2900      	cmp	r1, #0
 800116e:	b096      	sub	sp, #88	; 0x58
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	da07      	bge.n	8001186 <__swhatbuf_r+0x22>
 8001176:	2300      	movs	r3, #0
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	89b3      	ldrh	r3, [r6, #12]
 800117c:	061a      	lsls	r2, r3, #24
 800117e:	d410      	bmi.n	80011a2 <__swhatbuf_r+0x3e>
 8001180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001184:	e00e      	b.n	80011a4 <__swhatbuf_r+0x40>
 8001186:	466a      	mov	r2, sp
 8001188:	f000 f96e 	bl	8001468 <_fstat_r>
 800118c:	2800      	cmp	r0, #0
 800118e:	dbf2      	blt.n	8001176 <__swhatbuf_r+0x12>
 8001190:	9a01      	ldr	r2, [sp, #4]
 8001192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800119a:	425a      	negs	r2, r3
 800119c:	415a      	adcs	r2, r3
 800119e:	602a      	str	r2, [r5, #0]
 80011a0:	e7ee      	b.n	8001180 <__swhatbuf_r+0x1c>
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	2000      	movs	r0, #0
 80011a6:	6023      	str	r3, [r4, #0]
 80011a8:	b016      	add	sp, #88	; 0x58
 80011aa:	bd70      	pop	{r4, r5, r6, pc}

080011ac <__smakebuf_r>:
 80011ac:	898b      	ldrh	r3, [r1, #12]
 80011ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011b0:	079d      	lsls	r5, r3, #30
 80011b2:	4606      	mov	r6, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	d507      	bpl.n	80011c8 <__smakebuf_r+0x1c>
 80011b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	6123      	str	r3, [r4, #16]
 80011c0:	2301      	movs	r3, #1
 80011c2:	6163      	str	r3, [r4, #20]
 80011c4:	b002      	add	sp, #8
 80011c6:	bd70      	pop	{r4, r5, r6, pc}
 80011c8:	ab01      	add	r3, sp, #4
 80011ca:	466a      	mov	r2, sp
 80011cc:	f7ff ffca 	bl	8001164 <__swhatbuf_r>
 80011d0:	9900      	ldr	r1, [sp, #0]
 80011d2:	4605      	mov	r5, r0
 80011d4:	4630      	mov	r0, r6
 80011d6:	f000 f877 	bl	80012c8 <_malloc_r>
 80011da:	b948      	cbnz	r0, 80011f0 <__smakebuf_r+0x44>
 80011dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e0:	059a      	lsls	r2, r3, #22
 80011e2:	d4ef      	bmi.n	80011c4 <__smakebuf_r+0x18>
 80011e4:	f023 0303 	bic.w	r3, r3, #3
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	81a3      	strh	r3, [r4, #12]
 80011ee:	e7e3      	b.n	80011b8 <__smakebuf_r+0xc>
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <__smakebuf_r+0x7c>)
 80011f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80011f4:	89a3      	ldrh	r3, [r4, #12]
 80011f6:	6020      	str	r0, [r4, #0]
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	81a3      	strh	r3, [r4, #12]
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	6163      	str	r3, [r4, #20]
 8001202:	9b01      	ldr	r3, [sp, #4]
 8001204:	6120      	str	r0, [r4, #16]
 8001206:	b15b      	cbz	r3, 8001220 <__smakebuf_r+0x74>
 8001208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f93d 	bl	800148c <_isatty_r>
 8001212:	b128      	cbz	r0, 8001220 <__smakebuf_r+0x74>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	89a3      	ldrh	r3, [r4, #12]
 8001222:	431d      	orrs	r5, r3
 8001224:	81a5      	strh	r5, [r4, #12]
 8001226:	e7cd      	b.n	80011c4 <__smakebuf_r+0x18>
 8001228:	08001019 	.word	0x08001019

0800122c <_free_r>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4605      	mov	r5, r0
 8001230:	2900      	cmp	r1, #0
 8001232:	d045      	beq.n	80012c0 <_free_r+0x94>
 8001234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001238:	1f0c      	subs	r4, r1, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	bfb8      	it	lt
 800123e:	18e4      	addlt	r4, r4, r3
 8001240:	f000 f946 	bl	80014d0 <__malloc_lock>
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <_free_r+0x98>)
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	4610      	mov	r0, r2
 800124a:	b933      	cbnz	r3, 800125a <_free_r+0x2e>
 800124c:	6063      	str	r3, [r4, #4]
 800124e:	6014      	str	r4, [r2, #0]
 8001250:	4628      	mov	r0, r5
 8001252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001256:	f000 b93c 	b.w	80014d2 <__malloc_unlock>
 800125a:	42a3      	cmp	r3, r4
 800125c:	d90c      	bls.n	8001278 <_free_r+0x4c>
 800125e:	6821      	ldr	r1, [r4, #0]
 8001260:	1862      	adds	r2, r4, r1
 8001262:	4293      	cmp	r3, r2
 8001264:	bf04      	itt	eq
 8001266:	681a      	ldreq	r2, [r3, #0]
 8001268:	685b      	ldreq	r3, [r3, #4]
 800126a:	6063      	str	r3, [r4, #4]
 800126c:	bf04      	itt	eq
 800126e:	1852      	addeq	r2, r2, r1
 8001270:	6022      	streq	r2, [r4, #0]
 8001272:	6004      	str	r4, [r0, #0]
 8001274:	e7ec      	b.n	8001250 <_free_r+0x24>
 8001276:	4613      	mov	r3, r2
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	b10a      	cbz	r2, 8001280 <_free_r+0x54>
 800127c:	42a2      	cmp	r2, r4
 800127e:	d9fa      	bls.n	8001276 <_free_r+0x4a>
 8001280:	6819      	ldr	r1, [r3, #0]
 8001282:	1858      	adds	r0, r3, r1
 8001284:	42a0      	cmp	r0, r4
 8001286:	d10b      	bne.n	80012a0 <_free_r+0x74>
 8001288:	6820      	ldr	r0, [r4, #0]
 800128a:	4401      	add	r1, r0
 800128c:	1858      	adds	r0, r3, r1
 800128e:	4282      	cmp	r2, r0
 8001290:	6019      	str	r1, [r3, #0]
 8001292:	d1dd      	bne.n	8001250 <_free_r+0x24>
 8001294:	6810      	ldr	r0, [r2, #0]
 8001296:	6852      	ldr	r2, [r2, #4]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	4401      	add	r1, r0
 800129c:	6019      	str	r1, [r3, #0]
 800129e:	e7d7      	b.n	8001250 <_free_r+0x24>
 80012a0:	d902      	bls.n	80012a8 <_free_r+0x7c>
 80012a2:	230c      	movs	r3, #12
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	e7d3      	b.n	8001250 <_free_r+0x24>
 80012a8:	6820      	ldr	r0, [r4, #0]
 80012aa:	1821      	adds	r1, r4, r0
 80012ac:	428a      	cmp	r2, r1
 80012ae:	bf04      	itt	eq
 80012b0:	6811      	ldreq	r1, [r2, #0]
 80012b2:	6852      	ldreq	r2, [r2, #4]
 80012b4:	6062      	str	r2, [r4, #4]
 80012b6:	bf04      	itt	eq
 80012b8:	1809      	addeq	r1, r1, r0
 80012ba:	6021      	streq	r1, [r4, #0]
 80012bc:	605c      	str	r4, [r3, #4]
 80012be:	e7c7      	b.n	8001250 <_free_r+0x24>
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
 80012c2:	bf00      	nop
 80012c4:	2000008c 	.word	0x2000008c

080012c8 <_malloc_r>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	1ccd      	adds	r5, r1, #3
 80012cc:	f025 0503 	bic.w	r5, r5, #3
 80012d0:	3508      	adds	r5, #8
 80012d2:	2d0c      	cmp	r5, #12
 80012d4:	bf38      	it	cc
 80012d6:	250c      	movcc	r5, #12
 80012d8:	2d00      	cmp	r5, #0
 80012da:	4606      	mov	r6, r0
 80012dc:	db01      	blt.n	80012e2 <_malloc_r+0x1a>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d903      	bls.n	80012ea <_malloc_r+0x22>
 80012e2:	230c      	movs	r3, #12
 80012e4:	6033      	str	r3, [r6, #0]
 80012e6:	2000      	movs	r0, #0
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
 80012ea:	f000 f8f1 	bl	80014d0 <__malloc_lock>
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <_malloc_r+0xac>)
 80012f0:	6814      	ldr	r4, [r2, #0]
 80012f2:	4621      	mov	r1, r4
 80012f4:	b991      	cbnz	r1, 800131c <_malloc_r+0x54>
 80012f6:	4c20      	ldr	r4, [pc, #128]	; (8001378 <_malloc_r+0xb0>)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	b91b      	cbnz	r3, 8001304 <_malloc_r+0x3c>
 80012fc:	4630      	mov	r0, r6
 80012fe:	f000 f83d 	bl	800137c <_sbrk_r>
 8001302:	6020      	str	r0, [r4, #0]
 8001304:	4629      	mov	r1, r5
 8001306:	4630      	mov	r0, r6
 8001308:	f000 f838 	bl	800137c <_sbrk_r>
 800130c:	1c43      	adds	r3, r0, #1
 800130e:	d124      	bne.n	800135a <_malloc_r+0x92>
 8001310:	230c      	movs	r3, #12
 8001312:	6033      	str	r3, [r6, #0]
 8001314:	4630      	mov	r0, r6
 8001316:	f000 f8dc 	bl	80014d2 <__malloc_unlock>
 800131a:	e7e4      	b.n	80012e6 <_malloc_r+0x1e>
 800131c:	680b      	ldr	r3, [r1, #0]
 800131e:	1b5b      	subs	r3, r3, r5
 8001320:	d418      	bmi.n	8001354 <_malloc_r+0x8c>
 8001322:	2b0b      	cmp	r3, #11
 8001324:	d90f      	bls.n	8001346 <_malloc_r+0x7e>
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	50cd      	str	r5, [r1, r3]
 800132a:	18cc      	adds	r4, r1, r3
 800132c:	4630      	mov	r0, r6
 800132e:	f000 f8d0 	bl	80014d2 <__malloc_unlock>
 8001332:	f104 000b 	add.w	r0, r4, #11
 8001336:	1d23      	adds	r3, r4, #4
 8001338:	f020 0007 	bic.w	r0, r0, #7
 800133c:	1ac3      	subs	r3, r0, r3
 800133e:	d0d3      	beq.n	80012e8 <_malloc_r+0x20>
 8001340:	425a      	negs	r2, r3
 8001342:	50e2      	str	r2, [r4, r3]
 8001344:	e7d0      	b.n	80012e8 <_malloc_r+0x20>
 8001346:	428c      	cmp	r4, r1
 8001348:	684b      	ldr	r3, [r1, #4]
 800134a:	bf16      	itet	ne
 800134c:	6063      	strne	r3, [r4, #4]
 800134e:	6013      	streq	r3, [r2, #0]
 8001350:	460c      	movne	r4, r1
 8001352:	e7eb      	b.n	800132c <_malloc_r+0x64>
 8001354:	460c      	mov	r4, r1
 8001356:	6849      	ldr	r1, [r1, #4]
 8001358:	e7cc      	b.n	80012f4 <_malloc_r+0x2c>
 800135a:	1cc4      	adds	r4, r0, #3
 800135c:	f024 0403 	bic.w	r4, r4, #3
 8001360:	42a0      	cmp	r0, r4
 8001362:	d005      	beq.n	8001370 <_malloc_r+0xa8>
 8001364:	1a21      	subs	r1, r4, r0
 8001366:	4630      	mov	r0, r6
 8001368:	f000 f808 	bl	800137c <_sbrk_r>
 800136c:	3001      	adds	r0, #1
 800136e:	d0cf      	beq.n	8001310 <_malloc_r+0x48>
 8001370:	6025      	str	r5, [r4, #0]
 8001372:	e7db      	b.n	800132c <_malloc_r+0x64>
 8001374:	2000008c 	.word	0x2000008c
 8001378:	20000090 	.word	0x20000090

0800137c <_sbrk_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4c06      	ldr	r4, [pc, #24]	; (8001398 <_sbrk_r+0x1c>)
 8001380:	2300      	movs	r3, #0
 8001382:	4605      	mov	r5, r0
 8001384:	4608      	mov	r0, r1
 8001386:	6023      	str	r3, [r4, #0]
 8001388:	f7ff f816 	bl	80003b8 <_sbrk>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	d102      	bne.n	8001396 <_sbrk_r+0x1a>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	b103      	cbz	r3, 8001396 <_sbrk_r+0x1a>
 8001394:	602b      	str	r3, [r5, #0]
 8001396:	bd38      	pop	{r3, r4, r5, pc}
 8001398:	20000140 	.word	0x20000140

0800139c <__sread>:
 800139c:	b510      	push	{r4, lr}
 800139e:	460c      	mov	r4, r1
 80013a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a4:	f000 f896 	bl	80014d4 <_read_r>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	bfab      	itete	ge
 80013ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80013ae:	89a3      	ldrhlt	r3, [r4, #12]
 80013b0:	181b      	addge	r3, r3, r0
 80013b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80013b6:	bfac      	ite	ge
 80013b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80013ba:	81a3      	strhlt	r3, [r4, #12]
 80013bc:	bd10      	pop	{r4, pc}

080013be <__swrite>:
 80013be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c2:	461f      	mov	r7, r3
 80013c4:	898b      	ldrh	r3, [r1, #12]
 80013c6:	05db      	lsls	r3, r3, #23
 80013c8:	4605      	mov	r5, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4616      	mov	r6, r2
 80013ce:	d505      	bpl.n	80013dc <__swrite+0x1e>
 80013d0:	2302      	movs	r3, #2
 80013d2:	2200      	movs	r2, #0
 80013d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d8:	f000 f868 	bl	80014ac <_lseek_r>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013e6:	81a3      	strh	r3, [r4, #12]
 80013e8:	4632      	mov	r2, r6
 80013ea:	463b      	mov	r3, r7
 80013ec:	4628      	mov	r0, r5
 80013ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013f2:	f000 b817 	b.w	8001424 <_write_r>

080013f6 <__sseek>:
 80013f6:	b510      	push	{r4, lr}
 80013f8:	460c      	mov	r4, r1
 80013fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013fe:	f000 f855 	bl	80014ac <_lseek_r>
 8001402:	1c43      	adds	r3, r0, #1
 8001404:	89a3      	ldrh	r3, [r4, #12]
 8001406:	bf15      	itete	ne
 8001408:	6560      	strne	r0, [r4, #84]	; 0x54
 800140a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800140e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001412:	81a3      	strheq	r3, [r4, #12]
 8001414:	bf18      	it	ne
 8001416:	81a3      	strhne	r3, [r4, #12]
 8001418:	bd10      	pop	{r4, pc}

0800141a <__sclose>:
 800141a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800141e:	f000 b813 	b.w	8001448 <_close_r>
	...

08001424 <_write_r>:
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4c07      	ldr	r4, [pc, #28]	; (8001444 <_write_r+0x20>)
 8001428:	4605      	mov	r5, r0
 800142a:	4608      	mov	r0, r1
 800142c:	4611      	mov	r1, r2
 800142e:	2200      	movs	r2, #0
 8001430:	6022      	str	r2, [r4, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	f000 f911 	bl	800165a <_write>
 8001438:	1c43      	adds	r3, r0, #1
 800143a:	d102      	bne.n	8001442 <_write_r+0x1e>
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	b103      	cbz	r3, 8001442 <_write_r+0x1e>
 8001440:	602b      	str	r3, [r5, #0]
 8001442:	bd38      	pop	{r3, r4, r5, pc}
 8001444:	20000140 	.word	0x20000140

08001448 <_close_r>:
 8001448:	b538      	push	{r3, r4, r5, lr}
 800144a:	4c06      	ldr	r4, [pc, #24]	; (8001464 <_close_r+0x1c>)
 800144c:	2300      	movs	r3, #0
 800144e:	4605      	mov	r5, r0
 8001450:	4608      	mov	r0, r1
 8001452:	6023      	str	r3, [r4, #0]
 8001454:	f000 f930 	bl	80016b8 <_close>
 8001458:	1c43      	adds	r3, r0, #1
 800145a:	d102      	bne.n	8001462 <_close_r+0x1a>
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	b103      	cbz	r3, 8001462 <_close_r+0x1a>
 8001460:	602b      	str	r3, [r5, #0]
 8001462:	bd38      	pop	{r3, r4, r5, pc}
 8001464:	20000140 	.word	0x20000140

08001468 <_fstat_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4c07      	ldr	r4, [pc, #28]	; (8001488 <_fstat_r+0x20>)
 800146c:	2300      	movs	r3, #0
 800146e:	4605      	mov	r5, r0
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	f000 f966 	bl	8001746 <_fstat>
 800147a:	1c43      	adds	r3, r0, #1
 800147c:	d102      	bne.n	8001484 <_fstat_r+0x1c>
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	b103      	cbz	r3, 8001484 <_fstat_r+0x1c>
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	bd38      	pop	{r3, r4, r5, pc}
 8001486:	bf00      	nop
 8001488:	20000140 	.word	0x20000140

0800148c <_isatty_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4c06      	ldr	r4, [pc, #24]	; (80014a8 <_isatty_r+0x1c>)
 8001490:	2300      	movs	r3, #0
 8001492:	4605      	mov	r5, r0
 8001494:	4608      	mov	r0, r1
 8001496:	6023      	str	r3, [r4, #0]
 8001498:	f000 faba 	bl	8001a10 <_isatty>
 800149c:	1c43      	adds	r3, r0, #1
 800149e:	d102      	bne.n	80014a6 <_isatty_r+0x1a>
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	b103      	cbz	r3, 80014a6 <_isatty_r+0x1a>
 80014a4:	602b      	str	r3, [r5, #0]
 80014a6:	bd38      	pop	{r3, r4, r5, pc}
 80014a8:	20000140 	.word	0x20000140

080014ac <_lseek_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4c07      	ldr	r4, [pc, #28]	; (80014cc <_lseek_r+0x20>)
 80014b0:	4605      	mov	r5, r0
 80014b2:	4608      	mov	r0, r1
 80014b4:	4611      	mov	r1, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	6022      	str	r2, [r4, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	f000 f8bb 	bl	8001636 <_lseek>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_lseek_r+0x1e>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_lseek_r+0x1e>
 80014c8:	602b      	str	r3, [r5, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	20000140 	.word	0x20000140

080014d0 <__malloc_lock>:
 80014d0:	4770      	bx	lr

080014d2 <__malloc_unlock>:
 80014d2:	4770      	bx	lr

080014d4 <_read_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4c07      	ldr	r4, [pc, #28]	; (80014f4 <_read_r+0x20>)
 80014d8:	4605      	mov	r5, r0
 80014da:	4608      	mov	r0, r1
 80014dc:	4611      	mov	r1, r2
 80014de:	2200      	movs	r2, #0
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f000 f850 	bl	8001588 <_read>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_read_r+0x1e>
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_read_r+0x1e>
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	20000140 	.word	0x20000140

080014f8 <findslot>:
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <findslot+0x2c>)
 80014fa:	b510      	push	{r4, lr}
 80014fc:	4604      	mov	r4, r0
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	b118      	cbz	r0, 800150a <findslot+0x12>
 8001502:	6983      	ldr	r3, [r0, #24]
 8001504:	b90b      	cbnz	r3, 800150a <findslot+0x12>
 8001506:	f7ff fda3 	bl	8001050 <__sinit>
 800150a:	2c13      	cmp	r4, #19
 800150c:	d807      	bhi.n	800151e <findslot+0x26>
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <findslot+0x30>)
 8001510:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001514:	3301      	adds	r3, #1
 8001516:	d002      	beq.n	800151e <findslot+0x26>
 8001518:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800151c:	bd10      	pop	{r4, pc}
 800151e:	2000      	movs	r0, #0
 8001520:	e7fc      	b.n	800151c <findslot+0x24>
 8001522:	bf00      	nop
 8001524:	20000000 	.word	0x20000000
 8001528:	200000a0 	.word	0x200000a0

0800152c <checkerror>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	4605      	mov	r5, r0
 8001532:	d109      	bne.n	8001548 <checkerror+0x1c>
 8001534:	f7ff fb3a 	bl	8000bac <__errno>
 8001538:	2413      	movs	r4, #19
 800153a:	4606      	mov	r6, r0
 800153c:	2700      	movs	r7, #0
 800153e:	4620      	mov	r0, r4
 8001540:	4639      	mov	r1, r7
 8001542:	beab      	bkpt	0x00ab
 8001544:	4604      	mov	r4, r0
 8001546:	6034      	str	r4, [r6, #0]
 8001548:	4628      	mov	r0, r5
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800154c <error>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	4605      	mov	r5, r0
 8001550:	f7ff fb2c 	bl	8000bac <__errno>
 8001554:	2413      	movs	r4, #19
 8001556:	4606      	mov	r6, r0
 8001558:	2700      	movs	r7, #0
 800155a:	4620      	mov	r0, r4
 800155c:	4639      	mov	r1, r7
 800155e:	beab      	bkpt	0x00ab
 8001560:	4604      	mov	r4, r0
 8001562:	6034      	str	r4, [r6, #0]
 8001564:	4628      	mov	r0, r5
 8001566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001568 <_swiread>:
 8001568:	b530      	push	{r4, r5, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001570:	9203      	str	r2, [sp, #12]
 8001572:	2406      	movs	r4, #6
 8001574:	ad01      	add	r5, sp, #4
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	beab      	bkpt	0x00ab
 800157c:	4604      	mov	r4, r0
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffd4 	bl	800152c <checkerror>
 8001584:	b005      	add	sp, #20
 8001586:	bd30      	pop	{r4, r5, pc}

08001588 <_read>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	460e      	mov	r6, r1
 800158c:	4615      	mov	r5, r2
 800158e:	f7ff ffb3 	bl	80014f8 <findslot>
 8001592:	4604      	mov	r4, r0
 8001594:	b930      	cbnz	r0, 80015a4 <_read+0x1c>
 8001596:	f7ff fb09 	bl	8000bac <__errno>
 800159a:	2309      	movs	r3, #9
 800159c:	6003      	str	r3, [r0, #0]
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	462a      	mov	r2, r5
 80015a6:	4631      	mov	r1, r6
 80015a8:	6800      	ldr	r0, [r0, #0]
 80015aa:	f7ff ffdd 	bl	8001568 <_swiread>
 80015ae:	1c43      	adds	r3, r0, #1
 80015b0:	bf1f      	itttt	ne
 80015b2:	6863      	ldrne	r3, [r4, #4]
 80015b4:	1a28      	subne	r0, r5, r0
 80015b6:	181b      	addne	r3, r3, r0
 80015b8:	6063      	strne	r3, [r4, #4]
 80015ba:	e7f2      	b.n	80015a2 <_read+0x1a>

080015bc <_swilseek>:
 80015bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015be:	460c      	mov	r4, r1
 80015c0:	4616      	mov	r6, r2
 80015c2:	f7ff ff99 	bl	80014f8 <findslot>
 80015c6:	4605      	mov	r5, r0
 80015c8:	b940      	cbnz	r0, 80015dc <_swilseek+0x20>
 80015ca:	f7ff faef 	bl	8000bac <__errno>
 80015ce:	2309      	movs	r3, #9
 80015d0:	6003      	str	r3, [r0, #0]
 80015d2:	f04f 34ff 	mov.w	r4, #4294967295
 80015d6:	4620      	mov	r0, r4
 80015d8:	b003      	add	sp, #12
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2e02      	cmp	r6, #2
 80015de:	d903      	bls.n	80015e8 <_swilseek+0x2c>
 80015e0:	f7ff fae4 	bl	8000bac <__errno>
 80015e4:	2316      	movs	r3, #22
 80015e6:	e7f3      	b.n	80015d0 <_swilseek+0x14>
 80015e8:	2e01      	cmp	r6, #1
 80015ea:	d112      	bne.n	8001612 <_swilseek+0x56>
 80015ec:	6843      	ldr	r3, [r0, #4]
 80015ee:	18e4      	adds	r4, r4, r3
 80015f0:	d4f6      	bmi.n	80015e0 <_swilseek+0x24>
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	260a      	movs	r6, #10
 80015f6:	e9cd 3400 	strd	r3, r4, [sp]
 80015fa:	466f      	mov	r7, sp
 80015fc:	4630      	mov	r0, r6
 80015fe:	4639      	mov	r1, r7
 8001600:	beab      	bkpt	0x00ab
 8001602:	4606      	mov	r6, r0
 8001604:	4630      	mov	r0, r6
 8001606:	f7ff ff91 	bl	800152c <checkerror>
 800160a:	2800      	cmp	r0, #0
 800160c:	dbe1      	blt.n	80015d2 <_swilseek+0x16>
 800160e:	606c      	str	r4, [r5, #4]
 8001610:	e7e1      	b.n	80015d6 <_swilseek+0x1a>
 8001612:	2e02      	cmp	r6, #2
 8001614:	d1ed      	bne.n	80015f2 <_swilseek+0x36>
 8001616:	af02      	add	r7, sp, #8
 8001618:	6803      	ldr	r3, [r0, #0]
 800161a:	f847 3d08 	str.w	r3, [r7, #-8]!
 800161e:	260c      	movs	r6, #12
 8001620:	4630      	mov	r0, r6
 8001622:	4639      	mov	r1, r7
 8001624:	beab      	bkpt	0x00ab
 8001626:	4606      	mov	r6, r0
 8001628:	4630      	mov	r0, r6
 800162a:	f7ff ff7f 	bl	800152c <checkerror>
 800162e:	1c43      	adds	r3, r0, #1
 8001630:	d0cf      	beq.n	80015d2 <_swilseek+0x16>
 8001632:	4404      	add	r4, r0
 8001634:	e7dd      	b.n	80015f2 <_swilseek+0x36>

08001636 <_lseek>:
 8001636:	f7ff bfc1 	b.w	80015bc <_swilseek>

0800163a <_swiwrite>:
 800163a:	b530      	push	{r4, r5, lr}
 800163c:	b085      	sub	sp, #20
 800163e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001642:	9203      	str	r2, [sp, #12]
 8001644:	2405      	movs	r4, #5
 8001646:	ad01      	add	r5, sp, #4
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	beab      	bkpt	0x00ab
 800164e:	4604      	mov	r4, r0
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff ff6b 	bl	800152c <checkerror>
 8001656:	b005      	add	sp, #20
 8001658:	bd30      	pop	{r4, r5, pc}

0800165a <_write>:
 800165a:	b570      	push	{r4, r5, r6, lr}
 800165c:	460e      	mov	r6, r1
 800165e:	4615      	mov	r5, r2
 8001660:	f7ff ff4a 	bl	80014f8 <findslot>
 8001664:	4604      	mov	r4, r0
 8001666:	b930      	cbnz	r0, 8001676 <_write+0x1c>
 8001668:	f7ff faa0 	bl	8000bac <__errno>
 800166c:	2309      	movs	r3, #9
 800166e:	6003      	str	r3, [r0, #0]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	bd70      	pop	{r4, r5, r6, pc}
 8001676:	462a      	mov	r2, r5
 8001678:	4631      	mov	r1, r6
 800167a:	6800      	ldr	r0, [r0, #0]
 800167c:	f7ff ffdd 	bl	800163a <_swiwrite>
 8001680:	1e02      	subs	r2, r0, #0
 8001682:	dbf5      	blt.n	8001670 <_write+0x16>
 8001684:	6863      	ldr	r3, [r4, #4]
 8001686:	1aa8      	subs	r0, r5, r2
 8001688:	4403      	add	r3, r0
 800168a:	42aa      	cmp	r2, r5
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	d1f1      	bne.n	8001674 <_write+0x1a>
 8001690:	2000      	movs	r0, #0
 8001692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001696:	f7ff bf59 	b.w	800154c <error>

0800169a <_swiclose>:
 800169a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800169c:	ad02      	add	r5, sp, #8
 800169e:	2402      	movs	r4, #2
 80016a0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	beab      	bkpt	0x00ab
 80016aa:	4604      	mov	r4, r0
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff ff3d 	bl	800152c <checkerror>
 80016b2:	b003      	add	sp, #12
 80016b4:	bd30      	pop	{r4, r5, pc}
	...

080016b8 <_close>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4605      	mov	r5, r0
 80016bc:	f7ff ff1c 	bl	80014f8 <findslot>
 80016c0:	4604      	mov	r4, r0
 80016c2:	b930      	cbnz	r0, 80016d2 <_close+0x1a>
 80016c4:	f7ff fa72 	bl	8000bac <__errno>
 80016c8:	2309      	movs	r3, #9
 80016ca:	6003      	str	r3, [r0, #0]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
 80016d2:	3d01      	subs	r5, #1
 80016d4:	2d01      	cmp	r5, #1
 80016d6:	d809      	bhi.n	80016ec <_close+0x34>
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <_close+0x48>)
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d104      	bne.n	80016ec <_close+0x34>
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	6003      	str	r3, [r0, #0]
 80016e8:	2000      	movs	r0, #0
 80016ea:	e7f1      	b.n	80016d0 <_close+0x18>
 80016ec:	6820      	ldr	r0, [r4, #0]
 80016ee:	f7ff ffd4 	bl	800169a <_swiclose>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d1ec      	bne.n	80016d0 <_close+0x18>
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	6023      	str	r3, [r4, #0]
 80016fc:	e7e8      	b.n	80016d0 <_close+0x18>
 80016fe:	bf00      	nop
 8001700:	200000a0 	.word	0x200000a0

08001704 <_swistat>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	460c      	mov	r4, r1
 8001708:	f7ff fef6 	bl	80014f8 <findslot>
 800170c:	4606      	mov	r6, r0
 800170e:	b930      	cbnz	r0, 800171e <_swistat+0x1a>
 8001710:	f7ff fa4c 	bl	8000bac <__errno>
 8001714:	2309      	movs	r3, #9
 8001716:	6003      	str	r3, [r0, #0]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	bd70      	pop	{r4, r5, r6, pc}
 800171e:	6863      	ldr	r3, [r4, #4]
 8001720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001724:	6063      	str	r3, [r4, #4]
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	6463      	str	r3, [r4, #68]	; 0x44
 800172c:	250c      	movs	r5, #12
 800172e:	4628      	mov	r0, r5
 8001730:	4631      	mov	r1, r6
 8001732:	beab      	bkpt	0x00ab
 8001734:	4605      	mov	r5, r0
 8001736:	4628      	mov	r0, r5
 8001738:	f7ff fef8 	bl	800152c <checkerror>
 800173c:	1c43      	adds	r3, r0, #1
 800173e:	bf1c      	itt	ne
 8001740:	6120      	strne	r0, [r4, #16]
 8001742:	2000      	movne	r0, #0
 8001744:	e7ea      	b.n	800171c <_swistat+0x18>

08001746 <_fstat>:
 8001746:	460b      	mov	r3, r1
 8001748:	b510      	push	{r4, lr}
 800174a:	2100      	movs	r1, #0
 800174c:	4604      	mov	r4, r0
 800174e:	2258      	movs	r2, #88	; 0x58
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fa60 	bl	8000c16 <memset>
 8001756:	4601      	mov	r1, r0
 8001758:	4620      	mov	r0, r4
 800175a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800175e:	f7ff bfd1 	b.w	8001704 <_swistat>

08001762 <_stat>:
 8001762:	b538      	push	{r3, r4, r5, lr}
 8001764:	460d      	mov	r5, r1
 8001766:	4604      	mov	r4, r0
 8001768:	2258      	movs	r2, #88	; 0x58
 800176a:	2100      	movs	r1, #0
 800176c:	4628      	mov	r0, r5
 800176e:	f7ff fa52 	bl	8000c16 <memset>
 8001772:	4620      	mov	r0, r4
 8001774:	2100      	movs	r1, #0
 8001776:	f000 f811 	bl	800179c <_swiopen>
 800177a:	1c43      	adds	r3, r0, #1
 800177c:	4604      	mov	r4, r0
 800177e:	d00b      	beq.n	8001798 <_stat+0x36>
 8001780:	686b      	ldr	r3, [r5, #4]
 8001782:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001786:	606b      	str	r3, [r5, #4]
 8001788:	4629      	mov	r1, r5
 800178a:	f7ff ffbb 	bl	8001704 <_swistat>
 800178e:	4605      	mov	r5, r0
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff ff91 	bl	80016b8 <_close>
 8001796:	462c      	mov	r4, r5
 8001798:	4620      	mov	r0, r4
 800179a:	bd38      	pop	{r3, r4, r5, pc}

0800179c <_swiopen>:
 800179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <_swiopen+0xb4>)
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	4682      	mov	sl, r0
 80017a6:	460e      	mov	r6, r1
 80017a8:	2500      	movs	r5, #0
 80017aa:	4698      	mov	r8, r3
 80017ac:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80017b0:	1c61      	adds	r1, r4, #1
 80017b2:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80017b6:	d036      	beq.n	8001826 <_swiopen+0x8a>
 80017b8:	3501      	adds	r5, #1
 80017ba:	2d14      	cmp	r5, #20
 80017bc:	d1f6      	bne.n	80017ac <_swiopen+0x10>
 80017be:	f7ff f9f5 	bl	8000bac <__errno>
 80017c2:	2318      	movs	r3, #24
 80017c4:	6003      	str	r3, [r0, #0]
 80017c6:	f04f 34ff 	mov.w	r4, #4294967295
 80017ca:	e03c      	b.n	8001846 <_swiopen+0xaa>
 80017cc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80017d0:	f240 6301 	movw	r3, #1537	; 0x601
 80017d4:	07b2      	lsls	r2, r6, #30
 80017d6:	bf48      	it	mi
 80017d8:	f044 0402 	orrmi.w	r4, r4, #2
 80017dc:	421e      	tst	r6, r3
 80017de:	bf18      	it	ne
 80017e0:	f044 0404 	orrne.w	r4, r4, #4
 80017e4:	0733      	lsls	r3, r6, #28
 80017e6:	bf48      	it	mi
 80017e8:	f024 0404 	bicmi.w	r4, r4, #4
 80017ec:	4650      	mov	r0, sl
 80017ee:	bf48      	it	mi
 80017f0:	f044 0408 	orrmi.w	r4, r4, #8
 80017f4:	f8cd a000 	str.w	sl, [sp]
 80017f8:	f7fe fd04 	bl	8000204 <strlen>
 80017fc:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001800:	2401      	movs	r4, #1
 8001802:	4620      	mov	r0, r4
 8001804:	4649      	mov	r1, r9
 8001806:	beab      	bkpt	0x00ab
 8001808:	4604      	mov	r4, r0
 800180a:	2c00      	cmp	r4, #0
 800180c:	db06      	blt.n	800181c <_swiopen+0x80>
 800180e:	4447      	add	r7, r8
 8001810:	2300      	movs	r3, #0
 8001812:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	462c      	mov	r4, r5
 800181a:	e014      	b.n	8001846 <_swiopen+0xaa>
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fe95 	bl	800154c <error>
 8001822:	4604      	mov	r4, r0
 8001824:	e00f      	b.n	8001846 <_swiopen+0xaa>
 8001826:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800182a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800182e:	46e9      	mov	r9, sp
 8001830:	d1cc      	bne.n	80017cc <_swiopen+0x30>
 8001832:	4649      	mov	r1, r9
 8001834:	4650      	mov	r0, sl
 8001836:	f7ff ff94 	bl	8001762 <_stat>
 800183a:	3001      	adds	r0, #1
 800183c:	d0c6      	beq.n	80017cc <_swiopen+0x30>
 800183e:	f7ff f9b5 	bl	8000bac <__errno>
 8001842:	2311      	movs	r3, #17
 8001844:	6003      	str	r3, [r0, #0]
 8001846:	4620      	mov	r0, r4
 8001848:	b016      	add	sp, #88	; 0x58
 800184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800184e:	bf00      	nop
 8001850:	200000a0 	.word	0x200000a0

08001854 <_get_semihosting_exts>:
 8001854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001858:	4607      	mov	r7, r0
 800185a:	4688      	mov	r8, r1
 800185c:	4829      	ldr	r0, [pc, #164]	; (8001904 <_get_semihosting_exts+0xb0>)
 800185e:	2100      	movs	r1, #0
 8001860:	4615      	mov	r5, r2
 8001862:	f7ff ff9b 	bl	800179c <_swiopen>
 8001866:	462a      	mov	r2, r5
 8001868:	4604      	mov	r4, r0
 800186a:	2100      	movs	r1, #0
 800186c:	4638      	mov	r0, r7
 800186e:	f7ff f9d2 	bl	8000c16 <memset>
 8001872:	1c63      	adds	r3, r4, #1
 8001874:	d015      	beq.n	80018a2 <_get_semihosting_exts+0x4e>
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff fe3e 	bl	80014f8 <findslot>
 800187c:	260c      	movs	r6, #12
 800187e:	4681      	mov	r9, r0
 8001880:	4630      	mov	r0, r6
 8001882:	4649      	mov	r1, r9
 8001884:	beab      	bkpt	0x00ab
 8001886:	4606      	mov	r6, r0
 8001888:	4630      	mov	r0, r6
 800188a:	f7ff fe4f 	bl	800152c <checkerror>
 800188e:	2803      	cmp	r0, #3
 8001890:	dd02      	ble.n	8001898 <_get_semihosting_exts+0x44>
 8001892:	3803      	subs	r0, #3
 8001894:	42a8      	cmp	r0, r5
 8001896:	dc08      	bgt.n	80018aa <_get_semihosting_exts+0x56>
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff ff0d 	bl	80016b8 <_close>
 800189e:	f04f 34ff 	mov.w	r4, #4294967295
 80018a2:	4620      	mov	r0, r4
 80018a4:	b003      	add	sp, #12
 80018a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018aa:	2204      	movs	r2, #4
 80018ac:	eb0d 0102 	add.w	r1, sp, r2
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fe69 	bl	8001588 <_read>
 80018b6:	2803      	cmp	r0, #3
 80018b8:	ddee      	ble.n	8001898 <_get_semihosting_exts+0x44>
 80018ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018be:	2b53      	cmp	r3, #83	; 0x53
 80018c0:	d1ea      	bne.n	8001898 <_get_semihosting_exts+0x44>
 80018c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018c6:	2b48      	cmp	r3, #72	; 0x48
 80018c8:	d1e6      	bne.n	8001898 <_get_semihosting_exts+0x44>
 80018ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80018ce:	2b46      	cmp	r3, #70	; 0x46
 80018d0:	d1e2      	bne.n	8001898 <_get_semihosting_exts+0x44>
 80018d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018d6:	2b42      	cmp	r3, #66	; 0x42
 80018d8:	d1de      	bne.n	8001898 <_get_semihosting_exts+0x44>
 80018da:	2201      	movs	r2, #1
 80018dc:	4641      	mov	r1, r8
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fe6c 	bl	80015bc <_swilseek>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	dbd7      	blt.n	8001898 <_get_semihosting_exts+0x44>
 80018e8:	462a      	mov	r2, r5
 80018ea:	4639      	mov	r1, r7
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff fe4b 	bl	8001588 <_read>
 80018f2:	4605      	mov	r5, r0
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fedf 	bl	80016b8 <_close>
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7ff fe16 	bl	800152c <checkerror>
 8001900:	4604      	mov	r4, r0
 8001902:	e7ce      	b.n	80018a2 <_get_semihosting_exts+0x4e>
 8001904:	08001b44 	.word	0x08001b44

08001908 <initialise_semihosting_exts>:
 8001908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800190a:	4d0a      	ldr	r5, [pc, #40]	; (8001934 <initialise_semihosting_exts+0x2c>)
 800190c:	4c0a      	ldr	r4, [pc, #40]	; (8001938 <initialise_semihosting_exts+0x30>)
 800190e:	2100      	movs	r1, #0
 8001910:	2201      	movs	r2, #1
 8001912:	a801      	add	r0, sp, #4
 8001914:	6029      	str	r1, [r5, #0]
 8001916:	6022      	str	r2, [r4, #0]
 8001918:	f7ff ff9c 	bl	8001854 <_get_semihosting_exts>
 800191c:	2800      	cmp	r0, #0
 800191e:	dd07      	ble.n	8001930 <initialise_semihosting_exts+0x28>
 8001920:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	602a      	str	r2, [r5, #0]
 800192e:	6023      	str	r3, [r4, #0]
 8001930:	b003      	add	sp, #12
 8001932:	bd30      	pop	{r4, r5, pc}
 8001934:	20000064 	.word	0x20000064
 8001938:	20000068 	.word	0x20000068

0800193c <_has_ext_stdout_stderr>:
 800193c:	b510      	push	{r4, lr}
 800193e:	4c04      	ldr	r4, [pc, #16]	; (8001950 <_has_ext_stdout_stderr+0x14>)
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	2a00      	cmp	r2, #0
 8001944:	da01      	bge.n	800194a <_has_ext_stdout_stderr+0xe>
 8001946:	f7ff ffdf 	bl	8001908 <initialise_semihosting_exts>
 800194a:	6820      	ldr	r0, [r4, #0]
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop
 8001950:	20000068 	.word	0x20000068

08001954 <initialise_monitor_handles>:
 8001954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001958:	b085      	sub	sp, #20
 800195a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001a0c <initialise_monitor_handles+0xb8>
 800195e:	f8cd 9004 	str.w	r9, [sp, #4]
 8001962:	2303      	movs	r3, #3
 8001964:	2400      	movs	r4, #0
 8001966:	9303      	str	r3, [sp, #12]
 8001968:	f10d 0804 	add.w	r8, sp, #4
 800196c:	9402      	str	r4, [sp, #8]
 800196e:	2501      	movs	r5, #1
 8001970:	4628      	mov	r0, r5
 8001972:	4641      	mov	r1, r8
 8001974:	beab      	bkpt	0x00ab
 8001976:	4605      	mov	r5, r0
 8001978:	4e20      	ldr	r6, [pc, #128]	; (80019fc <initialise_monitor_handles+0xa8>)
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <initialise_monitor_handles+0xac>)
 800197c:	6035      	str	r5, [r6, #0]
 800197e:	4623      	mov	r3, r4
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	4614      	mov	r4, r2
 8001986:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800198a:	3301      	adds	r3, #1
 800198c:	2b14      	cmp	r3, #20
 800198e:	d1fa      	bne.n	8001986 <initialise_monitor_handles+0x32>
 8001990:	f7ff ffd4 	bl	800193c <_has_ext_stdout_stderr>
 8001994:	4d1b      	ldr	r5, [pc, #108]	; (8001a04 <initialise_monitor_handles+0xb0>)
 8001996:	b1d0      	cbz	r0, 80019ce <initialise_monitor_handles+0x7a>
 8001998:	f04f 0a03 	mov.w	sl, #3
 800199c:	2304      	movs	r3, #4
 800199e:	f8cd 9004 	str.w	r9, [sp, #4]
 80019a2:	2701      	movs	r7, #1
 80019a4:	f8cd a00c 	str.w	sl, [sp, #12]
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4638      	mov	r0, r7
 80019ac:	4641      	mov	r1, r8
 80019ae:	beab      	bkpt	0x00ab
 80019b0:	4683      	mov	fp, r0
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <initialise_monitor_handles+0xb4>)
 80019b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80019b8:	f8c3 b000 	str.w	fp, [r3]
 80019bc:	2308      	movs	r3, #8
 80019be:	f8cd a00c 	str.w	sl, [sp, #12]
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4638      	mov	r0, r7
 80019c6:	4641      	mov	r1, r8
 80019c8:	beab      	bkpt	0x00ab
 80019ca:	4607      	mov	r7, r0
 80019cc:	602f      	str	r7, [r5, #0]
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	bf02      	ittt	eq
 80019d4:	4b0c      	ldreq	r3, [pc, #48]	; (8001a08 <initialise_monitor_handles+0xb4>)
 80019d6:	681b      	ldreq	r3, [r3, #0]
 80019d8:	602b      	streq	r3, [r5, #0]
 80019da:	6833      	ldr	r3, [r6, #0]
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	2600      	movs	r6, #0
 80019e0:	6066      	str	r6, [r4, #4]
 80019e2:	f7ff ffab 	bl	800193c <_has_ext_stdout_stderr>
 80019e6:	b130      	cbz	r0, 80019f6 <initialise_monitor_handles+0xa2>
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <initialise_monitor_handles+0xb4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80019f6:	b005      	add	sp, #20
 80019f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019fc:	20000098 	.word	0x20000098
 8001a00:	200000a0 	.word	0x200000a0
 8001a04:	20000094 	.word	0x20000094
 8001a08:	2000009c 	.word	0x2000009c
 8001a0c:	08001b5a 	.word	0x08001b5a

08001a10 <_isatty>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	f7ff fd71 	bl	80014f8 <findslot>
 8001a16:	2509      	movs	r5, #9
 8001a18:	4604      	mov	r4, r0
 8001a1a:	b920      	cbnz	r0, 8001a26 <_isatty+0x16>
 8001a1c:	f7ff f8c6 	bl	8000bac <__errno>
 8001a20:	6005      	str	r5, [r0, #0]
 8001a22:	4620      	mov	r0, r4
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
 8001a26:	4628      	mov	r0, r5
 8001a28:	4621      	mov	r1, r4
 8001a2a:	beab      	bkpt	0x00ab
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	2c01      	cmp	r4, #1
 8001a30:	d0f7      	beq.n	8001a22 <_isatty+0x12>
 8001a32:	f7ff f8bb 	bl	8000bac <__errno>
 8001a36:	2400      	movs	r4, #0
 8001a38:	4606      	mov	r6, r0
 8001a3a:	2513      	movs	r5, #19
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	4621      	mov	r1, r4
 8001a40:	beab      	bkpt	0x00ab
 8001a42:	4605      	mov	r5, r0
 8001a44:	6035      	str	r5, [r6, #0]
 8001a46:	e7ec      	b.n	8001a22 <_isatty+0x12>

08001a48 <_init>:
 8001a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4a:	bf00      	nop
 8001a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4e:	bc08      	pop	{r3}
 8001a50:	469e      	mov	lr, r3
 8001a52:	4770      	bx	lr

08001a54 <_fini>:
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	bf00      	nop
 8001a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5a:	bc08      	pop	{r3}
 8001a5c:	469e      	mov	lr, r3
 8001a5e:	4770      	bx	lr
