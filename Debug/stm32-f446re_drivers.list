
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae4  08002ae4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae4  08002ae4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000008c  08002b78  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002b78  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000385e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008c5  00000000  00000000  0002391a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  000241e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c0  00000000  00000000  000243e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003047  00000000  00000000  000245a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f88  00000000  00000000  000275ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b3cc  00000000  00000000  00029577  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001278  00000000  00000000  000349c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002938 	.word	0x08002938

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08002938 	.word	0x08002938

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <I2C1_GPIO_Init>:
/*
 * PB8 = SCL
 * PB9 = SDA
 * Alt Func mode = 4
 */
void I2C1_GPIO_Init(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <I2C1_GPIO_Init+0x40>)
 80002c8:	607b      	str	r3, [r7, #4]

	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ca:	2302      	movs	r3, #2
 80002cc:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_OPEN_DRAIN;
 80002d2:	2301      	movs	r3, #1
 80002d4:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002da:	2302      	movs	r3, #2
 80002dc:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 80002de:	2308      	movs	r3, #8
 80002e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9e1 	bl	80006ac <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 80002ea:	2309      	movs	r3, #9
 80002ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f9db 	bl	80006ac <GPIO_Init>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40020400 	.word	0x40020400

08000304 <I2C1_Init>:

void I2C1_Init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <I2C1_Init+0x2c>)
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <I2C1_Init+0x30>)
 800030c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <I2C1_Init+0x2c>)
 8000310:	2201      	movs	r2, #1
 8000312:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = I2C_SLAVE_ADDR;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <I2C1_Init+0x2c>)
 8000316:	2269      	movs	r2, #105	; 0x69
 8000318:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_CYCLE_2;
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <I2C1_Init+0x2c>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <I2C1_Init+0x2c>)
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <I2C1_Init+0x34>)
 8000324:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000326:	4802      	ldr	r0, [pc, #8]	; (8000330 <I2C1_Init+0x2c>)
 8000328:	f000 fc7c 	bl	8000c24 <I2C_Init>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000164 	.word	0x20000164
 8000334:	40005400 	.word	0x40005400
 8000338:	000186a0 	.word	0x000186a0

0800033c <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	220c      	movs	r2, #12
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f001 f8fd 	bl	8001548 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <GPIO_Button_Init+0x38>)
 8000350:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000352:	230d      	movs	r3, #13
 8000354:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000356:	2300      	movs	r3, #0
 8000358:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 800035e:	2300      	movs	r3, #0
 8000360:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f9a1 	bl	80006ac <GPIO_Init>
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40020800 	.word	0x40020800

08000378 <main>:

int main(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/* This will be an interrupt based version of master rx test
	 * 	Here we initialize interrupts. Note that priority config is not needed as we are only working with one interrupt
	 * 	We also need the interrupt name from the startup code. We override the IRQ handlers with our IRQ handler function
	 */
	initialise_monitor_handles();
 800037c:	f002 fa62 	bl	8002844 <initialise_monitor_handles>
	printf("Semihosting successful\n");
 8000380:	480e      	ldr	r0, [pc, #56]	; (80003bc <main+0x44>)
 8000382:	f001 f95d 	bl	8001640 <puts>
	GPIO_Button_Init();
 8000386:	f7ff ffd9 	bl	800033c <GPIO_Button_Init>
	I2C1_GPIO_Init();
 800038a:	f7ff ff99 	bl	80002c0 <I2C1_GPIO_Init>
	I2C1_Init();
 800038e:	f7ff ffb9 	bl	8000304 <I2C1_Init>

	// IRQ
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000392:	2101      	movs	r1, #1
 8000394:	201f      	movs	r0, #31
 8000396:	f000 fd01 	bl	8000d9c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 800039a:	2101      	movs	r1, #1
 800039c:	2020      	movs	r0, #32
 800039e:	f000 fcfd 	bl	8000d9c <I2C_IRQInterruptConfig>
	I2C_SlaveConfigureCallBackEvents(I2C1, ENABLE);
 80003a2:	2101      	movs	r1, #1
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <main+0x48>)
 80003a6:	f000 fefb 	bl	80011a0 <I2C_SlaveConfigureCallBackEvents>

	I2C_PeripheralControl(I2C1, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <main+0x48>)
 80003ae:	f000 fcbd 	bl	8000d2c <I2C_PeripheralControl>
	// enable ack ater PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003b2:	2101      	movs	r1, #1
 80003b4:	4802      	ldr	r0, [pc, #8]	; (80003c0 <main+0x48>)
 80003b6:	f000 ff27 	bl	8001208 <I2C_ManageAcking>

	while(1);
 80003ba:	e7fe      	b.n	80003ba <main+0x42>
 80003bc:	08002950 	.word	0x08002950
 80003c0:	40005400 	.word	0x40005400

080003c4 <I2C1_EV_IRQHandler>:

	return 0;
}
void I2C1_EV_IRQHandler(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <I2C1_EV_IRQHandler+0x10>)
 80003ca:	f000 fd6d 	bl	8000ea8 <I2C_EV_IRQHandling>
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000164 	.word	0x20000164

080003d8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <I2C1_ER_IRQHandler+0x10>)
 80003de:	f000 fe49 	bl	8001074 <I2C_ER_IRQHandling>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000164 	.word	0x20000164

080003ec <I2C_ApplicationEventCallback>:

// handle the events caused the by driver as described by the application events macros
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv) {
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]
//
//	}
	static uint8_t commandCode = 0;
	static  uint8_t Cnt = 0;

	if(AppEv == I2C_EV_DATA_REQ)
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b08      	cmp	r3, #8
 80003fc:	d128      	bne.n	8000450 <I2C_ApplicationEventCallback+0x64>
	{
		//Master wants some data. slave has to send it
		if(commandCode == 0x51)
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <I2C_ApplicationEventCallback+0xb8>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b51      	cmp	r3, #81	; 0x51
 8000404:	d10e      	bne.n	8000424 <I2C_ApplicationEventCallback+0x38>
		{
			//send the length information to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx,strlen((char*)Tx_buf));
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681c      	ldr	r4, [r3, #0]
 800040a:	4827      	ldr	r0, [pc, #156]	; (80004a8 <I2C_ApplicationEventCallback+0xbc>)
 800040c:	f7ff ff00 	bl	8000210 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4619      	mov	r1, r3
 8000416:	4620      	mov	r0, r4
 8000418:	f000 fca4 	bl	8000d64 <I2C_SlaveSendData>
			printf("sending length info to master\n");
 800041c:	4823      	ldr	r0, [pc, #140]	; (80004ac <I2C_ApplicationEventCallback+0xc0>)
 800041e:	f001 f90f 	bl	8001640 <puts>
	{
		//This happens only during slave reception .
		//Master has ended the I2C communication with the slave.
		printf("Master has ended the I2C communication with the slave.\n");
	}
}
 8000422:	e03b      	b.n	800049c <I2C_ApplicationEventCallback+0xb0>
		}else if (commandCode == 0x52)
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <I2C_ApplicationEventCallback+0xb8>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b52      	cmp	r3, #82	; 0x52
 800042a:	d137      	bne.n	800049c <I2C_ApplicationEventCallback+0xb0>
			I2C_SlaveSendData(pI2CHandle->pI2Cx,Tx_buf[Cnt++]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <I2C_ApplicationEventCallback+0xc4>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	1c5a      	adds	r2, r3, #1
 8000436:	b2d1      	uxtb	r1, r2
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <I2C_ApplicationEventCallback+0xc4>)
 800043a:	7011      	strb	r1, [r2, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <I2C_ApplicationEventCallback+0xbc>)
 8000440:	5c9b      	ldrb	r3, [r3, r2]
 8000442:	4619      	mov	r1, r3
 8000444:	f000 fc8e 	bl	8000d64 <I2C_SlaveSendData>
			printf("sending the contents of tx_buf\n");
 8000448:	481a      	ldr	r0, [pc, #104]	; (80004b4 <I2C_ApplicationEventCallback+0xc8>)
 800044a:	f001 f8f9 	bl	8001640 <puts>
}
 800044e:	e025      	b.n	800049c <I2C_ApplicationEventCallback+0xb0>
	}else if (AppEv == I2C_EV_DATA_RCV)
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	2b09      	cmp	r3, #9
 8000454:	d10f      	bne.n	8000476 <I2C_ApplicationEventCallback+0x8a>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fc91 	bl	8000d82 <I2C_SlaveReceiveData>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <I2C_ApplicationEventCallback+0xb8>)
 8000466:	701a      	strb	r2, [r3, #0]
		printf("The command code is: %x\n", commandCode);
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <I2C_ApplicationEventCallback+0xb8>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	4812      	ldr	r0, [pc, #72]	; (80004b8 <I2C_ApplicationEventCallback+0xcc>)
 8000470:	f001 f872 	bl	8001558 <iprintf>
}
 8000474:	e012      	b.n	800049c <I2C_ApplicationEventCallback+0xb0>
	}else if (AppEv == I2C_ERROR_AF)
 8000476:	78fb      	ldrb	r3, [r7, #3]
 8000478:	2b05      	cmp	r3, #5
 800047a:	d109      	bne.n	8000490 <I2C_ApplicationEventCallback+0xa4>
		commandCode = 0xff;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <I2C_ApplicationEventCallback+0xb8>)
 800047e:	22ff      	movs	r2, #255	; 0xff
 8000480:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <I2C_ApplicationEventCallback+0xc4>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
		printf("nack sent\n");
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <I2C_ApplicationEventCallback+0xd0>)
 800048a:	f001 f8d9 	bl	8001640 <puts>
}
 800048e:	e005      	b.n	800049c <I2C_ApplicationEventCallback+0xb0>
	else if (AppEv == I2C_EV_STOP)
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d102      	bne.n	800049c <I2C_ApplicationEventCallback+0xb0>
		printf("Master has ended the I2C communication with the slave.\n");
 8000496:	480a      	ldr	r0, [pc, #40]	; (80004c0 <I2C_ApplicationEventCallback+0xd4>)
 8000498:	f001 f8d2 	bl	8001640 <puts>
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd90      	pop	{r4, r7, pc}
 80004a4:	200000a8 	.word	0x200000a8
 80004a8:	20000000 	.word	0x20000000
 80004ac:	08002968 	.word	0x08002968
 80004b0:	200000a9 	.word	0x200000a9
 80004b4:	08002988 	.word	0x08002988
 80004b8:	080029a8 	.word	0x080029a8
 80004bc:	080029c4 	.word	0x080029c4
 80004c0:	080029d0 	.word	0x080029d0

080004c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <_sbrk+0x50>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x16>
		heap_end = &end;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <_sbrk+0x50>)
 80004d6:	4a10      	ldr	r2, [pc, #64]	; (8000518 <_sbrk+0x54>)
 80004d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <_sbrk+0x50>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <_sbrk+0x50>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	466a      	mov	r2, sp
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d907      	bls.n	80004fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004ee:	f001 f801 	bl	80014f4 <__errno>
 80004f2:	4602      	mov	r2, r0
 80004f4:	230c      	movs	r3, #12
 80004f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	e006      	b.n	800050c <_sbrk+0x48>
	}

	heap_end += incr;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <_sbrk+0x50>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a03      	ldr	r2, [pc, #12]	; (8000514 <_sbrk+0x50>)
 8000508:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200000ac 	.word	0x200000ac
 8000518:	20000188 	.word	0x20000188

0800051c <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d157      	bne.n	80005de <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a55      	ldr	r2, [pc, #340]	; (8000688 <GPIO_PeriClockControl+0x16c>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 8000536:	4b55      	ldr	r3, [pc, #340]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a54      	ldr	r2, [pc, #336]	; (800068c <GPIO_PeriClockControl+0x170>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 8000542:	e09b      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a52      	ldr	r2, [pc, #328]	; (8000690 <GPIO_PeriClockControl+0x174>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 800054c:	4b4f      	ldr	r3, [pc, #316]	; (800068c <GPIO_PeriClockControl+0x170>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a4e      	ldr	r2, [pc, #312]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e090      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a4d      	ldr	r2, [pc, #308]	; (8000694 <GPIO_PeriClockControl+0x178>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a49      	ldr	r2, [pc, #292]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000568:	f043 0304 	orr.w	r3, r3, #4
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e085      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a49      	ldr	r2, [pc, #292]	; (8000698 <GPIO_PeriClockControl+0x17c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 8000578:	4b44      	ldr	r3, [pc, #272]	; (800068c <GPIO_PeriClockControl+0x170>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a43      	ldr	r2, [pc, #268]	; (800068c <GPIO_PeriClockControl+0x170>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e07a      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a44      	ldr	r2, [pc, #272]	; (800069c <GPIO_PeriClockControl+0x180>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 800058e:	4b3f      	ldr	r3, [pc, #252]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a3e      	ldr	r2, [pc, #248]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e06f      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a40      	ldr	r2, [pc, #256]	; (80006a0 <GPIO_PeriClockControl+0x184>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80005a4:	4b39      	ldr	r3, [pc, #228]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a38      	ldr	r2, [pc, #224]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e064      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a3b      	ldr	r2, [pc, #236]	; (80006a4 <GPIO_PeriClockControl+0x188>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a33      	ldr	r2, [pc, #204]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e059      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <GPIO_PeriClockControl+0x18c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d155      	bne.n	800067c <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a2d      	ldr	r2, [pc, #180]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	e04e      	b.n	800067c <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <GPIO_PeriClockControl+0x16c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d105      	bne.n	80005f2 <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005f0:	e044      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <GPIO_PeriClockControl+0x174>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d105      	bne.n	8000606 <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <GPIO_PeriClockControl+0x170>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000600:	2200      	movs	r2, #0
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000604:	e03a      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <GPIO_PeriClockControl+0x178>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d105      	bne.n	800061a <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000614:	2200      	movs	r2, #0
 8000616:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000618:	e030      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <GPIO_PeriClockControl+0x17c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d105      	bne.n	800062e <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800062c:	e026      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <GPIO_PeriClockControl+0x180>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d105      	bne.n	8000642 <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <GPIO_PeriClockControl+0x170>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000640:	e01c      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <GPIO_PeriClockControl+0x184>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d105      	bne.n	8000656 <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <GPIO_PeriClockControl+0x170>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000654:	e012      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <GPIO_PeriClockControl+0x188>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d105      	bne.n	800066a <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000668:	e008      	b.n	800067c <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <GPIO_PeriClockControl+0x18c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d104      	bne.n	800067c <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <GPIO_PeriClockControl+0x170>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40020000 	.word	0x40020000
 800068c:	40023800 	.word	0x40023800
 8000690:	40020400 	.word	0x40020400
 8000694:	40020800 	.word	0x40020800
 8000698:	40020c00 	.word	0x40020c00
 800069c:	40021000 	.word	0x40021000
 80006a0:	40021400 	.word	0x40021400
 80006a4:	40021800 	.word	0x40021800
 80006a8:	40021c00 	.word	0x40021c00

080006ac <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff2c 	bl	800051c <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d822      	bhi.n	8000712 <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	795b      	ldrb	r3, [r3, #5]
 80006d0:	461a      	mov	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	2103      	movs	r1, #3
 80006ec:	fa01 f303 	lsl.w	r3, r1, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	400a      	ands	r2, r1
 80006fa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6819      	ldr	r1, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	430a      	orrs	r2, r1
 800070a:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e0c3      	b.n	800089a <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d117      	bne.n	800074a <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <GPIO_Init+0x198>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	4611      	mov	r1, r2
 800072a:	4a46      	ldr	r2, [pc, #280]	; (8000844 <GPIO_Init+0x198>)
 800072c:	430b      	orrs	r3, r1
 800072e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <GPIO_Init+0x198>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	7912      	ldrb	r2, [r2, #4]
 8000738:	4611      	mov	r1, r2
 800073a:	2201      	movs	r2, #1
 800073c:	408a      	lsls	r2, r1
 800073e:	43d2      	mvns	r2, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a40      	ldr	r2, [pc, #256]	; (8000844 <GPIO_Init+0x198>)
 8000744:	400b      	ands	r3, r1
 8000746:	6093      	str	r3, [r2, #8]
 8000748:	e036      	b.n	80007b8 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b05      	cmp	r3, #5
 8000750:	d117      	bne.n	8000782 <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <GPIO_Init+0x198>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7912      	ldrb	r2, [r2, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4611      	mov	r1, r2
 8000762:	4a38      	ldr	r2, [pc, #224]	; (8000844 <GPIO_Init+0x198>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000768:	4b36      	ldr	r3, [pc, #216]	; (8000844 <GPIO_Init+0x198>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	43d2      	mvns	r2, r2
 8000778:	4611      	mov	r1, r2
 800077a:	4a32      	ldr	r2, [pc, #200]	; (8000844 <GPIO_Init+0x198>)
 800077c:	430b      	orrs	r3, r1
 800077e:	60d3      	str	r3, [r2, #12]
 8000780:	e01a      	b.n	80007b8 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b06      	cmp	r3, #6
 8000788:	d116      	bne.n	80007b8 <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <GPIO_Init+0x198>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	4611      	mov	r1, r2
 8000794:	2201      	movs	r2, #1
 8000796:	408a      	lsls	r2, r1
 8000798:	4611      	mov	r1, r2
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <GPIO_Init+0x198>)
 800079c:	430b      	orrs	r3, r1
 800079e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <GPIO_Init+0x198>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	7912      	ldrb	r2, [r2, #4]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	43d2      	mvns	r2, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <GPIO_Init+0x198>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	089b      	lsrs	r3, r3, #2
 80007be:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	f003 0303 	and.w	r3, r3, #3
 80007c8:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80007ca:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <GPIO_Init+0x19c>)
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	3302      	adds	r3, #2
 80007d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	491c      	ldr	r1, [pc, #112]	; (800084c <GPIO_Init+0x1a0>)
 80007da:	428b      	cmp	r3, r1
 80007dc:	d046      	beq.n	800086c <GPIO_Init+0x1c0>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	491b      	ldr	r1, [pc, #108]	; (8000850 <GPIO_Init+0x1a4>)
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d02b      	beq.n	8000840 <GPIO_Init+0x194>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4919      	ldr	r1, [pc, #100]	; (8000854 <GPIO_Init+0x1a8>)
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d024      	beq.n	800083c <GPIO_Init+0x190>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4918      	ldr	r1, [pc, #96]	; (8000858 <GPIO_Init+0x1ac>)
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d01d      	beq.n	8000838 <GPIO_Init+0x18c>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4916      	ldr	r1, [pc, #88]	; (800085c <GPIO_Init+0x1b0>)
 8000802:	428b      	cmp	r3, r1
 8000804:	d016      	beq.n	8000834 <GPIO_Init+0x188>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4915      	ldr	r1, [pc, #84]	; (8000860 <GPIO_Init+0x1b4>)
 800080c:	428b      	cmp	r3, r1
 800080e:	d00f      	beq.n	8000830 <GPIO_Init+0x184>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <GPIO_Init+0x1b8>)
 8000816:	428b      	cmp	r3, r1
 8000818:	d008      	beq.n	800082c <GPIO_Init+0x180>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4912      	ldr	r1, [pc, #72]	; (8000868 <GPIO_Init+0x1bc>)
 8000820:	428b      	cmp	r3, r1
 8000822:	d101      	bne.n	8000828 <GPIO_Init+0x17c>
 8000824:	2307      	movs	r3, #7
 8000826:	e022      	b.n	800086e <GPIO_Init+0x1c2>
 8000828:	2300      	movs	r3, #0
 800082a:	e020      	b.n	800086e <GPIO_Init+0x1c2>
 800082c:	2306      	movs	r3, #6
 800082e:	e01e      	b.n	800086e <GPIO_Init+0x1c2>
 8000830:	2305      	movs	r3, #5
 8000832:	e01c      	b.n	800086e <GPIO_Init+0x1c2>
 8000834:	2304      	movs	r3, #4
 8000836:	e01a      	b.n	800086e <GPIO_Init+0x1c2>
 8000838:	2303      	movs	r3, #3
 800083a:	e018      	b.n	800086e <GPIO_Init+0x1c2>
 800083c:	2302      	movs	r3, #2
 800083e:	e016      	b.n	800086e <GPIO_Init+0x1c2>
 8000840:	2301      	movs	r3, #1
 8000842:	e014      	b.n	800086e <GPIO_Init+0x1c2>
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40013800 	.word	0x40013800
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400
 8000854:	40020800 	.word	0x40020800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40021000 	.word	0x40021000
 8000860:	40021400 	.word	0x40021400
 8000864:	40021800 	.word	0x40021800
 8000868:	40021c00 	.word	0x40021c00
 800086c:	2300      	movs	r3, #0
 800086e:	7cb9      	ldrb	r1, [r7, #18]
 8000870:	0089      	lsls	r1, r1, #2
 8000872:	408b      	lsls	r3, r1
 8000874:	43db      	mvns	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	4957      	ldr	r1, [pc, #348]	; (80009d8 <GPIO_Init+0x32c>)
 800087a:	7cfb      	ldrb	r3, [r7, #19]
 800087c:	4002      	ands	r2, r0
 800087e:	3302      	adds	r3, #2
 8000880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000884:	4b55      	ldr	r3, [pc, #340]	; (80009dc <GPIO_Init+0x330>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7912      	ldrb	r2, [r2, #4]
 800088c:	4611      	mov	r1, r2
 800088e:	2201      	movs	r2, #1
 8000890:	408a      	lsls	r2, r1
 8000892:	4611      	mov	r1, r2
 8000894:	4a51      	ldr	r2, [pc, #324]	; (80009dc <GPIO_Init+0x330>)
 8000896:	430b      	orrs	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	799b      	ldrb	r3, [r3, #6]
 800089e:	461a      	mov	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2103      	movs	r1, #3
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	400a      	ands	r2, r1
 80008c8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6899      	ldr	r1, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	79db      	ldrb	r3, [r3, #7]
 80008e2:	461a      	mov	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	68da      	ldr	r2, [r3, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	791b      	ldrb	r3, [r3, #4]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2103      	movs	r1, #3
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	400a      	ands	r2, r1
 800090c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68d9      	ldr	r1, [r3, #12]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	430a      	orrs	r2, r1
 800091c:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7a1b      	ldrb	r3, [r3, #8]
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	4619      	mov	r1, r3
 800093e:	2301      	movs	r3, #1
 8000940:	408b      	lsls	r3, r1
 8000942:	43db      	mvns	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	400a      	ands	r2, r1
 800094c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6859      	ldr	r1, [r3, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	430a      	orrs	r2, r1
 800095c:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d132      	bne.n	80009d0 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	3208      	adds	r2, #8
 8000986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	210f      	movs	r1, #15
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	4619      	mov	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4011      	ands	r1, r2
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	3208      	adds	r2, #8
 80009a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	3208      	adds	r2, #8
 80009ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7a5b      	ldrb	r3, [r3, #9]
 80009b6:	4619      	mov	r1, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4311      	orrs	r1, r2
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	3208      	adds	r2, #8
 80009cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013800 	.word	0x40013800
 80009dc:	40013c00 	.word	0x40013c00

080009e0 <RCC_GetPLLOutputClock>:
 * RCC Get PLL Output Clock
 * desc: gets the pll output clock
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPLLOutputClock() {
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
	 * Definitions:
	 * 	PLLP = main PLL division factor for main system clock
	 * 	PLLN = main PLL multiplication factor for VCO
	 * 	PLLM = division factor for the main PLL input clock
	 */
	uint8_t pll_div_factors[4] = {2, 4, 6, 8};
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <RCC_GetPLLOutputClock+0x88>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	607b      	str	r3, [r7, #4]

	uint32_t clk_src, clk_vco, plln, clk_pll = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
	uint8_t pllp, pllm = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75bb      	strb	r3, [r7, #22]

	temp = (RCC->PLLCFGR << 22) & 1;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <RCC_GetPLLOutputClock+0x8c>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2300      	movs	r3, #0
 80009fe:	75bb      	strb	r3, [r7, #22]
	if (temp) {
 8000a00:	7dbb      	ldrb	r3, [r7, #22]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <RCC_GetPLLOutputClock+0x2c>
		// HSI clock selected as PLL
		clk_src = 16000000;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <RCC_GetPLLOutputClock+0x90>)
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	e001      	b.n	8000a10 <RCC_GetPLLOutputClock+0x30>
	} else {
		// HSE clock selected as PLL
		clk_src = 8000000;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <RCC_GetPLLOutputClock+0x94>)
 8000a0e:	61fb      	str	r3, [r7, #28]
	}

	plln = (RCC->PLLCFGR << 6) & 0x1FF;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <RCC_GetPLLOutputClock+0x8c>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	019b      	lsls	r3, r3, #6
 8000a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a1a:	613b      	str	r3, [r7, #16]
	pllm = (RCC->PLLCFGR << 0) & 0x3F;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <RCC_GetPLLOutputClock+0x8c>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a26:	75fb      	strb	r3, [r7, #23]

	clk_vco = clk_src * (plln / pllm);
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	60fb      	str	r3, [r7, #12]

	temp = (RCC->PLLCFGR << 16) & 0x3;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <RCC_GetPLLOutputClock+0x8c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	75bb      	strb	r3, [r7, #22]
	pllp = pll_div_factors[temp];
 8000a40:	7dbb      	ldrb	r3, [r7, #22]
 8000a42:	f107 0220 	add.w	r2, r7, #32
 8000a46:	4413      	add	r3, r2
 8000a48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a4c:	72fb      	strb	r3, [r7, #11]
	clk_pll = clk_vco / pllp;
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	61bb      	str	r3, [r7, #24]

	return clk_pll;
 8000a58:	69bb      	ldr	r3, [r7, #24]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	08002a08 	.word	0x08002a08
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	00f42400 	.word	0x00f42400
 8000a74:	007a1200 	.word	0x007a1200

08000a78 <RCC_GetPCLK1Value>:
 * RCC Get PLL PCLK1 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK1Value(void) {
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <RCC_GetPCLK1Value+0xec>)
 8000a90:	f107 0408 	add.w	r4, r7, #8
 8000a94:	461d      	mov	r5, r3
 8000a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre1_div_factors[4] = {2, 4, 8, 16};
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <RCC_GetPCLK1Value+0xf0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << 2) & 0x3;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <RCC_GetPCLK1Value+0xf4>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 8000aba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <RCC_GetPCLK1Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <RCC_GetPCLK1Value+0xf8>)
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ac6:	e00d      	b.n	8000ae4 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 1) {
 8000ac8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d102      	bne.n	8000ad6 <RCC_GetPCLK1Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <RCC_GetPCLK1Value+0xfc>)
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ad4:	e006      	b.n	8000ae4 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 2) {
 8000ad6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d102      	bne.n	8000ae4 <RCC_GetPCLK1Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 8000ade:	f7ff ff7f 	bl	80009e0 <RCC_GetPLLOutputClock>
 8000ae2:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << 4) & 0xF;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <RCC_GetPCLK1Value+0xf4>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 8000af6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	d802      	bhi.n	8000b04 <RCC_GetPCLK1Value+0x8c>
 8000afe:	2301      	movs	r3, #1
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
 8000b02:	e009      	b.n	8000b18 <RCC_GetPCLK1Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000b04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b10:	4413      	add	r3, r2
 8000b12:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << 10) & 0x7;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <RCC_GetPCLK1Value+0xf4>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000b22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d803      	bhi.n	8000b32 <RCC_GetPCLK1Value+0xba>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b30:	e009      	b.n	8000b46 <RCC_GetPCLK1Value+0xce>
	else clk_apb = ppre1_div_factors[temp - 4];
 8000b32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b36:	3b04      	subs	r3, #4
 8000b38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk1 = (clk_sys / clk_ahb) / clk_apb;
 8000b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk1;
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bdb0      	pop	{r4, r5, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	08002a0c 	.word	0x08002a0c
 8000b68:	08002a2c 	.word	0x08002a2c
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	00f42400 	.word	0x00f42400
 8000b74:	007a1200 	.word	0x007a1200

08000b78 <I2C_PeriClockControl>:
 * desc: enables the I2C peripheral clock for a specific I2C peripheral
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d120      	bne.n	8000bcc <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <I2C_PeriClockControl+0x9c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI;
		}
	}
}
 8000b9e:	e032      	b.n	8000c06 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb4:	e027      	b.n	8000c06 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <I2C_PeriClockControl+0xa8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d123      	bne.n	8000c06 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_EN;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bca:	e01c      	b.n	8000c06 <I2C_PeriClockControl+0x8e>
		if (pI2Cx == I2C1) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <I2C_PeriClockControl+0x9c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d105      	bne.n	8000be0 <I2C_PeriClockControl+0x68>
			I2C1_PCLK_DI;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bde:	e012      	b.n	8000c06 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d105      	bne.n	8000bf4 <I2C_PeriClockControl+0x7c>
			I2C2_PCLK_DI;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bf2:	e008      	b.n	8000c06 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <I2C_PeriClockControl+0xa8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d104      	bne.n	8000c06 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_DI;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40005800 	.word	0x40005800
 8000c20:	40005c00 	.word	0x40005c00

08000c24 <I2C_Init>:
 * I2C Peripheral Initialization
 * desc: initializes an I2C peripheral
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint32_t temp_reg = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff9e 	bl	8000b78 <I2C_PeriClockControl>

	// Configure I2C with the peripheral clocks frequency
	// only 5 bits are valid
	temp_reg = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	temp_reg |= RCC_GetPCLK1Value() / 1000000U;
 8000c40:	f7ff ff1a 	bl	8000a78 <RCC_GetPCLK1Value>
 8000c44:	4602      	mov	r2, r0
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <I2C_Init+0xfc>)
 8000c48:	fba3 2302 	umull	r2, r3, r3, r2
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = temp_reg & 0x3F;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c5e:	605a      	str	r2, [r3, #4]

	// Specify the address of the device we are going to communicate with
	temp_reg = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
	temp_reg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a1b      	ldrb	r3, [r3, #8]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
	temp_reg |= (1 << I2C_OAR1_BIT14);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = temp_reg;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	609a      	str	r2, [r3, #8]

	// Configure the speed of the serial clock
	uint16_t ccr_val = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	817b      	strh	r3, [r7, #10]
	temp_reg = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <I2C_Init+0x100>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d80f      	bhi.n	8000cb4 <I2C_Init+0x90>
		// slow (standard) mode
		ccr_val = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c94:	f7ff fef0 	bl	8000a78 <RCC_GetPCLK1Value>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	817b      	strh	r3, [r7, #10]
		temp_reg |= (ccr_val & 0xFFF);
 8000ca6:	897b      	ldrh	r3, [r7, #10]
 8000ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e00a      	b.n	8000cca <I2C_Init+0xa6>
	} else {
		// fast mode
		temp_reg |= (1 << I2C_CCR_FS);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cba:	60fb      	str	r3, [r7, #12]
		temp_reg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7a9b      	ldrb	r3, [r3, #10]
 8000cc0:	039b      	lsls	r3, r3, #14
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = temp_reg;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	61da      	str	r2, [r3, #28]


	// Configure the rise time for I2C pins through TRISE
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <I2C_Init+0x100>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d109      	bne.n	8000cf0 <I2C_Init+0xcc>
		temp_reg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000cdc:	f7ff fecc 	bl	8000a78 <RCC_GetPCLK1Value>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <I2C_Init+0xfc>)
 8000ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce8:	0c9b      	lsrs	r3, r3, #18
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e00d      	b.n	8000d0c <I2C_Init+0xe8>
	}
	else {
		temp_reg = ((RCC_GetPCLK1Value() * 300) / 1000000000U + 1);
 8000cf0:	f7ff fec2 	bl	8000a78 <RCC_GetPCLK1Value>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cfa:	fb03 f302 	mul.w	r3, r3, r2
 8000cfe:	0a5b      	lsrs	r3, r3, #9
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <I2C_Init+0x104>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	09db      	lsrs	r3, r3, #7
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (temp_reg & 0x3F);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d16:	621a      	str	r2, [r3, #32]
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	000186a0 	.word	0x000186a0
 8000d28:	00044b83 	.word	0x00044b83

08000d2c <I2C_PeripheralControl>:
 * desc: enables or disables the I2C peripheral (which enables all I2C devices?)
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == ENABLE) {
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d106      	bne.n	8000d4c <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 0201 	orr.w	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000d4a:	e005      	b.n	8000d58 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 0201 	bic.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <I2C_SlaveSendData>:
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE) {
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
	}
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C) {
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2C->DR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	b2db      	uxtb	r3, r3
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <I2C_IRQInterruptConfig>:
 * desc: enables or disables a specific interrupt for a peripheral function
 * input1: a number describing which interrupt to enable
 * input2: an flag for disabling or enabling an NVIC reg
 * output: none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enable_flag) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	if (enable_flag == ENABLE) {
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d133      	bne.n	8000e1a <I2C_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b1f      	cmp	r3, #31
 8000db6:	d80a      	bhi.n	8000dce <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <I2C_IRQInterruptConfig+0xf4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4a32      	ldr	r2, [pc, #200]	; (8000e90 <I2C_IRQInterruptConfig+0xf4>)
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000dcc:	e059      	b.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	d90f      	bls.n	8000df4 <I2C_IRQInterruptConfig+0x58>
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd8:	d80c      	bhi.n	8000df4 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <I2C_IRQInterruptConfig+0xf8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	79fa      	ldrb	r2, [r7, #7]
 8000de0:	f002 021f 	and.w	r2, r2, #31
 8000de4:	2101      	movs	r1, #1
 8000de6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dea:	4611      	mov	r1, r2
 8000dec:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <I2C_IRQInterruptConfig+0xf8>)
 8000dee:	430b      	orrs	r3, r1
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e046      	b.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b3f      	cmp	r3, #63	; 0x3f
 8000df8:	d943      	bls.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b5f      	cmp	r3, #95	; 0x5f
 8000dfe:	d840      	bhi.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <I2C_IRQInterruptConfig+0xfc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <I2C_IRQInterruptConfig+0xfc>)
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	e033      	b.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b1f      	cmp	r3, #31
 8000e1e:	d80a      	bhi.n	8000e36 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <I2C_IRQInterruptConfig+0x100>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	79fa      	ldrb	r2, [r7, #7]
 8000e26:	2101      	movs	r1, #1
 8000e28:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <I2C_IRQInterruptConfig+0x100>)
 8000e30:	430b      	orrs	r3, r1
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	e025      	b.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	d90f      	bls.n	8000e5c <I2C_IRQInterruptConfig+0xc0>
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e40:	d80c      	bhi.n	8000e5c <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <I2C_IRQInterruptConfig+0x104>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	f002 021f 	and.w	r2, r2, #31
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	4611      	mov	r1, r2
 8000e54:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <I2C_IRQInterruptConfig+0x104>)
 8000e56:	430b      	orrs	r3, r1
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e012      	b.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e60:	d90f      	bls.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b5f      	cmp	r3, #95	; 0x5f
 8000e66:	d80c      	bhi.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <I2C_IRQInterruptConfig+0x108>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	79fa      	ldrb	r2, [r7, #7]
 8000e6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <I2C_IRQInterruptConfig+0x108>)
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	e7ff      	b.n	8000e82 <I2C_IRQInterruptConfig+0xe6>
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000e104 	.word	0xe000e104
 8000e98:	e000e108 	.word	0xe000e108
 8000e9c:	e000e180 	.word	0xe000e180
 8000ea0:	e000e184 	.word	0xe000e184
 8000ea4:	e000e188 	.word	0xe000e188

08000ea8 <I2C_EV_IRQHandling>:
 * I2C EV IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C interrupt events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint32_t ITEVTEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eba:	613b      	str	r3, [r7, #16]
	uint32_t ITBUFEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec6:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]

	// check SB
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by SB event
	// relevant only in master mode
	if (ITEVTEN_val && temp) {
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d01b      	beq.n	8000f16 <I2C_EV_IRQHandling+0x6e>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d018      	beq.n	8000f16 <I2C_EV_IRQHandling+0x6e>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7f1b      	ldrb	r3, [r3, #28]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f5b      	ldrb	r3, [r3, #29]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	f000 fa6c 	bl	80013d4 <I2C_ExecuteAddressPhaseWrite>
 8000efc:	e00b      	b.n	8000f16 <I2C_EV_IRQHandling+0x6e>
		}
		else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7f1b      	ldrb	r3, [r3, #28]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d107      	bne.n	8000f16 <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7f5b      	ldrb	r3, [r3, #29]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f000 fa75 	bl	8001400 <I2C_ExecuteAddressPhaseRead>
		}
	}

	// check ADDR
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the ADDR event
	// master mode : address is sent
	// slave mode: address matched with own address
	if (ITEVTEN_val && temp) {
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <I2C_EV_IRQHandling+0x8c>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <I2C_EV_IRQHandling+0x8c>
		// this function will handle the case of receiving the last byte
		I2C_ClearADDRFlag(pI2CHandle);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fa7c 	bl	800142c <I2C_ClearADDRFlag>
	}

	// check BTF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the BTF event. Note that this event will only be triggered
	// from a transmission
	if (ITEVTEN_val && temp) {
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d021      	beq.n	8000f8a <I2C_EV_IRQHandling+0xe2>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d01e      	beq.n	8000f8a <I2C_EV_IRQHandling+0xe2>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7f1b      	ldrb	r3, [r3, #28]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d11a      	bne.n	8000f8a <I2C_EV_IRQHandling+0xe2>
			if (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <I2C_EV_IRQHandling+0xe2>
				if (pI2CHandle->TxLen == 0) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10f      	bne.n	8000f8a <I2C_EV_IRQHandling+0xe2>
					// Closing out an interrupt based data transmission requires 3 different steps.
					// 1. Generate the stop condition
					if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7fdb      	ldrb	r3, [r3, #31]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <I2C_EV_IRQHandling+0xd4>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f962 	bl	8001240 <I2C_GenerateStopCondition>
					// 2. Reset the handle struct
					I2C_CloseSendData(pI2CHandle);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f96f 	bl	8001260 <I2C_CloseSendData>
					// 3. Notify the application that the transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000f82:	2100      	movs	r1, #0
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fa31 	bl	80003ec <I2C_ApplicationEventCallback>
			} else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {}
		}
	}

	// check STOPF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the STOPF event. This will only be generated by the slave
	if (ITEVTEN_val && temp) {
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00c      	beq.n	8000fb6 <I2C_EV_IRQHandling+0x10e>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d009      	beq.n	8000fb6 <I2C_EV_IRQHandling+0x10e>
		// to clear stop we need to read from SR1 and write to CR1. SR1 was already read above so we will write to SR1 here
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	601a      	str	r2, [r3, #0]
		// notify application about STOP
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000fae:	2102      	movs	r1, #2
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fa1b 	bl	80003ec <I2C_ApplicationEventCallback>
	}

	// check TxE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc0:	60bb      	str	r3, [r7, #8]
	// handle the TxE interrupt event
	// interrupt latency delay compensation?
	for (int i=0; i<150; i++) {}
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e002      	b.n	8000fce <I2C_EV_IRQHandling+0x126>
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b95      	cmp	r3, #149	; 0x95
 8000fd2:	ddf9      	ble.n	8000fc8 <I2C_EV_IRQHandling+0x120>
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d01f      	beq.n	800101a <I2C_EV_IRQHandling+0x172>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d01c      	beq.n	800101a <I2C_EV_IRQHandling+0x172>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d019      	beq.n	800101a <I2C_EV_IRQHandling+0x172>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <I2C_EV_IRQHandling+0x15c>
			if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7f1b      	ldrb	r3, [r3, #28]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10e      	bne.n	800101a <I2C_EV_IRQHandling+0x172>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f980 	bl	8001302 <I2C_MasterHandleTXEInterrupt>
 8001002:	e00a      	b.n	800101a <I2C_EV_IRQHandling+0x172>
			}
		}
		else {
			// slave
			// validate that the slave is transmitter mode as determined by the address command byte
			if (pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <I2C_EV_IRQHandling+0x172>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001012:	2108      	movs	r1, #8
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f9e9 	bl	80003ec <I2C_ApplicationEventCallback>
		}
	}

	// check RxNE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001024:	60bb      	str	r3, [r7, #8]
	// handle the RxNE interrupt event
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d01f      	beq.n	800106c <I2C_EV_IRQHandling+0x1c4>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01c      	beq.n	800106c <I2C_EV_IRQHandling+0x1c4>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d019      	beq.n	800106c <I2C_EV_IRQHandling+0x1c4>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <I2C_EV_IRQHandling+0x1ae>
			// device is master
			// RXNE flag is set
			if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7f1b      	ldrb	r3, [r3, #28]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d10e      	bne.n	800106c <I2C_EV_IRQHandling+0x1c4>
				I2C_MasterHandleRNXEInterrupt(pI2CHandle);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f975 	bl	800133e <I2C_MasterHandleRNXEInterrupt>
			// ensure the slave is in receiver mode
			if (!(pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA)))
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		}
	}
}
 8001054:	e00a      	b.n	800106c <I2C_EV_IRQHandling+0x1c4>
			if (!(pI2CHandle->pI2Cx->SR2 & (1 <<I2C_SR2_TRA)))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <I2C_EV_IRQHandling+0x1c4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8001064:	2109      	movs	r1, #9
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff f9c0 	bl	80003ec <I2C_ApplicationEventCallback>
}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <I2C_ER_IRQHandling>:
 * I2C ER IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C error events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	// for error handling clear the status bit and inform the application
	uint8_t ITERREN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITERREN);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	73bb      	strb	r3, [r7, #14]

	// check BERR
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BERR);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	b2da      	uxtb	r2, r3
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	4313      	orrs	r3, r2
 800109a:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00e      	beq.n	80010c0 <I2C_ER_IRQHandling+0x4c>
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <I2C_ER_IRQHandling+0x4c>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b6:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 80010b8:	2103      	movs	r1, #3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff f996 	bl	80003ec <I2C_ApplicationEventCallback>
	}
	// check ARLO
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ARLO);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00e      	beq.n	80010f6 <I2C_ER_IRQHandling+0x82>
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <I2C_ER_IRQHandling+0x82>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010ec:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 80010ee:	2104      	movs	r1, #4
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f97b 	bl	80003ec <I2C_ApplicationEventCallback>
	}
	// check AF, ack failure
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_AF);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	b2da      	uxtb	r2, r3
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	4313      	orrs	r3, r2
 8001106:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00e      	beq.n	800112c <I2C_ER_IRQHandling+0xb8>
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <I2C_ER_IRQHandling+0xb8>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001122:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8001124:	2105      	movs	r1, #5
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f960 	bl	80003ec <I2C_ApplicationEventCallback>
	}
	// check OVR, overrun/underrun
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_OVR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001136:	b2da      	uxtb	r2, r3
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	4313      	orrs	r3, r2
 800113c:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00e      	beq.n	8001162 <I2C_ER_IRQHandling+0xee>
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <I2C_ER_IRQHandling+0xee>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001158:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800115a:	2106      	movs	r1, #6
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff f945 	bl	80003ec <I2C_ApplicationEventCallback>
	}
	// check TIMEOUT
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TIMEOUT);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116c:	b2da      	uxtb	r2, r3
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	4313      	orrs	r3, r2
 8001172:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00e      	beq.n	8001198 <I2C_ER_IRQHandling+0x124>
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00b      	beq.n	8001198 <I2C_ER_IRQHandling+0x124>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800118e:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 8001190:	2107      	movs	r1, #7
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff f92a 	bl	80003ec <I2C_ApplicationEventCallback>
	}
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <I2C_SlaveConfigureCallBackEvents>:

void I2C_SlaveConfigureCallBackEvents(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d112      	bne.n	80011d8 <I2C_SlaveConfigureCallBackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
	} else {
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 80011d6:	e011      	b.n	80011fc <I2C_SlaveConfigureCallBackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <I2C_ManageAcking>:
 * desc: handles the enabling/disabling of I2C ACKing
 * input1: I2C register pointer mapped to an I2C peripheral
 * input2: a flag for enabling/disabling
 * output: none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == I2C_ACK_ENABLE) {
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d106      	bne.n	8001228 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001226:	e005      	b.n	8001234 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <I2C_GenerateStopCondition>:
 * I2C Generate Stop Condition
 * desc: helper function that generates a stop condition
 * input1: pointer to the I2C peripheral addr
 * output: none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <I2C_CloseSendData>:
 * I2C Close Send Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle) {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001276:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001286:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <I2C_CloseReceiveData>:
 * I2C Close Receive Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012bc:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012cc:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	779a      	strb	r2, [r3, #30]
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a5b      	ldrb	r3, [r3, #9]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2101      	movs	r1, #1
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff87 	bl	8001208 <I2C_ManageAcking>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <I2C_MasterHandleTXEInterrupt>:
 * I2C Master Handle TXE Interrupt
 * desc: interrupt function that handles I2C data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle) {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	if (pI2CHandle->TxLen > 0) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00f      	beq.n	8001332 <I2C_MasterHandleTXEInterrupt+0x30>
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	611a      	str	r2, [r3, #16]
		pI2CHandle->pTxBuffer++;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen--;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
	}
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <I2C_MasterHandleRNXEInterrupt>:
 * I2C Master Handle RNXE Interrupt
 * desc: interrupt function that handles I2C data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleRNXEInterrupt(I2C_Handle_t *pI2CHandle) {
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	// two cases: data reception and the last byte data reception
	if (pI2CHandle->RxSize == 1) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7f9b      	ldrb	r3, [r3, #30]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10b      	bne.n	8001366 <I2C_MasterHandleRNXEInterrupt+0x28>
			// the clear address function will handle the addr clearing before this function is called
			// so ack disable is not required here
	//		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
			*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
			pI2CHandle->RxLen--;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
	}
	if (pI2CHandle->RxSize > 1) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f9b      	ldrb	r3, [r3, #30]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d91a      	bls.n	80013a4 <I2C_MasterHandleRNXEInterrupt+0x66>
		if (pI2CHandle->RxLen == 2) I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d105      	bne.n	8001382 <I2C_MasterHandleRNXEInterrupt+0x44>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff43 	bl	8001208 <I2C_ManageAcking>
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
	}
	// if we are at the end of the transmission, close the transmission
	if (pI2CHandle->RxLen == 0) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10f      	bne.n	80013cc <I2C_MasterHandleRNXEInterrupt+0x8e>
		// generate stop
		if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7fdb      	ldrb	r3, [r3, #31]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <I2C_MasterHandleRNXEInterrupt+0x80>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff41 	bl	8001240 <I2C_GenerateStopCondition>
		// close I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff71 	bl	80012a6 <I2C_CloseReceiveData>
		// notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 80013c4:	2101      	movs	r1, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff f810 	bl	80003ec <I2C_ApplicationEventCallback>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <I2C_ExecuteAddressPhaseWrite>:
 * desc: helper function that transmits the slave addr followed by a write command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	70fb      	strb	r3, [r7, #3]
	slave_addr &= ~(1);
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <I2C_ExecuteAddressPhaseRead>:
 * desc: helper function that transmits the slave addr followed by a read command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	70fb      	strb	r3, [r7, #3]
	slave_addr |= 1;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <I2C_ClearADDRFlag>:
 * I2C Clear Address Flag
 * desc: helper function that clears the ADDR bit in the in the SR1 reg
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	uint32_t clear_read = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
	// check if device is master or slave mode
	// master mode conditional
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d01f      	beq.n	8001486 <I2C_ClearADDRFlag+0x5a>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7f1b      	ldrb	r3, [r3, #28]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d112      	bne.n	8001474 <I2C_ClearADDRFlag+0x48>
			if (pI2CHandle->RxSize == 1) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7f9b      	ldrb	r3, [r3, #30]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d11f      	bne.n	8001496 <I2C_ClearADDRFlag+0x6a>
				// disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fed3 	bl	8001208 <I2C_ManageAcking>
				// then clear addr
				// SR->ADDR is cleared by reading SR1 and SR2
				clear_read = pI2CHandle->pI2Cx->SR1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	60fb      	str	r3, [r7, #12]
				clear_read = pI2CHandle->pI2Cx->SR2;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	60fb      	str	r3, [r7, #12]
	} else { // slave mode conditional
		clear_read = pI2CHandle->pI2Cx->SR1;
		clear_read = pI2CHandle->pI2Cx->SR2;
		(void)clear_read;
	}
}
 8001472:	e010      	b.n	8001496 <I2C_ClearADDRFlag+0x6a>
			clear_read = pI2CHandle->pI2Cx->SR1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	60fb      	str	r3, [r7, #12]
			clear_read = pI2CHandle->pI2Cx->SR2;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	60fb      	str	r3, [r7, #12]
}
 8001484:	e007      	b.n	8001496 <I2C_ClearADDRFlag+0x6a>
		clear_read = pI2CHandle->pI2Cx->SR1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	60fb      	str	r3, [r7, #12]
		clear_read = pI2CHandle->pI2Cx->SR2;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	60fb      	str	r3, [r7, #12]
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014ca:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80014ce:	f000 f817 	bl	8001500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d2:	f7fe ff51 	bl	8000378 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   r0, =_estack
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80014e4:	08002aec 	.word	0x08002aec
  ldr r2, =_sbss
 80014e8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80014ec:	20000188 	.word	0x20000188

080014f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <__errno>:
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <__errno+0x8>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000020 	.word	0x20000020

08001500 <__libc_init_array>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	4e0d      	ldr	r6, [pc, #52]	; (8001538 <__libc_init_array+0x38>)
 8001504:	4c0d      	ldr	r4, [pc, #52]	; (800153c <__libc_init_array+0x3c>)
 8001506:	1ba4      	subs	r4, r4, r6
 8001508:	10a4      	asrs	r4, r4, #2
 800150a:	2500      	movs	r5, #0
 800150c:	42a5      	cmp	r5, r4
 800150e:	d109      	bne.n	8001524 <__libc_init_array+0x24>
 8001510:	4e0b      	ldr	r6, [pc, #44]	; (8001540 <__libc_init_array+0x40>)
 8001512:	4c0c      	ldr	r4, [pc, #48]	; (8001544 <__libc_init_array+0x44>)
 8001514:	f001 fa10 	bl	8002938 <_init>
 8001518:	1ba4      	subs	r4, r4, r6
 800151a:	10a4      	asrs	r4, r4, #2
 800151c:	2500      	movs	r5, #0
 800151e:	42a5      	cmp	r5, r4
 8001520:	d105      	bne.n	800152e <__libc_init_array+0x2e>
 8001522:	bd70      	pop	{r4, r5, r6, pc}
 8001524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001528:	4798      	blx	r3
 800152a:	3501      	adds	r5, #1
 800152c:	e7ee      	b.n	800150c <__libc_init_array+0xc>
 800152e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001532:	4798      	blx	r3
 8001534:	3501      	adds	r5, #1
 8001536:	e7f2      	b.n	800151e <__libc_init_array+0x1e>
 8001538:	08002ae4 	.word	0x08002ae4
 800153c:	08002ae4 	.word	0x08002ae4
 8001540:	08002ae4 	.word	0x08002ae4
 8001544:	08002ae8 	.word	0x08002ae8

08001548 <memset>:
 8001548:	4402      	add	r2, r0
 800154a:	4603      	mov	r3, r0
 800154c:	4293      	cmp	r3, r2
 800154e:	d100      	bne.n	8001552 <memset+0xa>
 8001550:	4770      	bx	lr
 8001552:	f803 1b01 	strb.w	r1, [r3], #1
 8001556:	e7f9      	b.n	800154c <memset+0x4>

08001558 <iprintf>:
 8001558:	b40f      	push	{r0, r1, r2, r3}
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <iprintf+0x2c>)
 800155c:	b513      	push	{r0, r1, r4, lr}
 800155e:	681c      	ldr	r4, [r3, #0]
 8001560:	b124      	cbz	r4, 800156c <iprintf+0x14>
 8001562:	69a3      	ldr	r3, [r4, #24]
 8001564:	b913      	cbnz	r3, 800156c <iprintf+0x14>
 8001566:	4620      	mov	r0, r4
 8001568:	f000 fa22 	bl	80019b0 <__sinit>
 800156c:	ab05      	add	r3, sp, #20
 800156e:	9a04      	ldr	r2, [sp, #16]
 8001570:	68a1      	ldr	r1, [r4, #8]
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	4620      	mov	r0, r4
 8001576:	f000 fbdb 	bl	8001d30 <_vfiprintf_r>
 800157a:	b002      	add	sp, #8
 800157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001580:	b004      	add	sp, #16
 8001582:	4770      	bx	lr
 8001584:	20000020 	.word	0x20000020

08001588 <_puts_r>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	460e      	mov	r6, r1
 800158c:	4605      	mov	r5, r0
 800158e:	b118      	cbz	r0, 8001598 <_puts_r+0x10>
 8001590:	6983      	ldr	r3, [r0, #24]
 8001592:	b90b      	cbnz	r3, 8001598 <_puts_r+0x10>
 8001594:	f000 fa0c 	bl	80019b0 <__sinit>
 8001598:	69ab      	ldr	r3, [r5, #24]
 800159a:	68ac      	ldr	r4, [r5, #8]
 800159c:	b913      	cbnz	r3, 80015a4 <_puts_r+0x1c>
 800159e:	4628      	mov	r0, r5
 80015a0:	f000 fa06 	bl	80019b0 <__sinit>
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <_puts_r+0xac>)
 80015a6:	429c      	cmp	r4, r3
 80015a8:	d117      	bne.n	80015da <_puts_r+0x52>
 80015aa:	686c      	ldr	r4, [r5, #4]
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	071b      	lsls	r3, r3, #28
 80015b0:	d51d      	bpl.n	80015ee <_puts_r+0x66>
 80015b2:	6923      	ldr	r3, [r4, #16]
 80015b4:	b1db      	cbz	r3, 80015ee <_puts_r+0x66>
 80015b6:	3e01      	subs	r6, #1
 80015b8:	68a3      	ldr	r3, [r4, #8]
 80015ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80015be:	3b01      	subs	r3, #1
 80015c0:	60a3      	str	r3, [r4, #8]
 80015c2:	b9e9      	cbnz	r1, 8001600 <_puts_r+0x78>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da2e      	bge.n	8001626 <_puts_r+0x9e>
 80015c8:	4622      	mov	r2, r4
 80015ca:	210a      	movs	r1, #10
 80015cc:	4628      	mov	r0, r5
 80015ce:	f000 f83f 	bl	8001650 <__swbuf_r>
 80015d2:	3001      	adds	r0, #1
 80015d4:	d011      	beq.n	80015fa <_puts_r+0x72>
 80015d6:	200a      	movs	r0, #10
 80015d8:	e011      	b.n	80015fe <_puts_r+0x76>
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <_puts_r+0xb0>)
 80015dc:	429c      	cmp	r4, r3
 80015de:	d101      	bne.n	80015e4 <_puts_r+0x5c>
 80015e0:	68ac      	ldr	r4, [r5, #8]
 80015e2:	e7e3      	b.n	80015ac <_puts_r+0x24>
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <_puts_r+0xb4>)
 80015e6:	429c      	cmp	r4, r3
 80015e8:	bf08      	it	eq
 80015ea:	68ec      	ldreq	r4, [r5, #12]
 80015ec:	e7de      	b.n	80015ac <_puts_r+0x24>
 80015ee:	4621      	mov	r1, r4
 80015f0:	4628      	mov	r0, r5
 80015f2:	f000 f87f 	bl	80016f4 <__swsetup_r>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d0dd      	beq.n	80015b6 <_puts_r+0x2e>
 80015fa:	f04f 30ff 	mov.w	r0, #4294967295
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
 8001600:	2b00      	cmp	r3, #0
 8001602:	da04      	bge.n	800160e <_puts_r+0x86>
 8001604:	69a2      	ldr	r2, [r4, #24]
 8001606:	429a      	cmp	r2, r3
 8001608:	dc06      	bgt.n	8001618 <_puts_r+0x90>
 800160a:	290a      	cmp	r1, #10
 800160c:	d004      	beq.n	8001618 <_puts_r+0x90>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	6022      	str	r2, [r4, #0]
 8001614:	7019      	strb	r1, [r3, #0]
 8001616:	e7cf      	b.n	80015b8 <_puts_r+0x30>
 8001618:	4622      	mov	r2, r4
 800161a:	4628      	mov	r0, r5
 800161c:	f000 f818 	bl	8001650 <__swbuf_r>
 8001620:	3001      	adds	r0, #1
 8001622:	d1c9      	bne.n	80015b8 <_puts_r+0x30>
 8001624:	e7e9      	b.n	80015fa <_puts_r+0x72>
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	200a      	movs	r0, #10
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	6022      	str	r2, [r4, #0]
 800162e:	7018      	strb	r0, [r3, #0]
 8001630:	e7e5      	b.n	80015fe <_puts_r+0x76>
 8001632:	bf00      	nop
 8001634:	08002a54 	.word	0x08002a54
 8001638:	08002a74 	.word	0x08002a74
 800163c:	08002a34 	.word	0x08002a34

08001640 <puts>:
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <puts+0xc>)
 8001642:	4601      	mov	r1, r0
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f7ff bf9f 	b.w	8001588 <_puts_r>
 800164a:	bf00      	nop
 800164c:	20000020 	.word	0x20000020

08001650 <__swbuf_r>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	460e      	mov	r6, r1
 8001654:	4614      	mov	r4, r2
 8001656:	4605      	mov	r5, r0
 8001658:	b118      	cbz	r0, 8001662 <__swbuf_r+0x12>
 800165a:	6983      	ldr	r3, [r0, #24]
 800165c:	b90b      	cbnz	r3, 8001662 <__swbuf_r+0x12>
 800165e:	f000 f9a7 	bl	80019b0 <__sinit>
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <__swbuf_r+0x98>)
 8001664:	429c      	cmp	r4, r3
 8001666:	d12a      	bne.n	80016be <__swbuf_r+0x6e>
 8001668:	686c      	ldr	r4, [r5, #4]
 800166a:	69a3      	ldr	r3, [r4, #24]
 800166c:	60a3      	str	r3, [r4, #8]
 800166e:	89a3      	ldrh	r3, [r4, #12]
 8001670:	071a      	lsls	r2, r3, #28
 8001672:	d52e      	bpl.n	80016d2 <__swbuf_r+0x82>
 8001674:	6923      	ldr	r3, [r4, #16]
 8001676:	b363      	cbz	r3, 80016d2 <__swbuf_r+0x82>
 8001678:	6923      	ldr	r3, [r4, #16]
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	6963      	ldr	r3, [r4, #20]
 8001680:	b2f6      	uxtb	r6, r6
 8001682:	4283      	cmp	r3, r0
 8001684:	4637      	mov	r7, r6
 8001686:	dc04      	bgt.n	8001692 <__swbuf_r+0x42>
 8001688:	4621      	mov	r1, r4
 800168a:	4628      	mov	r0, r5
 800168c:	f000 f926 	bl	80018dc <_fflush_r>
 8001690:	bb28      	cbnz	r0, 80016de <__swbuf_r+0x8e>
 8001692:	68a3      	ldr	r3, [r4, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60a3      	str	r3, [r4, #8]
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	6022      	str	r2, [r4, #0]
 800169e:	701e      	strb	r6, [r3, #0]
 80016a0:	6963      	ldr	r3, [r4, #20]
 80016a2:	3001      	adds	r0, #1
 80016a4:	4283      	cmp	r3, r0
 80016a6:	d004      	beq.n	80016b2 <__swbuf_r+0x62>
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	07db      	lsls	r3, r3, #31
 80016ac:	d519      	bpl.n	80016e2 <__swbuf_r+0x92>
 80016ae:	2e0a      	cmp	r6, #10
 80016b0:	d117      	bne.n	80016e2 <__swbuf_r+0x92>
 80016b2:	4621      	mov	r1, r4
 80016b4:	4628      	mov	r0, r5
 80016b6:	f000 f911 	bl	80018dc <_fflush_r>
 80016ba:	b190      	cbz	r0, 80016e2 <__swbuf_r+0x92>
 80016bc:	e00f      	b.n	80016de <__swbuf_r+0x8e>
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <__swbuf_r+0x9c>)
 80016c0:	429c      	cmp	r4, r3
 80016c2:	d101      	bne.n	80016c8 <__swbuf_r+0x78>
 80016c4:	68ac      	ldr	r4, [r5, #8]
 80016c6:	e7d0      	b.n	800166a <__swbuf_r+0x1a>
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <__swbuf_r+0xa0>)
 80016ca:	429c      	cmp	r4, r3
 80016cc:	bf08      	it	eq
 80016ce:	68ec      	ldreq	r4, [r5, #12]
 80016d0:	e7cb      	b.n	800166a <__swbuf_r+0x1a>
 80016d2:	4621      	mov	r1, r4
 80016d4:	4628      	mov	r0, r5
 80016d6:	f000 f80d 	bl	80016f4 <__swsetup_r>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d0cc      	beq.n	8001678 <__swbuf_r+0x28>
 80016de:	f04f 37ff 	mov.w	r7, #4294967295
 80016e2:	4638      	mov	r0, r7
 80016e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08002a54 	.word	0x08002a54
 80016ec:	08002a74 	.word	0x08002a74
 80016f0:	08002a34 	.word	0x08002a34

080016f4 <__swsetup_r>:
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <__swsetup_r+0xcc>)
 80016f6:	b570      	push	{r4, r5, r6, lr}
 80016f8:	681d      	ldr	r5, [r3, #0]
 80016fa:	4606      	mov	r6, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	b125      	cbz	r5, 800170a <__swsetup_r+0x16>
 8001700:	69ab      	ldr	r3, [r5, #24]
 8001702:	b913      	cbnz	r3, 800170a <__swsetup_r+0x16>
 8001704:	4628      	mov	r0, r5
 8001706:	f000 f953 	bl	80019b0 <__sinit>
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <__swsetup_r+0xd0>)
 800170c:	429c      	cmp	r4, r3
 800170e:	d10f      	bne.n	8001730 <__swsetup_r+0x3c>
 8001710:	686c      	ldr	r4, [r5, #4]
 8001712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001716:	b29a      	uxth	r2, r3
 8001718:	0715      	lsls	r5, r2, #28
 800171a:	d42c      	bmi.n	8001776 <__swsetup_r+0x82>
 800171c:	06d0      	lsls	r0, r2, #27
 800171e:	d411      	bmi.n	8001744 <__swsetup_r+0x50>
 8001720:	2209      	movs	r2, #9
 8001722:	6032      	str	r2, [r6, #0]
 8001724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001728:	81a3      	strh	r3, [r4, #12]
 800172a:	f04f 30ff 	mov.w	r0, #4294967295
 800172e:	e03e      	b.n	80017ae <__swsetup_r+0xba>
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <__swsetup_r+0xd4>)
 8001732:	429c      	cmp	r4, r3
 8001734:	d101      	bne.n	800173a <__swsetup_r+0x46>
 8001736:	68ac      	ldr	r4, [r5, #8]
 8001738:	e7eb      	b.n	8001712 <__swsetup_r+0x1e>
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <__swsetup_r+0xd8>)
 800173c:	429c      	cmp	r4, r3
 800173e:	bf08      	it	eq
 8001740:	68ec      	ldreq	r4, [r5, #12]
 8001742:	e7e6      	b.n	8001712 <__swsetup_r+0x1e>
 8001744:	0751      	lsls	r1, r2, #29
 8001746:	d512      	bpl.n	800176e <__swsetup_r+0x7a>
 8001748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800174a:	b141      	cbz	r1, 800175e <__swsetup_r+0x6a>
 800174c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001750:	4299      	cmp	r1, r3
 8001752:	d002      	beq.n	800175a <__swsetup_r+0x66>
 8001754:	4630      	mov	r0, r6
 8001756:	f000 fa19 	bl	8001b8c <_free_r>
 800175a:	2300      	movs	r3, #0
 800175c:	6363      	str	r3, [r4, #52]	; 0x34
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001764:	81a3      	strh	r3, [r4, #12]
 8001766:	2300      	movs	r3, #0
 8001768:	6063      	str	r3, [r4, #4]
 800176a:	6923      	ldr	r3, [r4, #16]
 800176c:	6023      	str	r3, [r4, #0]
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	81a3      	strh	r3, [r4, #12]
 8001776:	6923      	ldr	r3, [r4, #16]
 8001778:	b94b      	cbnz	r3, 800178e <__swsetup_r+0x9a>
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001784:	d003      	beq.n	800178e <__swsetup_r+0x9a>
 8001786:	4621      	mov	r1, r4
 8001788:	4630      	mov	r0, r6
 800178a:	f000 f9bf 	bl	8001b0c <__smakebuf_r>
 800178e:	89a2      	ldrh	r2, [r4, #12]
 8001790:	f012 0301 	ands.w	r3, r2, #1
 8001794:	d00c      	beq.n	80017b0 <__swsetup_r+0xbc>
 8001796:	2300      	movs	r3, #0
 8001798:	60a3      	str	r3, [r4, #8]
 800179a:	6963      	ldr	r3, [r4, #20]
 800179c:	425b      	negs	r3, r3
 800179e:	61a3      	str	r3, [r4, #24]
 80017a0:	6923      	ldr	r3, [r4, #16]
 80017a2:	b953      	cbnz	r3, 80017ba <__swsetup_r+0xc6>
 80017a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80017ac:	d1ba      	bne.n	8001724 <__swsetup_r+0x30>
 80017ae:	bd70      	pop	{r4, r5, r6, pc}
 80017b0:	0792      	lsls	r2, r2, #30
 80017b2:	bf58      	it	pl
 80017b4:	6963      	ldrpl	r3, [r4, #20]
 80017b6:	60a3      	str	r3, [r4, #8]
 80017b8:	e7f2      	b.n	80017a0 <__swsetup_r+0xac>
 80017ba:	2000      	movs	r0, #0
 80017bc:	e7f7      	b.n	80017ae <__swsetup_r+0xba>
 80017be:	bf00      	nop
 80017c0:	20000020 	.word	0x20000020
 80017c4:	08002a54 	.word	0x08002a54
 80017c8:	08002a74 	.word	0x08002a74
 80017cc:	08002a34 	.word	0x08002a34

080017d0 <__sflush_r>:
 80017d0:	898a      	ldrh	r2, [r1, #12]
 80017d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	0710      	lsls	r0, r2, #28
 80017da:	460c      	mov	r4, r1
 80017dc:	d458      	bmi.n	8001890 <__sflush_r+0xc0>
 80017de:	684b      	ldr	r3, [r1, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dc05      	bgt.n	80017f0 <__sflush_r+0x20>
 80017e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <__sflush_r+0x20>
 80017ea:	2000      	movs	r0, #0
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f2:	2e00      	cmp	r6, #0
 80017f4:	d0f9      	beq.n	80017ea <__sflush_r+0x1a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017fc:	682f      	ldr	r7, [r5, #0]
 80017fe:	6a21      	ldr	r1, [r4, #32]
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	d032      	beq.n	800186a <__sflush_r+0x9a>
 8001804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001806:	89a3      	ldrh	r3, [r4, #12]
 8001808:	075a      	lsls	r2, r3, #29
 800180a:	d505      	bpl.n	8001818 <__sflush_r+0x48>
 800180c:	6863      	ldr	r3, [r4, #4]
 800180e:	1ac0      	subs	r0, r0, r3
 8001810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001812:	b10b      	cbz	r3, 8001818 <__sflush_r+0x48>
 8001814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001816:	1ac0      	subs	r0, r0, r3
 8001818:	2300      	movs	r3, #0
 800181a:	4602      	mov	r2, r0
 800181c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800181e:	6a21      	ldr	r1, [r4, #32]
 8001820:	4628      	mov	r0, r5
 8001822:	47b0      	blx	r6
 8001824:	1c43      	adds	r3, r0, #1
 8001826:	89a3      	ldrh	r3, [r4, #12]
 8001828:	d106      	bne.n	8001838 <__sflush_r+0x68>
 800182a:	6829      	ldr	r1, [r5, #0]
 800182c:	291d      	cmp	r1, #29
 800182e:	d848      	bhi.n	80018c2 <__sflush_r+0xf2>
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <__sflush_r+0x108>)
 8001832:	40ca      	lsrs	r2, r1
 8001834:	07d6      	lsls	r6, r2, #31
 8001836:	d544      	bpl.n	80018c2 <__sflush_r+0xf2>
 8001838:	2200      	movs	r2, #0
 800183a:	6062      	str	r2, [r4, #4]
 800183c:	04d9      	lsls	r1, r3, #19
 800183e:	6922      	ldr	r2, [r4, #16]
 8001840:	6022      	str	r2, [r4, #0]
 8001842:	d504      	bpl.n	800184e <__sflush_r+0x7e>
 8001844:	1c42      	adds	r2, r0, #1
 8001846:	d101      	bne.n	800184c <__sflush_r+0x7c>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	b903      	cbnz	r3, 800184e <__sflush_r+0x7e>
 800184c:	6560      	str	r0, [r4, #84]	; 0x54
 800184e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001850:	602f      	str	r7, [r5, #0]
 8001852:	2900      	cmp	r1, #0
 8001854:	d0c9      	beq.n	80017ea <__sflush_r+0x1a>
 8001856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800185a:	4299      	cmp	r1, r3
 800185c:	d002      	beq.n	8001864 <__sflush_r+0x94>
 800185e:	4628      	mov	r0, r5
 8001860:	f000 f994 	bl	8001b8c <_free_r>
 8001864:	2000      	movs	r0, #0
 8001866:	6360      	str	r0, [r4, #52]	; 0x34
 8001868:	e7c0      	b.n	80017ec <__sflush_r+0x1c>
 800186a:	2301      	movs	r3, #1
 800186c:	4628      	mov	r0, r5
 800186e:	47b0      	blx	r6
 8001870:	1c41      	adds	r1, r0, #1
 8001872:	d1c8      	bne.n	8001806 <__sflush_r+0x36>
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0c5      	beq.n	8001806 <__sflush_r+0x36>
 800187a:	2b1d      	cmp	r3, #29
 800187c:	d001      	beq.n	8001882 <__sflush_r+0xb2>
 800187e:	2b16      	cmp	r3, #22
 8001880:	d101      	bne.n	8001886 <__sflush_r+0xb6>
 8001882:	602f      	str	r7, [r5, #0]
 8001884:	e7b1      	b.n	80017ea <__sflush_r+0x1a>
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188c:	81a3      	strh	r3, [r4, #12]
 800188e:	e7ad      	b.n	80017ec <__sflush_r+0x1c>
 8001890:	690f      	ldr	r7, [r1, #16]
 8001892:	2f00      	cmp	r7, #0
 8001894:	d0a9      	beq.n	80017ea <__sflush_r+0x1a>
 8001896:	0793      	lsls	r3, r2, #30
 8001898:	680e      	ldr	r6, [r1, #0]
 800189a:	bf08      	it	eq
 800189c:	694b      	ldreq	r3, [r1, #20]
 800189e:	600f      	str	r7, [r1, #0]
 80018a0:	bf18      	it	ne
 80018a2:	2300      	movne	r3, #0
 80018a4:	eba6 0807 	sub.w	r8, r6, r7
 80018a8:	608b      	str	r3, [r1, #8]
 80018aa:	f1b8 0f00 	cmp.w	r8, #0
 80018ae:	dd9c      	ble.n	80017ea <__sflush_r+0x1a>
 80018b0:	4643      	mov	r3, r8
 80018b2:	463a      	mov	r2, r7
 80018b4:	6a21      	ldr	r1, [r4, #32]
 80018b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018b8:	4628      	mov	r0, r5
 80018ba:	47b0      	blx	r6
 80018bc:	2800      	cmp	r0, #0
 80018be:	dc06      	bgt.n	80018ce <__sflush_r+0xfe>
 80018c0:	89a3      	ldrh	r3, [r4, #12]
 80018c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c6:	81a3      	strh	r3, [r4, #12]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	e78e      	b.n	80017ec <__sflush_r+0x1c>
 80018ce:	4407      	add	r7, r0
 80018d0:	eba8 0800 	sub.w	r8, r8, r0
 80018d4:	e7e9      	b.n	80018aa <__sflush_r+0xda>
 80018d6:	bf00      	nop
 80018d8:	20400001 	.word	0x20400001

080018dc <_fflush_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	690b      	ldr	r3, [r1, #16]
 80018e0:	4605      	mov	r5, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	b1db      	cbz	r3, 800191e <_fflush_r+0x42>
 80018e6:	b118      	cbz	r0, 80018f0 <_fflush_r+0x14>
 80018e8:	6983      	ldr	r3, [r0, #24]
 80018ea:	b90b      	cbnz	r3, 80018f0 <_fflush_r+0x14>
 80018ec:	f000 f860 	bl	80019b0 <__sinit>
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <_fflush_r+0x48>)
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d109      	bne.n	800190a <_fflush_r+0x2e>
 80018f6:	686c      	ldr	r4, [r5, #4]
 80018f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018fc:	b17b      	cbz	r3, 800191e <_fflush_r+0x42>
 80018fe:	4621      	mov	r1, r4
 8001900:	4628      	mov	r0, r5
 8001902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001906:	f7ff bf63 	b.w	80017d0 <__sflush_r>
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <_fflush_r+0x4c>)
 800190c:	429c      	cmp	r4, r3
 800190e:	d101      	bne.n	8001914 <_fflush_r+0x38>
 8001910:	68ac      	ldr	r4, [r5, #8]
 8001912:	e7f1      	b.n	80018f8 <_fflush_r+0x1c>
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <_fflush_r+0x50>)
 8001916:	429c      	cmp	r4, r3
 8001918:	bf08      	it	eq
 800191a:	68ec      	ldreq	r4, [r5, #12]
 800191c:	e7ec      	b.n	80018f8 <_fflush_r+0x1c>
 800191e:	2000      	movs	r0, #0
 8001920:	bd38      	pop	{r3, r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	08002a54 	.word	0x08002a54
 8001928:	08002a74 	.word	0x08002a74
 800192c:	08002a34 	.word	0x08002a34

08001930 <std>:
 8001930:	2300      	movs	r3, #0
 8001932:	b510      	push	{r4, lr}
 8001934:	4604      	mov	r4, r0
 8001936:	e9c0 3300 	strd	r3, r3, [r0]
 800193a:	6083      	str	r3, [r0, #8]
 800193c:	8181      	strh	r1, [r0, #12]
 800193e:	6643      	str	r3, [r0, #100]	; 0x64
 8001940:	81c2      	strh	r2, [r0, #14]
 8001942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001946:	6183      	str	r3, [r0, #24]
 8001948:	4619      	mov	r1, r3
 800194a:	2208      	movs	r2, #8
 800194c:	305c      	adds	r0, #92	; 0x5c
 800194e:	f7ff fdfb 	bl	8001548 <memset>
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <std+0x38>)
 8001954:	6263      	str	r3, [r4, #36]	; 0x24
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <std+0x3c>)
 8001958:	62a3      	str	r3, [r4, #40]	; 0x28
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <std+0x40>)
 800195c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <std+0x44>)
 8001960:	6224      	str	r4, [r4, #32]
 8001962:	6323      	str	r3, [r4, #48]	; 0x30
 8001964:	bd10      	pop	{r4, pc}
 8001966:	bf00      	nop
 8001968:	0800228d 	.word	0x0800228d
 800196c:	080022af 	.word	0x080022af
 8001970:	080022e7 	.word	0x080022e7
 8001974:	0800230b 	.word	0x0800230b

08001978 <_cleanup_r>:
 8001978:	4901      	ldr	r1, [pc, #4]	; (8001980 <_cleanup_r+0x8>)
 800197a:	f000 b885 	b.w	8001a88 <_fwalk_reent>
 800197e:	bf00      	nop
 8001980:	080018dd 	.word	0x080018dd

08001984 <__sfmoreglue>:
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	1e4a      	subs	r2, r1, #1
 8001988:	2568      	movs	r5, #104	; 0x68
 800198a:	4355      	muls	r5, r2
 800198c:	460e      	mov	r6, r1
 800198e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001992:	f000 f949 	bl	8001c28 <_malloc_r>
 8001996:	4604      	mov	r4, r0
 8001998:	b140      	cbz	r0, 80019ac <__sfmoreglue+0x28>
 800199a:	2100      	movs	r1, #0
 800199c:	e9c0 1600 	strd	r1, r6, [r0]
 80019a0:	300c      	adds	r0, #12
 80019a2:	60a0      	str	r0, [r4, #8]
 80019a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019a8:	f7ff fdce 	bl	8001548 <memset>
 80019ac:	4620      	mov	r0, r4
 80019ae:	bd70      	pop	{r4, r5, r6, pc}

080019b0 <__sinit>:
 80019b0:	6983      	ldr	r3, [r0, #24]
 80019b2:	b510      	push	{r4, lr}
 80019b4:	4604      	mov	r4, r0
 80019b6:	bb33      	cbnz	r3, 8001a06 <__sinit+0x56>
 80019b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80019bc:	6503      	str	r3, [r0, #80]	; 0x50
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <__sinit+0x58>)
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <__sinit+0x5c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6282      	str	r2, [r0, #40]	; 0x28
 80019c6:	4298      	cmp	r0, r3
 80019c8:	bf04      	itt	eq
 80019ca:	2301      	moveq	r3, #1
 80019cc:	6183      	streq	r3, [r0, #24]
 80019ce:	f000 f81f 	bl	8001a10 <__sfp>
 80019d2:	6060      	str	r0, [r4, #4]
 80019d4:	4620      	mov	r0, r4
 80019d6:	f000 f81b 	bl	8001a10 <__sfp>
 80019da:	60a0      	str	r0, [r4, #8]
 80019dc:	4620      	mov	r0, r4
 80019de:	f000 f817 	bl	8001a10 <__sfp>
 80019e2:	2200      	movs	r2, #0
 80019e4:	60e0      	str	r0, [r4, #12]
 80019e6:	2104      	movs	r1, #4
 80019e8:	6860      	ldr	r0, [r4, #4]
 80019ea:	f7ff ffa1 	bl	8001930 <std>
 80019ee:	2201      	movs	r2, #1
 80019f0:	2109      	movs	r1, #9
 80019f2:	68a0      	ldr	r0, [r4, #8]
 80019f4:	f7ff ff9c 	bl	8001930 <std>
 80019f8:	2202      	movs	r2, #2
 80019fa:	2112      	movs	r1, #18
 80019fc:	68e0      	ldr	r0, [r4, #12]
 80019fe:	f7ff ff97 	bl	8001930 <std>
 8001a02:	2301      	movs	r3, #1
 8001a04:	61a3      	str	r3, [r4, #24]
 8001a06:	bd10      	pop	{r4, pc}
 8001a08:	08002a30 	.word	0x08002a30
 8001a0c:	08001979 	.word	0x08001979

08001a10 <__sfp>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <__sfp+0x70>)
 8001a14:	681e      	ldr	r6, [r3, #0]
 8001a16:	69b3      	ldr	r3, [r6, #24]
 8001a18:	4607      	mov	r7, r0
 8001a1a:	b913      	cbnz	r3, 8001a22 <__sfp+0x12>
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f7ff ffc7 	bl	80019b0 <__sinit>
 8001a22:	3648      	adds	r6, #72	; 0x48
 8001a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	d503      	bpl.n	8001a34 <__sfp+0x24>
 8001a2c:	6833      	ldr	r3, [r6, #0]
 8001a2e:	b133      	cbz	r3, 8001a3e <__sfp+0x2e>
 8001a30:	6836      	ldr	r6, [r6, #0]
 8001a32:	e7f7      	b.n	8001a24 <__sfp+0x14>
 8001a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a38:	b16d      	cbz	r5, 8001a56 <__sfp+0x46>
 8001a3a:	3468      	adds	r4, #104	; 0x68
 8001a3c:	e7f4      	b.n	8001a28 <__sfp+0x18>
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4638      	mov	r0, r7
 8001a42:	f7ff ff9f 	bl	8001984 <__sfmoreglue>
 8001a46:	6030      	str	r0, [r6, #0]
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d1f1      	bne.n	8001a30 <__sfp+0x20>
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	4604      	mov	r4, r0
 8001a52:	4620      	mov	r0, r4
 8001a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <__sfp+0x74>)
 8001a58:	6665      	str	r5, [r4, #100]	; 0x64
 8001a5a:	e9c4 5500 	strd	r5, r5, [r4]
 8001a5e:	60a5      	str	r5, [r4, #8]
 8001a60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a70:	f7ff fd6a 	bl	8001548 <memset>
 8001a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a7c:	e7e9      	b.n	8001a52 <__sfp+0x42>
 8001a7e:	bf00      	nop
 8001a80:	08002a30 	.word	0x08002a30
 8001a84:	ffff0001 	.word	0xffff0001

08001a88 <_fwalk_reent>:
 8001a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a8c:	4680      	mov	r8, r0
 8001a8e:	4689      	mov	r9, r1
 8001a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a94:	2600      	movs	r6, #0
 8001a96:	b914      	cbnz	r4, 8001a9e <_fwalk_reent+0x16>
 8001a98:	4630      	mov	r0, r6
 8001a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001aa2:	3f01      	subs	r7, #1
 8001aa4:	d501      	bpl.n	8001aaa <_fwalk_reent+0x22>
 8001aa6:	6824      	ldr	r4, [r4, #0]
 8001aa8:	e7f5      	b.n	8001a96 <_fwalk_reent+0xe>
 8001aaa:	89ab      	ldrh	r3, [r5, #12]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d907      	bls.n	8001ac0 <_fwalk_reent+0x38>
 8001ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	d003      	beq.n	8001ac0 <_fwalk_reent+0x38>
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4640      	mov	r0, r8
 8001abc:	47c8      	blx	r9
 8001abe:	4306      	orrs	r6, r0
 8001ac0:	3568      	adds	r5, #104	; 0x68
 8001ac2:	e7ee      	b.n	8001aa2 <_fwalk_reent+0x1a>

08001ac4 <__swhatbuf_r>:
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	460e      	mov	r6, r1
 8001ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001acc:	2900      	cmp	r1, #0
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	da07      	bge.n	8001ae6 <__swhatbuf_r+0x22>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	602b      	str	r3, [r5, #0]
 8001ada:	89b3      	ldrh	r3, [r6, #12]
 8001adc:	061a      	lsls	r2, r3, #24
 8001ade:	d410      	bmi.n	8001b02 <__swhatbuf_r+0x3e>
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	e00e      	b.n	8001b04 <__swhatbuf_r+0x40>
 8001ae6:	466a      	mov	r2, sp
 8001ae8:	f000 fc36 	bl	8002358 <_fstat_r>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	dbf2      	blt.n	8001ad6 <__swhatbuf_r+0x12>
 8001af0:	9a01      	ldr	r2, [sp, #4]
 8001af2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001af6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001afa:	425a      	negs	r2, r3
 8001afc:	415a      	adcs	r2, r3
 8001afe:	602a      	str	r2, [r5, #0]
 8001b00:	e7ee      	b.n	8001ae0 <__swhatbuf_r+0x1c>
 8001b02:	2340      	movs	r3, #64	; 0x40
 8001b04:	2000      	movs	r0, #0
 8001b06:	6023      	str	r3, [r4, #0]
 8001b08:	b016      	add	sp, #88	; 0x58
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}

08001b0c <__smakebuf_r>:
 8001b0c:	898b      	ldrh	r3, [r1, #12]
 8001b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b10:	079d      	lsls	r5, r3, #30
 8001b12:	4606      	mov	r6, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	d507      	bpl.n	8001b28 <__smakebuf_r+0x1c>
 8001b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b1c:	6023      	str	r3, [r4, #0]
 8001b1e:	6123      	str	r3, [r4, #16]
 8001b20:	2301      	movs	r3, #1
 8001b22:	6163      	str	r3, [r4, #20]
 8001b24:	b002      	add	sp, #8
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	ab01      	add	r3, sp, #4
 8001b2a:	466a      	mov	r2, sp
 8001b2c:	f7ff ffca 	bl	8001ac4 <__swhatbuf_r>
 8001b30:	9900      	ldr	r1, [sp, #0]
 8001b32:	4605      	mov	r5, r0
 8001b34:	4630      	mov	r0, r6
 8001b36:	f000 f877 	bl	8001c28 <_malloc_r>
 8001b3a:	b948      	cbnz	r0, 8001b50 <__smakebuf_r+0x44>
 8001b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b40:	059a      	lsls	r2, r3, #22
 8001b42:	d4ef      	bmi.n	8001b24 <__smakebuf_r+0x18>
 8001b44:	f023 0303 	bic.w	r3, r3, #3
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	81a3      	strh	r3, [r4, #12]
 8001b4e:	e7e3      	b.n	8001b18 <__smakebuf_r+0xc>
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <__smakebuf_r+0x7c>)
 8001b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	6020      	str	r0, [r4, #0]
 8001b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5c:	81a3      	strh	r3, [r4, #12]
 8001b5e:	9b00      	ldr	r3, [sp, #0]
 8001b60:	6163      	str	r3, [r4, #20]
 8001b62:	9b01      	ldr	r3, [sp, #4]
 8001b64:	6120      	str	r0, [r4, #16]
 8001b66:	b15b      	cbz	r3, 8001b80 <__smakebuf_r+0x74>
 8001b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f000 fc05 	bl	800237c <_isatty_r>
 8001b72:	b128      	cbz	r0, 8001b80 <__smakebuf_r+0x74>
 8001b74:	89a3      	ldrh	r3, [r4, #12]
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	81a3      	strh	r3, [r4, #12]
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	431d      	orrs	r5, r3
 8001b84:	81a5      	strh	r5, [r4, #12]
 8001b86:	e7cd      	b.n	8001b24 <__smakebuf_r+0x18>
 8001b88:	08001979 	.word	0x08001979

08001b8c <_free_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d045      	beq.n	8001c20 <_free_r+0x94>
 8001b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b98:	1f0c      	subs	r4, r1, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bfb8      	it	lt
 8001b9e:	18e4      	addlt	r4, r4, r3
 8001ba0:	f000 fc0e 	bl	80023c0 <__malloc_lock>
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <_free_r+0x98>)
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	4610      	mov	r0, r2
 8001baa:	b933      	cbnz	r3, 8001bba <_free_r+0x2e>
 8001bac:	6063      	str	r3, [r4, #4]
 8001bae:	6014      	str	r4, [r2, #0]
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bb6:	f000 bc04 	b.w	80023c2 <__malloc_unlock>
 8001bba:	42a3      	cmp	r3, r4
 8001bbc:	d90c      	bls.n	8001bd8 <_free_r+0x4c>
 8001bbe:	6821      	ldr	r1, [r4, #0]
 8001bc0:	1862      	adds	r2, r4, r1
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	bf04      	itt	eq
 8001bc6:	681a      	ldreq	r2, [r3, #0]
 8001bc8:	685b      	ldreq	r3, [r3, #4]
 8001bca:	6063      	str	r3, [r4, #4]
 8001bcc:	bf04      	itt	eq
 8001bce:	1852      	addeq	r2, r2, r1
 8001bd0:	6022      	streq	r2, [r4, #0]
 8001bd2:	6004      	str	r4, [r0, #0]
 8001bd4:	e7ec      	b.n	8001bb0 <_free_r+0x24>
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	b10a      	cbz	r2, 8001be0 <_free_r+0x54>
 8001bdc:	42a2      	cmp	r2, r4
 8001bde:	d9fa      	bls.n	8001bd6 <_free_r+0x4a>
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	1858      	adds	r0, r3, r1
 8001be4:	42a0      	cmp	r0, r4
 8001be6:	d10b      	bne.n	8001c00 <_free_r+0x74>
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	4401      	add	r1, r0
 8001bec:	1858      	adds	r0, r3, r1
 8001bee:	4282      	cmp	r2, r0
 8001bf0:	6019      	str	r1, [r3, #0]
 8001bf2:	d1dd      	bne.n	8001bb0 <_free_r+0x24>
 8001bf4:	6810      	ldr	r0, [r2, #0]
 8001bf6:	6852      	ldr	r2, [r2, #4]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	4401      	add	r1, r0
 8001bfc:	6019      	str	r1, [r3, #0]
 8001bfe:	e7d7      	b.n	8001bb0 <_free_r+0x24>
 8001c00:	d902      	bls.n	8001c08 <_free_r+0x7c>
 8001c02:	230c      	movs	r3, #12
 8001c04:	602b      	str	r3, [r5, #0]
 8001c06:	e7d3      	b.n	8001bb0 <_free_r+0x24>
 8001c08:	6820      	ldr	r0, [r4, #0]
 8001c0a:	1821      	adds	r1, r4, r0
 8001c0c:	428a      	cmp	r2, r1
 8001c0e:	bf04      	itt	eq
 8001c10:	6811      	ldreq	r1, [r2, #0]
 8001c12:	6852      	ldreq	r2, [r2, #4]
 8001c14:	6062      	str	r2, [r4, #4]
 8001c16:	bf04      	itt	eq
 8001c18:	1809      	addeq	r1, r1, r0
 8001c1a:	6021      	streq	r1, [r4, #0]
 8001c1c:	605c      	str	r4, [r3, #4]
 8001c1e:	e7c7      	b.n	8001bb0 <_free_r+0x24>
 8001c20:	bd38      	pop	{r3, r4, r5, pc}
 8001c22:	bf00      	nop
 8001c24:	200000b0 	.word	0x200000b0

08001c28 <_malloc_r>:
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	1ccd      	adds	r5, r1, #3
 8001c2c:	f025 0503 	bic.w	r5, r5, #3
 8001c30:	3508      	adds	r5, #8
 8001c32:	2d0c      	cmp	r5, #12
 8001c34:	bf38      	it	cc
 8001c36:	250c      	movcc	r5, #12
 8001c38:	2d00      	cmp	r5, #0
 8001c3a:	4606      	mov	r6, r0
 8001c3c:	db01      	blt.n	8001c42 <_malloc_r+0x1a>
 8001c3e:	42a9      	cmp	r1, r5
 8001c40:	d903      	bls.n	8001c4a <_malloc_r+0x22>
 8001c42:	230c      	movs	r3, #12
 8001c44:	6033      	str	r3, [r6, #0]
 8001c46:	2000      	movs	r0, #0
 8001c48:	bd70      	pop	{r4, r5, r6, pc}
 8001c4a:	f000 fbb9 	bl	80023c0 <__malloc_lock>
 8001c4e:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <_malloc_r+0xac>)
 8001c50:	6814      	ldr	r4, [r2, #0]
 8001c52:	4621      	mov	r1, r4
 8001c54:	b991      	cbnz	r1, 8001c7c <_malloc_r+0x54>
 8001c56:	4c20      	ldr	r4, [pc, #128]	; (8001cd8 <_malloc_r+0xb0>)
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	b91b      	cbnz	r3, 8001c64 <_malloc_r+0x3c>
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f000 fb05 	bl	800226c <_sbrk_r>
 8001c62:	6020      	str	r0, [r4, #0]
 8001c64:	4629      	mov	r1, r5
 8001c66:	4630      	mov	r0, r6
 8001c68:	f000 fb00 	bl	800226c <_sbrk_r>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d124      	bne.n	8001cba <_malloc_r+0x92>
 8001c70:	230c      	movs	r3, #12
 8001c72:	6033      	str	r3, [r6, #0]
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 fba4 	bl	80023c2 <__malloc_unlock>
 8001c7a:	e7e4      	b.n	8001c46 <_malloc_r+0x1e>
 8001c7c:	680b      	ldr	r3, [r1, #0]
 8001c7e:	1b5b      	subs	r3, r3, r5
 8001c80:	d418      	bmi.n	8001cb4 <_malloc_r+0x8c>
 8001c82:	2b0b      	cmp	r3, #11
 8001c84:	d90f      	bls.n	8001ca6 <_malloc_r+0x7e>
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	50cd      	str	r5, [r1, r3]
 8001c8a:	18cc      	adds	r4, r1, r3
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f000 fb98 	bl	80023c2 <__malloc_unlock>
 8001c92:	f104 000b 	add.w	r0, r4, #11
 8001c96:	1d23      	adds	r3, r4, #4
 8001c98:	f020 0007 	bic.w	r0, r0, #7
 8001c9c:	1ac3      	subs	r3, r0, r3
 8001c9e:	d0d3      	beq.n	8001c48 <_malloc_r+0x20>
 8001ca0:	425a      	negs	r2, r3
 8001ca2:	50e2      	str	r2, [r4, r3]
 8001ca4:	e7d0      	b.n	8001c48 <_malloc_r+0x20>
 8001ca6:	428c      	cmp	r4, r1
 8001ca8:	684b      	ldr	r3, [r1, #4]
 8001caa:	bf16      	itet	ne
 8001cac:	6063      	strne	r3, [r4, #4]
 8001cae:	6013      	streq	r3, [r2, #0]
 8001cb0:	460c      	movne	r4, r1
 8001cb2:	e7eb      	b.n	8001c8c <_malloc_r+0x64>
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	6849      	ldr	r1, [r1, #4]
 8001cb8:	e7cc      	b.n	8001c54 <_malloc_r+0x2c>
 8001cba:	1cc4      	adds	r4, r0, #3
 8001cbc:	f024 0403 	bic.w	r4, r4, #3
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d005      	beq.n	8001cd0 <_malloc_r+0xa8>
 8001cc4:	1a21      	subs	r1, r4, r0
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f000 fad0 	bl	800226c <_sbrk_r>
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d0cf      	beq.n	8001c70 <_malloc_r+0x48>
 8001cd0:	6025      	str	r5, [r4, #0]
 8001cd2:	e7db      	b.n	8001c8c <_malloc_r+0x64>
 8001cd4:	200000b0 	.word	0x200000b0
 8001cd8:	200000b4 	.word	0x200000b4

08001cdc <__sfputc_r>:
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	b410      	push	{r4}
 8001ce4:	6093      	str	r3, [r2, #8]
 8001ce6:	da08      	bge.n	8001cfa <__sfputc_r+0x1e>
 8001ce8:	6994      	ldr	r4, [r2, #24]
 8001cea:	42a3      	cmp	r3, r4
 8001cec:	db01      	blt.n	8001cf2 <__sfputc_r+0x16>
 8001cee:	290a      	cmp	r1, #10
 8001cf0:	d103      	bne.n	8001cfa <__sfputc_r+0x1e>
 8001cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cf6:	f7ff bcab 	b.w	8001650 <__swbuf_r>
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	1c58      	adds	r0, r3, #1
 8001cfe:	6010      	str	r0, [r2, #0]
 8001d00:	7019      	strb	r1, [r3, #0]
 8001d02:	4608      	mov	r0, r1
 8001d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <__sfputs_r>:
 8001d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0c:	4606      	mov	r6, r0
 8001d0e:	460f      	mov	r7, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	18d5      	adds	r5, r2, r3
 8001d14:	42ac      	cmp	r4, r5
 8001d16:	d101      	bne.n	8001d1c <__sfputs_r+0x12>
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e007      	b.n	8001d2c <__sfputs_r+0x22>
 8001d1c:	463a      	mov	r2, r7
 8001d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7ff ffda 	bl	8001cdc <__sfputc_r>
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	d1f3      	bne.n	8001d14 <__sfputs_r+0xa>
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d30 <_vfiprintf_r>:
 8001d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d34:	460c      	mov	r4, r1
 8001d36:	b09d      	sub	sp, #116	; 0x74
 8001d38:	4617      	mov	r7, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	b118      	cbz	r0, 8001d48 <_vfiprintf_r+0x18>
 8001d40:	6983      	ldr	r3, [r0, #24]
 8001d42:	b90b      	cbnz	r3, 8001d48 <_vfiprintf_r+0x18>
 8001d44:	f7ff fe34 	bl	80019b0 <__sinit>
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <_vfiprintf_r+0x20c>)
 8001d4a:	429c      	cmp	r4, r3
 8001d4c:	d158      	bne.n	8001e00 <_vfiprintf_r+0xd0>
 8001d4e:	6874      	ldr	r4, [r6, #4]
 8001d50:	89a3      	ldrh	r3, [r4, #12]
 8001d52:	0718      	lsls	r0, r3, #28
 8001d54:	d55e      	bpl.n	8001e14 <_vfiprintf_r+0xe4>
 8001d56:	6923      	ldr	r3, [r4, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d05b      	beq.n	8001e14 <_vfiprintf_r+0xe4>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d60:	2320      	movs	r3, #32
 8001d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d66:	2330      	movs	r3, #48	; 0x30
 8001d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d6c:	9503      	str	r5, [sp, #12]
 8001d6e:	f04f 0b01 	mov.w	fp, #1
 8001d72:	46b8      	mov	r8, r7
 8001d74:	4645      	mov	r5, r8
 8001d76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d7a:	b10b      	cbz	r3, 8001d80 <_vfiprintf_r+0x50>
 8001d7c:	2b25      	cmp	r3, #37	; 0x25
 8001d7e:	d154      	bne.n	8001e2a <_vfiprintf_r+0xfa>
 8001d80:	ebb8 0a07 	subs.w	sl, r8, r7
 8001d84:	d00b      	beq.n	8001d9e <_vfiprintf_r+0x6e>
 8001d86:	4653      	mov	r3, sl
 8001d88:	463a      	mov	r2, r7
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f7ff ffbc 	bl	8001d0a <__sfputs_r>
 8001d92:	3001      	adds	r0, #1
 8001d94:	f000 80c2 	beq.w	8001f1c <_vfiprintf_r+0x1ec>
 8001d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d9a:	4453      	add	r3, sl
 8001d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d9e:	f898 3000 	ldrb.w	r3, [r8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80ba 	beq.w	8001f1c <_vfiprintf_r+0x1ec>
 8001da8:	2300      	movs	r3, #0
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001db2:	9304      	str	r3, [sp, #16]
 8001db4:	9307      	str	r3, [sp, #28]
 8001db6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dba:	931a      	str	r3, [sp, #104]	; 0x68
 8001dbc:	46a8      	mov	r8, r5
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001dc4:	485e      	ldr	r0, [pc, #376]	; (8001f40 <_vfiprintf_r+0x210>)
 8001dc6:	f7fe fa2b 	bl	8000220 <memchr>
 8001dca:	9b04      	ldr	r3, [sp, #16]
 8001dcc:	bb78      	cbnz	r0, 8001e2e <_vfiprintf_r+0xfe>
 8001dce:	06d9      	lsls	r1, r3, #27
 8001dd0:	bf44      	itt	mi
 8001dd2:	2220      	movmi	r2, #32
 8001dd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001dd8:	071a      	lsls	r2, r3, #28
 8001dda:	bf44      	itt	mi
 8001ddc:	222b      	movmi	r2, #43	; 0x2b
 8001dde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001de2:	782a      	ldrb	r2, [r5, #0]
 8001de4:	2a2a      	cmp	r2, #42	; 0x2a
 8001de6:	d02a      	beq.n	8001e3e <_vfiprintf_r+0x10e>
 8001de8:	9a07      	ldr	r2, [sp, #28]
 8001dea:	46a8      	mov	r8, r5
 8001dec:	2000      	movs	r0, #0
 8001dee:	250a      	movs	r5, #10
 8001df0:	4641      	mov	r1, r8
 8001df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001df6:	3b30      	subs	r3, #48	; 0x30
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d969      	bls.n	8001ed0 <_vfiprintf_r+0x1a0>
 8001dfc:	b360      	cbz	r0, 8001e58 <_vfiprintf_r+0x128>
 8001dfe:	e024      	b.n	8001e4a <_vfiprintf_r+0x11a>
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <_vfiprintf_r+0x214>)
 8001e02:	429c      	cmp	r4, r3
 8001e04:	d101      	bne.n	8001e0a <_vfiprintf_r+0xda>
 8001e06:	68b4      	ldr	r4, [r6, #8]
 8001e08:	e7a2      	b.n	8001d50 <_vfiprintf_r+0x20>
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <_vfiprintf_r+0x218>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	bf08      	it	eq
 8001e10:	68f4      	ldreq	r4, [r6, #12]
 8001e12:	e79d      	b.n	8001d50 <_vfiprintf_r+0x20>
 8001e14:	4621      	mov	r1, r4
 8001e16:	4630      	mov	r0, r6
 8001e18:	f7ff fc6c 	bl	80016f4 <__swsetup_r>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d09d      	beq.n	8001d5c <_vfiprintf_r+0x2c>
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	b01d      	add	sp, #116	; 0x74
 8001e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e2a:	46a8      	mov	r8, r5
 8001e2c:	e7a2      	b.n	8001d74 <_vfiprintf_r+0x44>
 8001e2e:	4a44      	ldr	r2, [pc, #272]	; (8001f40 <_vfiprintf_r+0x210>)
 8001e30:	1a80      	subs	r0, r0, r2
 8001e32:	fa0b f000 	lsl.w	r0, fp, r0
 8001e36:	4318      	orrs	r0, r3
 8001e38:	9004      	str	r0, [sp, #16]
 8001e3a:	4645      	mov	r5, r8
 8001e3c:	e7be      	b.n	8001dbc <_vfiprintf_r+0x8c>
 8001e3e:	9a03      	ldr	r2, [sp, #12]
 8001e40:	1d11      	adds	r1, r2, #4
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	9103      	str	r1, [sp, #12]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	db01      	blt.n	8001e4e <_vfiprintf_r+0x11e>
 8001e4a:	9207      	str	r2, [sp, #28]
 8001e4c:	e004      	b.n	8001e58 <_vfiprintf_r+0x128>
 8001e4e:	4252      	negs	r2, r2
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	9207      	str	r2, [sp, #28]
 8001e56:	9304      	str	r3, [sp, #16]
 8001e58:	f898 3000 	ldrb.w	r3, [r8]
 8001e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e5e:	d10e      	bne.n	8001e7e <_vfiprintf_r+0x14e>
 8001e60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e64:	2b2a      	cmp	r3, #42	; 0x2a
 8001e66:	d138      	bne.n	8001eda <_vfiprintf_r+0x1aa>
 8001e68:	9b03      	ldr	r3, [sp, #12]
 8001e6a:	1d1a      	adds	r2, r3, #4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	9203      	str	r2, [sp, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bfb8      	it	lt
 8001e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e78:	f108 0802 	add.w	r8, r8, #2
 8001e7c:	9305      	str	r3, [sp, #20]
 8001e7e:	4d33      	ldr	r5, [pc, #204]	; (8001f4c <_vfiprintf_r+0x21c>)
 8001e80:	f898 1000 	ldrb.w	r1, [r8]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4628      	mov	r0, r5
 8001e88:	f7fe f9ca 	bl	8000220 <memchr>
 8001e8c:	b140      	cbz	r0, 8001ea0 <_vfiprintf_r+0x170>
 8001e8e:	2340      	movs	r3, #64	; 0x40
 8001e90:	1b40      	subs	r0, r0, r5
 8001e92:	fa03 f000 	lsl.w	r0, r3, r0
 8001e96:	9b04      	ldr	r3, [sp, #16]
 8001e98:	4303      	orrs	r3, r0
 8001e9a:	f108 0801 	add.w	r8, r8, #1
 8001e9e:	9304      	str	r3, [sp, #16]
 8001ea0:	f898 1000 	ldrb.w	r1, [r8]
 8001ea4:	482a      	ldr	r0, [pc, #168]	; (8001f50 <_vfiprintf_r+0x220>)
 8001ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001eaa:	2206      	movs	r2, #6
 8001eac:	f108 0701 	add.w	r7, r8, #1
 8001eb0:	f7fe f9b6 	bl	8000220 <memchr>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d037      	beq.n	8001f28 <_vfiprintf_r+0x1f8>
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <_vfiprintf_r+0x224>)
 8001eba:	bb1b      	cbnz	r3, 8001f04 <_vfiprintf_r+0x1d4>
 8001ebc:	9b03      	ldr	r3, [sp, #12]
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	f023 0307 	bic.w	r3, r3, #7
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eca:	444b      	add	r3, r9
 8001ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ece:	e750      	b.n	8001d72 <_vfiprintf_r+0x42>
 8001ed0:	fb05 3202 	mla	r2, r5, r2, r3
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	4688      	mov	r8, r1
 8001ed8:	e78a      	b.n	8001df0 <_vfiprintf_r+0xc0>
 8001eda:	2300      	movs	r3, #0
 8001edc:	f108 0801 	add.w	r8, r8, #1
 8001ee0:	9305      	str	r3, [sp, #20]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	250a      	movs	r5, #10
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eec:	3a30      	subs	r2, #48	; 0x30
 8001eee:	2a09      	cmp	r2, #9
 8001ef0:	d903      	bls.n	8001efa <_vfiprintf_r+0x1ca>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0c3      	beq.n	8001e7e <_vfiprintf_r+0x14e>
 8001ef6:	9105      	str	r1, [sp, #20]
 8001ef8:	e7c1      	b.n	8001e7e <_vfiprintf_r+0x14e>
 8001efa:	fb05 2101 	mla	r1, r5, r1, r2
 8001efe:	2301      	movs	r3, #1
 8001f00:	4680      	mov	r8, r0
 8001f02:	e7f0      	b.n	8001ee6 <_vfiprintf_r+0x1b6>
 8001f04:	ab03      	add	r3, sp, #12
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4622      	mov	r2, r4
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_vfiprintf_r+0x228>)
 8001f0c:	a904      	add	r1, sp, #16
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f3af 8000 	nop.w
 8001f14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f18:	4681      	mov	r9, r0
 8001f1a:	d1d5      	bne.n	8001ec8 <_vfiprintf_r+0x198>
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	065b      	lsls	r3, r3, #25
 8001f20:	f53f af7e 	bmi.w	8001e20 <_vfiprintf_r+0xf0>
 8001f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f26:	e77d      	b.n	8001e24 <_vfiprintf_r+0xf4>
 8001f28:	ab03      	add	r3, sp, #12
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <_vfiprintf_r+0x228>)
 8001f30:	a904      	add	r1, sp, #16
 8001f32:	4630      	mov	r0, r6
 8001f34:	f000 f888 	bl	8002048 <_printf_i>
 8001f38:	e7ec      	b.n	8001f14 <_vfiprintf_r+0x1e4>
 8001f3a:	bf00      	nop
 8001f3c:	08002a54 	.word	0x08002a54
 8001f40:	08002a94 	.word	0x08002a94
 8001f44:	08002a74 	.word	0x08002a74
 8001f48:	08002a34 	.word	0x08002a34
 8001f4c:	08002a9a 	.word	0x08002a9a
 8001f50:	08002a9e 	.word	0x08002a9e
 8001f54:	00000000 	.word	0x00000000
 8001f58:	08001d0b 	.word	0x08001d0b

08001f5c <_printf_common>:
 8001f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f60:	4691      	mov	r9, r2
 8001f62:	461f      	mov	r7, r3
 8001f64:	688a      	ldr	r2, [r1, #8]
 8001f66:	690b      	ldr	r3, [r1, #16]
 8001f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bfb8      	it	lt
 8001f70:	4613      	movlt	r3, r2
 8001f72:	f8c9 3000 	str.w	r3, [r9]
 8001f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f7a:	4606      	mov	r6, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	b112      	cbz	r2, 8001f86 <_printf_common+0x2a>
 8001f80:	3301      	adds	r3, #1
 8001f82:	f8c9 3000 	str.w	r3, [r9]
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	0699      	lsls	r1, r3, #26
 8001f8a:	bf42      	ittt	mi
 8001f8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f90:	3302      	addmi	r3, #2
 8001f92:	f8c9 3000 	strmi.w	r3, [r9]
 8001f96:	6825      	ldr	r5, [r4, #0]
 8001f98:	f015 0506 	ands.w	r5, r5, #6
 8001f9c:	d107      	bne.n	8001fae <_printf_common+0x52>
 8001f9e:	f104 0a19 	add.w	sl, r4, #25
 8001fa2:	68e3      	ldr	r3, [r4, #12]
 8001fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	42ab      	cmp	r3, r5
 8001fac:	dc28      	bgt.n	8002000 <_printf_common+0xa4>
 8001fae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	3300      	adds	r3, #0
 8001fb6:	bf18      	it	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	0692      	lsls	r2, r2, #26
 8001fbc:	d42d      	bmi.n	800201a <_printf_common+0xbe>
 8001fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	47c0      	blx	r8
 8001fc8:	3001      	adds	r0, #1
 8001fca:	d020      	beq.n	800200e <_printf_common+0xb2>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	68e5      	ldr	r5, [r4, #12]
 8001fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8001fd4:	f003 0306 	and.w	r3, r3, #6
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	bf08      	it	eq
 8001fdc:	1aad      	subeq	r5, r5, r2
 8001fde:	68a3      	ldr	r3, [r4, #8]
 8001fe0:	6922      	ldr	r2, [r4, #16]
 8001fe2:	bf0c      	ite	eq
 8001fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fe8:	2500      	movne	r5, #0
 8001fea:	4293      	cmp	r3, r2
 8001fec:	bfc4      	itt	gt
 8001fee:	1a9b      	subgt	r3, r3, r2
 8001ff0:	18ed      	addgt	r5, r5, r3
 8001ff2:	f04f 0900 	mov.w	r9, #0
 8001ff6:	341a      	adds	r4, #26
 8001ff8:	454d      	cmp	r5, r9
 8001ffa:	d11a      	bne.n	8002032 <_printf_common+0xd6>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e008      	b.n	8002012 <_printf_common+0xb6>
 8002000:	2301      	movs	r3, #1
 8002002:	4652      	mov	r2, sl
 8002004:	4639      	mov	r1, r7
 8002006:	4630      	mov	r0, r6
 8002008:	47c0      	blx	r8
 800200a:	3001      	adds	r0, #1
 800200c:	d103      	bne.n	8002016 <_printf_common+0xba>
 800200e:	f04f 30ff 	mov.w	r0, #4294967295
 8002012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002016:	3501      	adds	r5, #1
 8002018:	e7c3      	b.n	8001fa2 <_printf_common+0x46>
 800201a:	18e1      	adds	r1, r4, r3
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	2030      	movs	r0, #48	; 0x30
 8002020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002024:	4422      	add	r2, r4
 8002026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800202a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800202e:	3302      	adds	r3, #2
 8002030:	e7c5      	b.n	8001fbe <_printf_common+0x62>
 8002032:	2301      	movs	r3, #1
 8002034:	4622      	mov	r2, r4
 8002036:	4639      	mov	r1, r7
 8002038:	4630      	mov	r0, r6
 800203a:	47c0      	blx	r8
 800203c:	3001      	adds	r0, #1
 800203e:	d0e6      	beq.n	800200e <_printf_common+0xb2>
 8002040:	f109 0901 	add.w	r9, r9, #1
 8002044:	e7d8      	b.n	8001ff8 <_printf_common+0x9c>
	...

08002048 <_printf_i>:
 8002048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800204c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002050:	460c      	mov	r4, r1
 8002052:	7e09      	ldrb	r1, [r1, #24]
 8002054:	b085      	sub	sp, #20
 8002056:	296e      	cmp	r1, #110	; 0x6e
 8002058:	4617      	mov	r7, r2
 800205a:	4606      	mov	r6, r0
 800205c:	4698      	mov	r8, r3
 800205e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002060:	f000 80b3 	beq.w	80021ca <_printf_i+0x182>
 8002064:	d822      	bhi.n	80020ac <_printf_i+0x64>
 8002066:	2963      	cmp	r1, #99	; 0x63
 8002068:	d036      	beq.n	80020d8 <_printf_i+0x90>
 800206a:	d80a      	bhi.n	8002082 <_printf_i+0x3a>
 800206c:	2900      	cmp	r1, #0
 800206e:	f000 80b9 	beq.w	80021e4 <_printf_i+0x19c>
 8002072:	2958      	cmp	r1, #88	; 0x58
 8002074:	f000 8083 	beq.w	800217e <_printf_i+0x136>
 8002078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800207c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002080:	e032      	b.n	80020e8 <_printf_i+0xa0>
 8002082:	2964      	cmp	r1, #100	; 0x64
 8002084:	d001      	beq.n	800208a <_printf_i+0x42>
 8002086:	2969      	cmp	r1, #105	; 0x69
 8002088:	d1f6      	bne.n	8002078 <_printf_i+0x30>
 800208a:	6820      	ldr	r0, [r4, #0]
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	0605      	lsls	r5, r0, #24
 8002090:	f103 0104 	add.w	r1, r3, #4
 8002094:	d52a      	bpl.n	80020ec <_printf_i+0xa4>
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6011      	str	r1, [r2, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da03      	bge.n	80020a6 <_printf_i+0x5e>
 800209e:	222d      	movs	r2, #45	; 0x2d
 80020a0:	425b      	negs	r3, r3
 80020a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80020a6:	486f      	ldr	r0, [pc, #444]	; (8002264 <_printf_i+0x21c>)
 80020a8:	220a      	movs	r2, #10
 80020aa:	e039      	b.n	8002120 <_printf_i+0xd8>
 80020ac:	2973      	cmp	r1, #115	; 0x73
 80020ae:	f000 809d 	beq.w	80021ec <_printf_i+0x1a4>
 80020b2:	d808      	bhi.n	80020c6 <_printf_i+0x7e>
 80020b4:	296f      	cmp	r1, #111	; 0x6f
 80020b6:	d020      	beq.n	80020fa <_printf_i+0xb2>
 80020b8:	2970      	cmp	r1, #112	; 0x70
 80020ba:	d1dd      	bne.n	8002078 <_printf_i+0x30>
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	6023      	str	r3, [r4, #0]
 80020c4:	e003      	b.n	80020ce <_printf_i+0x86>
 80020c6:	2975      	cmp	r1, #117	; 0x75
 80020c8:	d017      	beq.n	80020fa <_printf_i+0xb2>
 80020ca:	2978      	cmp	r1, #120	; 0x78
 80020cc:	d1d4      	bne.n	8002078 <_printf_i+0x30>
 80020ce:	2378      	movs	r3, #120	; 0x78
 80020d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020d4:	4864      	ldr	r0, [pc, #400]	; (8002268 <_printf_i+0x220>)
 80020d6:	e055      	b.n	8002184 <_printf_i+0x13c>
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	1d19      	adds	r1, r3, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6011      	str	r1, [r2, #0]
 80020e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020e8:	2301      	movs	r3, #1
 80020ea:	e08c      	b.n	8002206 <_printf_i+0x1be>
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6011      	str	r1, [r2, #0]
 80020f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020f4:	bf18      	it	ne
 80020f6:	b21b      	sxthne	r3, r3
 80020f8:	e7cf      	b.n	800209a <_printf_i+0x52>
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	6825      	ldr	r5, [r4, #0]
 80020fe:	1d18      	adds	r0, r3, #4
 8002100:	6010      	str	r0, [r2, #0]
 8002102:	0628      	lsls	r0, r5, #24
 8002104:	d501      	bpl.n	800210a <_printf_i+0xc2>
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	e002      	b.n	8002110 <_printf_i+0xc8>
 800210a:	0668      	lsls	r0, r5, #25
 800210c:	d5fb      	bpl.n	8002106 <_printf_i+0xbe>
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	4854      	ldr	r0, [pc, #336]	; (8002264 <_printf_i+0x21c>)
 8002112:	296f      	cmp	r1, #111	; 0x6f
 8002114:	bf14      	ite	ne
 8002116:	220a      	movne	r2, #10
 8002118:	2208      	moveq	r2, #8
 800211a:	2100      	movs	r1, #0
 800211c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002120:	6865      	ldr	r5, [r4, #4]
 8002122:	60a5      	str	r5, [r4, #8]
 8002124:	2d00      	cmp	r5, #0
 8002126:	f2c0 8095 	blt.w	8002254 <_printf_i+0x20c>
 800212a:	6821      	ldr	r1, [r4, #0]
 800212c:	f021 0104 	bic.w	r1, r1, #4
 8002130:	6021      	str	r1, [r4, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d13d      	bne.n	80021b2 <_printf_i+0x16a>
 8002136:	2d00      	cmp	r5, #0
 8002138:	f040 808e 	bne.w	8002258 <_printf_i+0x210>
 800213c:	4665      	mov	r5, ip
 800213e:	2a08      	cmp	r2, #8
 8002140:	d10b      	bne.n	800215a <_printf_i+0x112>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	07db      	lsls	r3, r3, #31
 8002146:	d508      	bpl.n	800215a <_printf_i+0x112>
 8002148:	6923      	ldr	r3, [r4, #16]
 800214a:	6862      	ldr	r2, [r4, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	bfde      	ittt	le
 8002150:	2330      	movle	r3, #48	; 0x30
 8002152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002156:	f105 35ff 	addle.w	r5, r5, #4294967295
 800215a:	ebac 0305 	sub.w	r3, ip, r5
 800215e:	6123      	str	r3, [r4, #16]
 8002160:	f8cd 8000 	str.w	r8, [sp]
 8002164:	463b      	mov	r3, r7
 8002166:	aa03      	add	r2, sp, #12
 8002168:	4621      	mov	r1, r4
 800216a:	4630      	mov	r0, r6
 800216c:	f7ff fef6 	bl	8001f5c <_printf_common>
 8002170:	3001      	adds	r0, #1
 8002172:	d14d      	bne.n	8002210 <_printf_i+0x1c8>
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	b005      	add	sp, #20
 800217a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800217e:	4839      	ldr	r0, [pc, #228]	; (8002264 <_printf_i+0x21c>)
 8002180:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	6821      	ldr	r1, [r4, #0]
 8002188:	1d1d      	adds	r5, r3, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6015      	str	r5, [r2, #0]
 800218e:	060a      	lsls	r2, r1, #24
 8002190:	d50b      	bpl.n	80021aa <_printf_i+0x162>
 8002192:	07ca      	lsls	r2, r1, #31
 8002194:	bf44      	itt	mi
 8002196:	f041 0120 	orrmi.w	r1, r1, #32
 800219a:	6021      	strmi	r1, [r4, #0]
 800219c:	b91b      	cbnz	r3, 80021a6 <_printf_i+0x15e>
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	f022 0220 	bic.w	r2, r2, #32
 80021a4:	6022      	str	r2, [r4, #0]
 80021a6:	2210      	movs	r2, #16
 80021a8:	e7b7      	b.n	800211a <_printf_i+0xd2>
 80021aa:	064d      	lsls	r5, r1, #25
 80021ac:	bf48      	it	mi
 80021ae:	b29b      	uxthmi	r3, r3
 80021b0:	e7ef      	b.n	8002192 <_printf_i+0x14a>
 80021b2:	4665      	mov	r5, ip
 80021b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80021b8:	fb02 3311 	mls	r3, r2, r1, r3
 80021bc:	5cc3      	ldrb	r3, [r0, r3]
 80021be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80021c2:	460b      	mov	r3, r1
 80021c4:	2900      	cmp	r1, #0
 80021c6:	d1f5      	bne.n	80021b4 <_printf_i+0x16c>
 80021c8:	e7b9      	b.n	800213e <_printf_i+0xf6>
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	6825      	ldr	r5, [r4, #0]
 80021ce:	6961      	ldr	r1, [r4, #20]
 80021d0:	1d18      	adds	r0, r3, #4
 80021d2:	6010      	str	r0, [r2, #0]
 80021d4:	0628      	lsls	r0, r5, #24
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	d501      	bpl.n	80021de <_printf_i+0x196>
 80021da:	6019      	str	r1, [r3, #0]
 80021dc:	e002      	b.n	80021e4 <_printf_i+0x19c>
 80021de:	066a      	lsls	r2, r5, #25
 80021e0:	d5fb      	bpl.n	80021da <_printf_i+0x192>
 80021e2:	8019      	strh	r1, [r3, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	6123      	str	r3, [r4, #16]
 80021e8:	4665      	mov	r5, ip
 80021ea:	e7b9      	b.n	8002160 <_printf_i+0x118>
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	1d19      	adds	r1, r3, #4
 80021f0:	6011      	str	r1, [r2, #0]
 80021f2:	681d      	ldr	r5, [r3, #0]
 80021f4:	6862      	ldr	r2, [r4, #4]
 80021f6:	2100      	movs	r1, #0
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7fe f811 	bl	8000220 <memchr>
 80021fe:	b108      	cbz	r0, 8002204 <_printf_i+0x1bc>
 8002200:	1b40      	subs	r0, r0, r5
 8002202:	6060      	str	r0, [r4, #4]
 8002204:	6863      	ldr	r3, [r4, #4]
 8002206:	6123      	str	r3, [r4, #16]
 8002208:	2300      	movs	r3, #0
 800220a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800220e:	e7a7      	b.n	8002160 <_printf_i+0x118>
 8002210:	6923      	ldr	r3, [r4, #16]
 8002212:	462a      	mov	r2, r5
 8002214:	4639      	mov	r1, r7
 8002216:	4630      	mov	r0, r6
 8002218:	47c0      	blx	r8
 800221a:	3001      	adds	r0, #1
 800221c:	d0aa      	beq.n	8002174 <_printf_i+0x12c>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	079b      	lsls	r3, r3, #30
 8002222:	d413      	bmi.n	800224c <_printf_i+0x204>
 8002224:	68e0      	ldr	r0, [r4, #12]
 8002226:	9b03      	ldr	r3, [sp, #12]
 8002228:	4298      	cmp	r0, r3
 800222a:	bfb8      	it	lt
 800222c:	4618      	movlt	r0, r3
 800222e:	e7a3      	b.n	8002178 <_printf_i+0x130>
 8002230:	2301      	movs	r3, #1
 8002232:	464a      	mov	r2, r9
 8002234:	4639      	mov	r1, r7
 8002236:	4630      	mov	r0, r6
 8002238:	47c0      	blx	r8
 800223a:	3001      	adds	r0, #1
 800223c:	d09a      	beq.n	8002174 <_printf_i+0x12c>
 800223e:	3501      	adds	r5, #1
 8002240:	68e3      	ldr	r3, [r4, #12]
 8002242:	9a03      	ldr	r2, [sp, #12]
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	42ab      	cmp	r3, r5
 8002248:	dcf2      	bgt.n	8002230 <_printf_i+0x1e8>
 800224a:	e7eb      	b.n	8002224 <_printf_i+0x1dc>
 800224c:	2500      	movs	r5, #0
 800224e:	f104 0919 	add.w	r9, r4, #25
 8002252:	e7f5      	b.n	8002240 <_printf_i+0x1f8>
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ac      	bne.n	80021b2 <_printf_i+0x16a>
 8002258:	7803      	ldrb	r3, [r0, #0]
 800225a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800225e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002262:	e76c      	b.n	800213e <_printf_i+0xf6>
 8002264:	08002aa5 	.word	0x08002aa5
 8002268:	08002ab6 	.word	0x08002ab6

0800226c <_sbrk_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4c06      	ldr	r4, [pc, #24]	; (8002288 <_sbrk_r+0x1c>)
 8002270:	2300      	movs	r3, #0
 8002272:	4605      	mov	r5, r0
 8002274:	4608      	mov	r0, r1
 8002276:	6023      	str	r3, [r4, #0]
 8002278:	f7fe f924 	bl	80004c4 <_sbrk>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d102      	bne.n	8002286 <_sbrk_r+0x1a>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	b103      	cbz	r3, 8002286 <_sbrk_r+0x1a>
 8002284:	602b      	str	r3, [r5, #0]
 8002286:	bd38      	pop	{r3, r4, r5, pc}
 8002288:	20000184 	.word	0x20000184

0800228c <__sread>:
 800228c:	b510      	push	{r4, lr}
 800228e:	460c      	mov	r4, r1
 8002290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002294:	f000 f896 	bl	80023c4 <_read_r>
 8002298:	2800      	cmp	r0, #0
 800229a:	bfab      	itete	ge
 800229c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800229e:	89a3      	ldrhlt	r3, [r4, #12]
 80022a0:	181b      	addge	r3, r3, r0
 80022a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022a6:	bfac      	ite	ge
 80022a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80022aa:	81a3      	strhlt	r3, [r4, #12]
 80022ac:	bd10      	pop	{r4, pc}

080022ae <__swrite>:
 80022ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b2:	461f      	mov	r7, r3
 80022b4:	898b      	ldrh	r3, [r1, #12]
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	4605      	mov	r5, r0
 80022ba:	460c      	mov	r4, r1
 80022bc:	4616      	mov	r6, r2
 80022be:	d505      	bpl.n	80022cc <__swrite+0x1e>
 80022c0:	2302      	movs	r3, #2
 80022c2:	2200      	movs	r2, #0
 80022c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c8:	f000 f868 	bl	800239c <_lseek_r>
 80022cc:	89a3      	ldrh	r3, [r4, #12]
 80022ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022d6:	81a3      	strh	r3, [r4, #12]
 80022d8:	4632      	mov	r2, r6
 80022da:	463b      	mov	r3, r7
 80022dc:	4628      	mov	r0, r5
 80022de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022e2:	f000 b817 	b.w	8002314 <_write_r>

080022e6 <__sseek>:
 80022e6:	b510      	push	{r4, lr}
 80022e8:	460c      	mov	r4, r1
 80022ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ee:	f000 f855 	bl	800239c <_lseek_r>
 80022f2:	1c43      	adds	r3, r0, #1
 80022f4:	89a3      	ldrh	r3, [r4, #12]
 80022f6:	bf15      	itete	ne
 80022f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002302:	81a3      	strheq	r3, [r4, #12]
 8002304:	bf18      	it	ne
 8002306:	81a3      	strhne	r3, [r4, #12]
 8002308:	bd10      	pop	{r4, pc}

0800230a <__sclose>:
 800230a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230e:	f000 b813 	b.w	8002338 <_close_r>
	...

08002314 <_write_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4c07      	ldr	r4, [pc, #28]	; (8002334 <_write_r+0x20>)
 8002318:	4605      	mov	r5, r0
 800231a:	4608      	mov	r0, r1
 800231c:	4611      	mov	r1, r2
 800231e:	2200      	movs	r2, #0
 8002320:	6022      	str	r2, [r4, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	f000 f911 	bl	800254a <_write>
 8002328:	1c43      	adds	r3, r0, #1
 800232a:	d102      	bne.n	8002332 <_write_r+0x1e>
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	b103      	cbz	r3, 8002332 <_write_r+0x1e>
 8002330:	602b      	str	r3, [r5, #0]
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	20000184 	.word	0x20000184

08002338 <_close_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4c06      	ldr	r4, [pc, #24]	; (8002354 <_close_r+0x1c>)
 800233c:	2300      	movs	r3, #0
 800233e:	4605      	mov	r5, r0
 8002340:	4608      	mov	r0, r1
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	f000 f930 	bl	80025a8 <_close>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d102      	bne.n	8002352 <_close_r+0x1a>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	b103      	cbz	r3, 8002352 <_close_r+0x1a>
 8002350:	602b      	str	r3, [r5, #0]
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	20000184 	.word	0x20000184

08002358 <_fstat_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4c07      	ldr	r4, [pc, #28]	; (8002378 <_fstat_r+0x20>)
 800235c:	2300      	movs	r3, #0
 800235e:	4605      	mov	r5, r0
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	f000 f966 	bl	8002636 <_fstat>
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	d102      	bne.n	8002374 <_fstat_r+0x1c>
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	b103      	cbz	r3, 8002374 <_fstat_r+0x1c>
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	bd38      	pop	{r3, r4, r5, pc}
 8002376:	bf00      	nop
 8002378:	20000184 	.word	0x20000184

0800237c <_isatty_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4c06      	ldr	r4, [pc, #24]	; (8002398 <_isatty_r+0x1c>)
 8002380:	2300      	movs	r3, #0
 8002382:	4605      	mov	r5, r0
 8002384:	4608      	mov	r0, r1
 8002386:	6023      	str	r3, [r4, #0]
 8002388:	f000 faba 	bl	8002900 <_isatty>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_isatty_r+0x1a>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	b103      	cbz	r3, 8002396 <_isatty_r+0x1a>
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	20000184 	.word	0x20000184

0800239c <_lseek_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4c07      	ldr	r4, [pc, #28]	; (80023bc <_lseek_r+0x20>)
 80023a0:	4605      	mov	r5, r0
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	2200      	movs	r2, #0
 80023a8:	6022      	str	r2, [r4, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f000 f8bb 	bl	8002526 <_lseek>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_lseek_r+0x1e>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_lseek_r+0x1e>
 80023b8:	602b      	str	r3, [r5, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	20000184 	.word	0x20000184

080023c0 <__malloc_lock>:
 80023c0:	4770      	bx	lr

080023c2 <__malloc_unlock>:
 80023c2:	4770      	bx	lr

080023c4 <_read_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4c07      	ldr	r4, [pc, #28]	; (80023e4 <_read_r+0x20>)
 80023c8:	4605      	mov	r5, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	6022      	str	r2, [r4, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f000 f850 	bl	8002478 <_read>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_read_r+0x1e>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_read_r+0x1e>
 80023e0:	602b      	str	r3, [r5, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	20000184 	.word	0x20000184

080023e8 <findslot>:
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <findslot+0x2c>)
 80023ea:	b510      	push	{r4, lr}
 80023ec:	4604      	mov	r4, r0
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	b118      	cbz	r0, 80023fa <findslot+0x12>
 80023f2:	6983      	ldr	r3, [r0, #24]
 80023f4:	b90b      	cbnz	r3, 80023fa <findslot+0x12>
 80023f6:	f7ff fadb 	bl	80019b0 <__sinit>
 80023fa:	2c13      	cmp	r4, #19
 80023fc:	d807      	bhi.n	800240e <findslot+0x26>
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <findslot+0x30>)
 8002400:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002404:	3301      	adds	r3, #1
 8002406:	d002      	beq.n	800240e <findslot+0x26>
 8002408:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800240c:	bd10      	pop	{r4, pc}
 800240e:	2000      	movs	r0, #0
 8002410:	e7fc      	b.n	800240c <findslot+0x24>
 8002412:	bf00      	nop
 8002414:	20000020 	.word	0x20000020
 8002418:	200000c4 	.word	0x200000c4

0800241c <checkerror>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	1c43      	adds	r3, r0, #1
 8002420:	4605      	mov	r5, r0
 8002422:	d109      	bne.n	8002438 <checkerror+0x1c>
 8002424:	f7ff f866 	bl	80014f4 <__errno>
 8002428:	2413      	movs	r4, #19
 800242a:	4606      	mov	r6, r0
 800242c:	2700      	movs	r7, #0
 800242e:	4620      	mov	r0, r4
 8002430:	4639      	mov	r1, r7
 8002432:	beab      	bkpt	0x00ab
 8002434:	4604      	mov	r4, r0
 8002436:	6034      	str	r4, [r6, #0]
 8002438:	4628      	mov	r0, r5
 800243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800243c <error>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	4605      	mov	r5, r0
 8002440:	f7ff f858 	bl	80014f4 <__errno>
 8002444:	2413      	movs	r4, #19
 8002446:	4606      	mov	r6, r0
 8002448:	2700      	movs	r7, #0
 800244a:	4620      	mov	r0, r4
 800244c:	4639      	mov	r1, r7
 800244e:	beab      	bkpt	0x00ab
 8002450:	4604      	mov	r4, r0
 8002452:	6034      	str	r4, [r6, #0]
 8002454:	4628      	mov	r0, r5
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002458 <_swiread>:
 8002458:	b530      	push	{r4, r5, lr}
 800245a:	b085      	sub	sp, #20
 800245c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002460:	9203      	str	r2, [sp, #12]
 8002462:	2406      	movs	r4, #6
 8002464:	ad01      	add	r5, sp, #4
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	beab      	bkpt	0x00ab
 800246c:	4604      	mov	r4, r0
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff ffd4 	bl	800241c <checkerror>
 8002474:	b005      	add	sp, #20
 8002476:	bd30      	pop	{r4, r5, pc}

08002478 <_read>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	460e      	mov	r6, r1
 800247c:	4615      	mov	r5, r2
 800247e:	f7ff ffb3 	bl	80023e8 <findslot>
 8002482:	4604      	mov	r4, r0
 8002484:	b930      	cbnz	r0, 8002494 <_read+0x1c>
 8002486:	f7ff f835 	bl	80014f4 <__errno>
 800248a:	2309      	movs	r3, #9
 800248c:	6003      	str	r3, [r0, #0]
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	462a      	mov	r2, r5
 8002496:	4631      	mov	r1, r6
 8002498:	6800      	ldr	r0, [r0, #0]
 800249a:	f7ff ffdd 	bl	8002458 <_swiread>
 800249e:	1c43      	adds	r3, r0, #1
 80024a0:	bf1f      	itttt	ne
 80024a2:	6863      	ldrne	r3, [r4, #4]
 80024a4:	1a28      	subne	r0, r5, r0
 80024a6:	181b      	addne	r3, r3, r0
 80024a8:	6063      	strne	r3, [r4, #4]
 80024aa:	e7f2      	b.n	8002492 <_read+0x1a>

080024ac <_swilseek>:
 80024ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024ae:	460c      	mov	r4, r1
 80024b0:	4616      	mov	r6, r2
 80024b2:	f7ff ff99 	bl	80023e8 <findslot>
 80024b6:	4605      	mov	r5, r0
 80024b8:	b940      	cbnz	r0, 80024cc <_swilseek+0x20>
 80024ba:	f7ff f81b 	bl	80014f4 <__errno>
 80024be:	2309      	movs	r3, #9
 80024c0:	6003      	str	r3, [r0, #0]
 80024c2:	f04f 34ff 	mov.w	r4, #4294967295
 80024c6:	4620      	mov	r0, r4
 80024c8:	b003      	add	sp, #12
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024cc:	2e02      	cmp	r6, #2
 80024ce:	d903      	bls.n	80024d8 <_swilseek+0x2c>
 80024d0:	f7ff f810 	bl	80014f4 <__errno>
 80024d4:	2316      	movs	r3, #22
 80024d6:	e7f3      	b.n	80024c0 <_swilseek+0x14>
 80024d8:	2e01      	cmp	r6, #1
 80024da:	d112      	bne.n	8002502 <_swilseek+0x56>
 80024dc:	6843      	ldr	r3, [r0, #4]
 80024de:	18e4      	adds	r4, r4, r3
 80024e0:	d4f6      	bmi.n	80024d0 <_swilseek+0x24>
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	260a      	movs	r6, #10
 80024e6:	e9cd 3400 	strd	r3, r4, [sp]
 80024ea:	466f      	mov	r7, sp
 80024ec:	4630      	mov	r0, r6
 80024ee:	4639      	mov	r1, r7
 80024f0:	beab      	bkpt	0x00ab
 80024f2:	4606      	mov	r6, r0
 80024f4:	4630      	mov	r0, r6
 80024f6:	f7ff ff91 	bl	800241c <checkerror>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	dbe1      	blt.n	80024c2 <_swilseek+0x16>
 80024fe:	606c      	str	r4, [r5, #4]
 8002500:	e7e1      	b.n	80024c6 <_swilseek+0x1a>
 8002502:	2e02      	cmp	r6, #2
 8002504:	d1ed      	bne.n	80024e2 <_swilseek+0x36>
 8002506:	af02      	add	r7, sp, #8
 8002508:	6803      	ldr	r3, [r0, #0]
 800250a:	f847 3d08 	str.w	r3, [r7, #-8]!
 800250e:	260c      	movs	r6, #12
 8002510:	4630      	mov	r0, r6
 8002512:	4639      	mov	r1, r7
 8002514:	beab      	bkpt	0x00ab
 8002516:	4606      	mov	r6, r0
 8002518:	4630      	mov	r0, r6
 800251a:	f7ff ff7f 	bl	800241c <checkerror>
 800251e:	1c43      	adds	r3, r0, #1
 8002520:	d0cf      	beq.n	80024c2 <_swilseek+0x16>
 8002522:	4404      	add	r4, r0
 8002524:	e7dd      	b.n	80024e2 <_swilseek+0x36>

08002526 <_lseek>:
 8002526:	f7ff bfc1 	b.w	80024ac <_swilseek>

0800252a <_swiwrite>:
 800252a:	b530      	push	{r4, r5, lr}
 800252c:	b085      	sub	sp, #20
 800252e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002532:	9203      	str	r2, [sp, #12]
 8002534:	2405      	movs	r4, #5
 8002536:	ad01      	add	r5, sp, #4
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	beab      	bkpt	0x00ab
 800253e:	4604      	mov	r4, r0
 8002540:	4620      	mov	r0, r4
 8002542:	f7ff ff6b 	bl	800241c <checkerror>
 8002546:	b005      	add	sp, #20
 8002548:	bd30      	pop	{r4, r5, pc}

0800254a <_write>:
 800254a:	b570      	push	{r4, r5, r6, lr}
 800254c:	460e      	mov	r6, r1
 800254e:	4615      	mov	r5, r2
 8002550:	f7ff ff4a 	bl	80023e8 <findslot>
 8002554:	4604      	mov	r4, r0
 8002556:	b930      	cbnz	r0, 8002566 <_write+0x1c>
 8002558:	f7fe ffcc 	bl	80014f4 <__errno>
 800255c:	2309      	movs	r3, #9
 800255e:	6003      	str	r3, [r0, #0]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	bd70      	pop	{r4, r5, r6, pc}
 8002566:	462a      	mov	r2, r5
 8002568:	4631      	mov	r1, r6
 800256a:	6800      	ldr	r0, [r0, #0]
 800256c:	f7ff ffdd 	bl	800252a <_swiwrite>
 8002570:	1e02      	subs	r2, r0, #0
 8002572:	dbf5      	blt.n	8002560 <_write+0x16>
 8002574:	6863      	ldr	r3, [r4, #4]
 8002576:	1aa8      	subs	r0, r5, r2
 8002578:	4403      	add	r3, r0
 800257a:	42aa      	cmp	r2, r5
 800257c:	6063      	str	r3, [r4, #4]
 800257e:	d1f1      	bne.n	8002564 <_write+0x1a>
 8002580:	2000      	movs	r0, #0
 8002582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002586:	f7ff bf59 	b.w	800243c <error>

0800258a <_swiclose>:
 800258a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800258c:	ad02      	add	r5, sp, #8
 800258e:	2402      	movs	r4, #2
 8002590:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	beab      	bkpt	0x00ab
 800259a:	4604      	mov	r4, r0
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff ff3d 	bl	800241c <checkerror>
 80025a2:	b003      	add	sp, #12
 80025a4:	bd30      	pop	{r4, r5, pc}
	...

080025a8 <_close>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4605      	mov	r5, r0
 80025ac:	f7ff ff1c 	bl	80023e8 <findslot>
 80025b0:	4604      	mov	r4, r0
 80025b2:	b930      	cbnz	r0, 80025c2 <_close+0x1a>
 80025b4:	f7fe ff9e 	bl	80014f4 <__errno>
 80025b8:	2309      	movs	r3, #9
 80025ba:	6003      	str	r3, [r0, #0]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
 80025c2:	3d01      	subs	r5, #1
 80025c4:	2d01      	cmp	r5, #1
 80025c6:	d809      	bhi.n	80025dc <_close+0x34>
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <_close+0x48>)
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d104      	bne.n	80025dc <_close+0x34>
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	6003      	str	r3, [r0, #0]
 80025d8:	2000      	movs	r0, #0
 80025da:	e7f1      	b.n	80025c0 <_close+0x18>
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	f7ff ffd4 	bl	800258a <_swiclose>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d1ec      	bne.n	80025c0 <_close+0x18>
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	6023      	str	r3, [r4, #0]
 80025ec:	e7e8      	b.n	80025c0 <_close+0x18>
 80025ee:	bf00      	nop
 80025f0:	200000c4 	.word	0x200000c4

080025f4 <_swistat>:
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	460c      	mov	r4, r1
 80025f8:	f7ff fef6 	bl	80023e8 <findslot>
 80025fc:	4606      	mov	r6, r0
 80025fe:	b930      	cbnz	r0, 800260e <_swistat+0x1a>
 8002600:	f7fe ff78 	bl	80014f4 <__errno>
 8002604:	2309      	movs	r3, #9
 8002606:	6003      	str	r3, [r0, #0]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	6863      	ldr	r3, [r4, #4]
 8002610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002614:	6063      	str	r3, [r4, #4]
 8002616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261a:	6463      	str	r3, [r4, #68]	; 0x44
 800261c:	250c      	movs	r5, #12
 800261e:	4628      	mov	r0, r5
 8002620:	4631      	mov	r1, r6
 8002622:	beab      	bkpt	0x00ab
 8002624:	4605      	mov	r5, r0
 8002626:	4628      	mov	r0, r5
 8002628:	f7ff fef8 	bl	800241c <checkerror>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	bf1c      	itt	ne
 8002630:	6120      	strne	r0, [r4, #16]
 8002632:	2000      	movne	r0, #0
 8002634:	e7ea      	b.n	800260c <_swistat+0x18>

08002636 <_fstat>:
 8002636:	460b      	mov	r3, r1
 8002638:	b510      	push	{r4, lr}
 800263a:	2100      	movs	r1, #0
 800263c:	4604      	mov	r4, r0
 800263e:	2258      	movs	r2, #88	; 0x58
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe ff81 	bl	8001548 <memset>
 8002646:	4601      	mov	r1, r0
 8002648:	4620      	mov	r0, r4
 800264a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800264e:	f7ff bfd1 	b.w	80025f4 <_swistat>

08002652 <_stat>:
 8002652:	b538      	push	{r3, r4, r5, lr}
 8002654:	460d      	mov	r5, r1
 8002656:	4604      	mov	r4, r0
 8002658:	2258      	movs	r2, #88	; 0x58
 800265a:	2100      	movs	r1, #0
 800265c:	4628      	mov	r0, r5
 800265e:	f7fe ff73 	bl	8001548 <memset>
 8002662:	4620      	mov	r0, r4
 8002664:	2100      	movs	r1, #0
 8002666:	f000 f811 	bl	800268c <_swiopen>
 800266a:	1c43      	adds	r3, r0, #1
 800266c:	4604      	mov	r4, r0
 800266e:	d00b      	beq.n	8002688 <_stat+0x36>
 8002670:	686b      	ldr	r3, [r5, #4]
 8002672:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002676:	606b      	str	r3, [r5, #4]
 8002678:	4629      	mov	r1, r5
 800267a:	f7ff ffbb 	bl	80025f4 <_swistat>
 800267e:	4605      	mov	r5, r0
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff ff91 	bl	80025a8 <_close>
 8002686:	462c      	mov	r4, r5
 8002688:	4620      	mov	r0, r4
 800268a:	bd38      	pop	{r3, r4, r5, pc}

0800268c <_swiopen>:
 800268c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <_swiopen+0xb4>)
 8002692:	b096      	sub	sp, #88	; 0x58
 8002694:	4682      	mov	sl, r0
 8002696:	460e      	mov	r6, r1
 8002698:	2500      	movs	r5, #0
 800269a:	4698      	mov	r8, r3
 800269c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80026a0:	1c61      	adds	r1, r4, #1
 80026a2:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80026a6:	d036      	beq.n	8002716 <_swiopen+0x8a>
 80026a8:	3501      	adds	r5, #1
 80026aa:	2d14      	cmp	r5, #20
 80026ac:	d1f6      	bne.n	800269c <_swiopen+0x10>
 80026ae:	f7fe ff21 	bl	80014f4 <__errno>
 80026b2:	2318      	movs	r3, #24
 80026b4:	6003      	str	r3, [r0, #0]
 80026b6:	f04f 34ff 	mov.w	r4, #4294967295
 80026ba:	e03c      	b.n	8002736 <_swiopen+0xaa>
 80026bc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80026c0:	f240 6301 	movw	r3, #1537	; 0x601
 80026c4:	07b2      	lsls	r2, r6, #30
 80026c6:	bf48      	it	mi
 80026c8:	f044 0402 	orrmi.w	r4, r4, #2
 80026cc:	421e      	tst	r6, r3
 80026ce:	bf18      	it	ne
 80026d0:	f044 0404 	orrne.w	r4, r4, #4
 80026d4:	0733      	lsls	r3, r6, #28
 80026d6:	bf48      	it	mi
 80026d8:	f024 0404 	bicmi.w	r4, r4, #4
 80026dc:	4650      	mov	r0, sl
 80026de:	bf48      	it	mi
 80026e0:	f044 0408 	orrmi.w	r4, r4, #8
 80026e4:	f8cd a000 	str.w	sl, [sp]
 80026e8:	f7fd fd92 	bl	8000210 <strlen>
 80026ec:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80026f0:	2401      	movs	r4, #1
 80026f2:	4620      	mov	r0, r4
 80026f4:	4649      	mov	r1, r9
 80026f6:	beab      	bkpt	0x00ab
 80026f8:	4604      	mov	r4, r0
 80026fa:	2c00      	cmp	r4, #0
 80026fc:	db06      	blt.n	800270c <_swiopen+0x80>
 80026fe:	4447      	add	r7, r8
 8002700:	2300      	movs	r3, #0
 8002702:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	462c      	mov	r4, r5
 800270a:	e014      	b.n	8002736 <_swiopen+0xaa>
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fe95 	bl	800243c <error>
 8002712:	4604      	mov	r4, r0
 8002714:	e00f      	b.n	8002736 <_swiopen+0xaa>
 8002716:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800271a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800271e:	46e9      	mov	r9, sp
 8002720:	d1cc      	bne.n	80026bc <_swiopen+0x30>
 8002722:	4649      	mov	r1, r9
 8002724:	4650      	mov	r0, sl
 8002726:	f7ff ff94 	bl	8002652 <_stat>
 800272a:	3001      	adds	r0, #1
 800272c:	d0c6      	beq.n	80026bc <_swiopen+0x30>
 800272e:	f7fe fee1 	bl	80014f4 <__errno>
 8002732:	2311      	movs	r3, #17
 8002734:	6003      	str	r3, [r0, #0]
 8002736:	4620      	mov	r0, r4
 8002738:	b016      	add	sp, #88	; 0x58
 800273a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273e:	bf00      	nop
 8002740:	200000c4 	.word	0x200000c4

08002744 <_get_semihosting_exts>:
 8002744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002748:	4607      	mov	r7, r0
 800274a:	4688      	mov	r8, r1
 800274c:	4829      	ldr	r0, [pc, #164]	; (80027f4 <_get_semihosting_exts+0xb0>)
 800274e:	2100      	movs	r1, #0
 8002750:	4615      	mov	r5, r2
 8002752:	f7ff ff9b 	bl	800268c <_swiopen>
 8002756:	462a      	mov	r2, r5
 8002758:	4604      	mov	r4, r0
 800275a:	2100      	movs	r1, #0
 800275c:	4638      	mov	r0, r7
 800275e:	f7fe fef3 	bl	8001548 <memset>
 8002762:	1c63      	adds	r3, r4, #1
 8002764:	d015      	beq.n	8002792 <_get_semihosting_exts+0x4e>
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fe3e 	bl	80023e8 <findslot>
 800276c:	260c      	movs	r6, #12
 800276e:	4681      	mov	r9, r0
 8002770:	4630      	mov	r0, r6
 8002772:	4649      	mov	r1, r9
 8002774:	beab      	bkpt	0x00ab
 8002776:	4606      	mov	r6, r0
 8002778:	4630      	mov	r0, r6
 800277a:	f7ff fe4f 	bl	800241c <checkerror>
 800277e:	2803      	cmp	r0, #3
 8002780:	dd02      	ble.n	8002788 <_get_semihosting_exts+0x44>
 8002782:	3803      	subs	r0, #3
 8002784:	42a8      	cmp	r0, r5
 8002786:	dc08      	bgt.n	800279a <_get_semihosting_exts+0x56>
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff0d 	bl	80025a8 <_close>
 800278e:	f04f 34ff 	mov.w	r4, #4294967295
 8002792:	4620      	mov	r0, r4
 8002794:	b003      	add	sp, #12
 8002796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800279a:	2204      	movs	r2, #4
 800279c:	eb0d 0102 	add.w	r1, sp, r2
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fe69 	bl	8002478 <_read>
 80027a6:	2803      	cmp	r0, #3
 80027a8:	ddee      	ble.n	8002788 <_get_semihosting_exts+0x44>
 80027aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027ae:	2b53      	cmp	r3, #83	; 0x53
 80027b0:	d1ea      	bne.n	8002788 <_get_semihosting_exts+0x44>
 80027b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80027b6:	2b48      	cmp	r3, #72	; 0x48
 80027b8:	d1e6      	bne.n	8002788 <_get_semihosting_exts+0x44>
 80027ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027be:	2b46      	cmp	r3, #70	; 0x46
 80027c0:	d1e2      	bne.n	8002788 <_get_semihosting_exts+0x44>
 80027c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027c6:	2b42      	cmp	r3, #66	; 0x42
 80027c8:	d1de      	bne.n	8002788 <_get_semihosting_exts+0x44>
 80027ca:	2201      	movs	r2, #1
 80027cc:	4641      	mov	r1, r8
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff fe6c 	bl	80024ac <_swilseek>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	dbd7      	blt.n	8002788 <_get_semihosting_exts+0x44>
 80027d8:	462a      	mov	r2, r5
 80027da:	4639      	mov	r1, r7
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff fe4b 	bl	8002478 <_read>
 80027e2:	4605      	mov	r5, r0
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fedf 	bl	80025a8 <_close>
 80027ea:	4628      	mov	r0, r5
 80027ec:	f7ff fe16 	bl	800241c <checkerror>
 80027f0:	4604      	mov	r4, r0
 80027f2:	e7ce      	b.n	8002792 <_get_semihosting_exts+0x4e>
 80027f4:	08002ac7 	.word	0x08002ac7

080027f8 <initialise_semihosting_exts>:
 80027f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027fa:	4d0a      	ldr	r5, [pc, #40]	; (8002824 <initialise_semihosting_exts+0x2c>)
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <initialise_semihosting_exts+0x30>)
 80027fe:	2100      	movs	r1, #0
 8002800:	2201      	movs	r2, #1
 8002802:	a801      	add	r0, sp, #4
 8002804:	6029      	str	r1, [r5, #0]
 8002806:	6022      	str	r2, [r4, #0]
 8002808:	f7ff ff9c 	bl	8002744 <_get_semihosting_exts>
 800280c:	2800      	cmp	r0, #0
 800280e:	dd07      	ble.n	8002820 <initialise_semihosting_exts+0x28>
 8002810:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002814:	f003 0201 	and.w	r2, r3, #1
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	602a      	str	r2, [r5, #0]
 800281e:	6023      	str	r3, [r4, #0]
 8002820:	b003      	add	sp, #12
 8002822:	bd30      	pop	{r4, r5, pc}
 8002824:	20000084 	.word	0x20000084
 8002828:	20000088 	.word	0x20000088

0800282c <_has_ext_stdout_stderr>:
 800282c:	b510      	push	{r4, lr}
 800282e:	4c04      	ldr	r4, [pc, #16]	; (8002840 <_has_ext_stdout_stderr+0x14>)
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	2a00      	cmp	r2, #0
 8002834:	da01      	bge.n	800283a <_has_ext_stdout_stderr+0xe>
 8002836:	f7ff ffdf 	bl	80027f8 <initialise_semihosting_exts>
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	bd10      	pop	{r4, pc}
 800283e:	bf00      	nop
 8002840:	20000088 	.word	0x20000088

08002844 <initialise_monitor_handles>:
 8002844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	b085      	sub	sp, #20
 800284a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80028fc <initialise_monitor_handles+0xb8>
 800284e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002852:	2303      	movs	r3, #3
 8002854:	2400      	movs	r4, #0
 8002856:	9303      	str	r3, [sp, #12]
 8002858:	f10d 0804 	add.w	r8, sp, #4
 800285c:	9402      	str	r4, [sp, #8]
 800285e:	2501      	movs	r5, #1
 8002860:	4628      	mov	r0, r5
 8002862:	4641      	mov	r1, r8
 8002864:	beab      	bkpt	0x00ab
 8002866:	4605      	mov	r5, r0
 8002868:	4e20      	ldr	r6, [pc, #128]	; (80028ec <initialise_monitor_handles+0xa8>)
 800286a:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <initialise_monitor_handles+0xac>)
 800286c:	6035      	str	r5, [r6, #0]
 800286e:	4623      	mov	r3, r4
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	4614      	mov	r4, r2
 8002876:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800287a:	3301      	adds	r3, #1
 800287c:	2b14      	cmp	r3, #20
 800287e:	d1fa      	bne.n	8002876 <initialise_monitor_handles+0x32>
 8002880:	f7ff ffd4 	bl	800282c <_has_ext_stdout_stderr>
 8002884:	4d1b      	ldr	r5, [pc, #108]	; (80028f4 <initialise_monitor_handles+0xb0>)
 8002886:	b1d0      	cbz	r0, 80028be <initialise_monitor_handles+0x7a>
 8002888:	f04f 0a03 	mov.w	sl, #3
 800288c:	2304      	movs	r3, #4
 800288e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002892:	2701      	movs	r7, #1
 8002894:	f8cd a00c 	str.w	sl, [sp, #12]
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	4638      	mov	r0, r7
 800289c:	4641      	mov	r1, r8
 800289e:	beab      	bkpt	0x00ab
 80028a0:	4683      	mov	fp, r0
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <initialise_monitor_handles+0xb4>)
 80028a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80028a8:	f8c3 b000 	str.w	fp, [r3]
 80028ac:	2308      	movs	r3, #8
 80028ae:	f8cd a00c 	str.w	sl, [sp, #12]
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	4638      	mov	r0, r7
 80028b6:	4641      	mov	r1, r8
 80028b8:	beab      	bkpt	0x00ab
 80028ba:	4607      	mov	r7, r0
 80028bc:	602f      	str	r7, [r5, #0]
 80028be:	682b      	ldr	r3, [r5, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	bf02      	ittt	eq
 80028c4:	4b0c      	ldreq	r3, [pc, #48]	; (80028f8 <initialise_monitor_handles+0xb4>)
 80028c6:	681b      	ldreq	r3, [r3, #0]
 80028c8:	602b      	streq	r3, [r5, #0]
 80028ca:	6833      	ldr	r3, [r6, #0]
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	2600      	movs	r6, #0
 80028d0:	6066      	str	r6, [r4, #4]
 80028d2:	f7ff ffab 	bl	800282c <_has_ext_stdout_stderr>
 80028d6:	b130      	cbz	r0, 80028e6 <initialise_monitor_handles+0xa2>
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <initialise_monitor_handles+0xb4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80028e6:	b005      	add	sp, #20
 80028e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ec:	200000bc 	.word	0x200000bc
 80028f0:	200000c4 	.word	0x200000c4
 80028f4:	200000b8 	.word	0x200000b8
 80028f8:	200000c0 	.word	0x200000c0
 80028fc:	08002add 	.word	0x08002add

08002900 <_isatty>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	f7ff fd71 	bl	80023e8 <findslot>
 8002906:	2509      	movs	r5, #9
 8002908:	4604      	mov	r4, r0
 800290a:	b920      	cbnz	r0, 8002916 <_isatty+0x16>
 800290c:	f7fe fdf2 	bl	80014f4 <__errno>
 8002910:	6005      	str	r5, [r0, #0]
 8002912:	4620      	mov	r0, r4
 8002914:	bd70      	pop	{r4, r5, r6, pc}
 8002916:	4628      	mov	r0, r5
 8002918:	4621      	mov	r1, r4
 800291a:	beab      	bkpt	0x00ab
 800291c:	4604      	mov	r4, r0
 800291e:	2c01      	cmp	r4, #1
 8002920:	d0f7      	beq.n	8002912 <_isatty+0x12>
 8002922:	f7fe fde7 	bl	80014f4 <__errno>
 8002926:	2400      	movs	r4, #0
 8002928:	4606      	mov	r6, r0
 800292a:	2513      	movs	r5, #19
 800292c:	4628      	mov	r0, r5
 800292e:	4621      	mov	r1, r4
 8002930:	beab      	bkpt	0x00ab
 8002932:	4605      	mov	r5, r0
 8002934:	6035      	str	r5, [r6, #0]
 8002936:	e7ec      	b.n	8002912 <_isatty+0x12>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
