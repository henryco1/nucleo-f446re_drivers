
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002940  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd0  08002cd0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd0  08002cd0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000006c  08002d44  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002d44  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037d7  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008c7  00000000  00000000  00023873  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f0  00000000  00000000  00024140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00024330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000304d  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f91  00000000  00000000  00027525  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b3a9  00000000  00000000  000294b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003485f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001200  00000000  00000000  000348dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002af8 	.word	0x08002af8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08002af8 	.word	0x08002af8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <delay>:
I2C_Handle_t I2C1Handle;
uint8_t RxCompleteFlag = 0;
/*
 * PUPD LED control
 */
void delay(int value) {
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	e002      	b.n	80002d4 <delay+0x14>
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d3f8      	bcc.n	80002ce <delay+0xe>
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <I2C1_GPIO_Init>:
/*
 * PB8 = SCL
 * PB9 = SDA
 * Alt Func mode = 4
 */
void I2C1_GPIO_Init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <I2C1_GPIO_Init+0x40>)
 80002f0:	607b      	str	r3, [r7, #4]

	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002f2:	2302      	movs	r3, #2
 80002f4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 80002f6:	2304      	movs	r3, #4
 80002f8:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_OPEN_DRAIN;
 80002fa:	2301      	movs	r3, #1
 80002fc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULL_UP;
 80002fe:	2301      	movs	r3, #1
 8000300:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000302:	2302      	movs	r3, #2
 8000304:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8000306:	2308      	movs	r3, #8
 8000308:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fa6f 	bl	80007f0 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000312:	2309      	movs	r3, #9
 8000314:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fa69 	bl	80007f0 <GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020400 	.word	0x40020400

0800032c <I2C1_Init>:

void I2C1_Init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <I2C1_Init+0x2c>)
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <I2C1_Init+0x30>)
 8000334:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <I2C1_Init+0x2c>)
 8000338:	2201      	movs	r2, #1
 800033a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = I2C_MASTER_ADDR;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <I2C1_Init+0x2c>)
 800033e:	2261      	movs	r2, #97	; 0x61
 8000340:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_CYCLE_2;
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <I2C1_Init+0x2c>)
 8000344:	2200      	movs	r2, #0
 8000346:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <I2C1_Init+0x2c>)
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <I2C1_Init+0x34>)
 800034c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <I2C1_Init+0x2c>)
 8000350:	f000 fd20 	bl	8000d94 <I2C_Init>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000144 	.word	0x20000144
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	220c      	movs	r2, #12
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f9c9 	bl	8001708 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <GPIO_Button_Init+0x38>)
 8000378:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800037a:	230d      	movs	r3, #13
 800037c:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 800037e:	2300      	movs	r3, #0
 8000380:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000382:	2302      	movs	r3, #2
 8000384:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 8000386:	2300      	movs	r3, #0
 8000388:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fa2f 	bl	80007f0 <GPIO_Init>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40020800 	.word	0x40020800

080003a0 <main>:

int main(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af02      	add	r7, sp, #8
	/* This will be an interrupt based version of master rx test
	 * 	Here we initialize interrupts. Note that priority config is not needed as we are only working with one interrupt
	 * 	We also need the interrupt name from the startup code. We override the IRQ handlers with our IRQ handler function
	 */
	initialise_monitor_handles();
 80003a6:	f002 fb2d 	bl	8002a04 <initialise_monitor_handles>
	printf("Semihosting successful\n");
 80003aa:	4842      	ldr	r0, [pc, #264]	; (80004b4 <main+0x114>)
 80003ac:	f001 fa28 	bl	8001800 <puts>
	GPIO_Button_Init();
 80003b0:	f7ff ffd8 	bl	8000364 <GPIO_Button_Init>
	I2C1_GPIO_Init();
 80003b4:	f7ff ff98 	bl	80002e8 <I2C1_GPIO_Init>
	I2C1_Init();
 80003b8:	f7ff ffb8 	bl	800032c <I2C1_Init>

	// IRQ
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80003bc:	2101      	movs	r1, #1
 80003be:	201f      	movs	r0, #31
 80003c0:	f000 fe10 	bl	8000fe4 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80003c4:	2101      	movs	r1, #1
 80003c6:	2020      	movs	r0, #32
 80003c8:	f000 fe0c 	bl	8000fe4 <I2C_IRQInterruptConfig>

	I2C_PeripheralControl(I2C1, ENABLE);
 80003cc:	2101      	movs	r1, #1
 80003ce:	483a      	ldr	r0, [pc, #232]	; (80004b8 <main+0x118>)
 80003d0:	f000 fd64 	bl	8000e9c <I2C_PeripheralControl>
	// enable ack ater PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003d4:	2101      	movs	r1, #1
 80003d6:	4838      	ldr	r0, [pc, #224]	; (80004b8 <main+0x118>)
 80003d8:	f000 ffe6 	bl	80013a8 <I2C_ManageAcking>

	uint8_t data_length = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t commandcode = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t RxBuffer[32];
	while (1) {
		// wait till button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 80003e8:	bf00      	nop
 80003ea:	210d      	movs	r1, #13
 80003ec:	4833      	ldr	r0, [pc, #204]	; (80004bc <main+0x11c>)
 80003ee:	f000 fb99 	bl	8000b24 <GPIO_ReadFromInputPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1f8      	bne.n	80003ea <main+0x4a>
		delay(500000);
 80003f8:	4831      	ldr	r0, [pc, #196]	; (80004c0 <main+0x120>)
 80003fa:	f7ff ff61 	bl	80002c0 <delay>

		// get data length
		commandcode = 0x51;
 80003fe:	2351      	movs	r3, #81	; 0x51
 8000400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while (I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE) != I2C_STATE_READY);
 8000404:	bf00      	nop
 8000406:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800040a:	2301      	movs	r3, #1
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2368      	movs	r3, #104	; 0x68
 8000410:	2201      	movs	r2, #1
 8000412:	482c      	ldr	r0, [pc, #176]	; (80004c4 <main+0x124>)
 8000414:	f000 fd5e 	bl	8000ed4 <I2C_MasterSendDataIT>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f3      	bne.n	8000406 <main+0x66>

		// receive data length from the arduino
		while (I2C_MasterReceiveDataIT(&I2C1Handle, &data_length, 1, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE) != I2C_STATE_READY);
 800041e:	bf00      	nop
 8000420:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000424:	2301      	movs	r3, #1
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2368      	movs	r3, #104	; 0x68
 800042a:	2201      	movs	r2, #1
 800042c:	4825      	ldr	r0, [pc, #148]	; (80004c4 <main+0x124>)
 800042e:	f000 fd93 	bl	8000f58 <I2C_MasterReceiveDataIT>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1f3      	bne.n	8000420 <main+0x80>
		printf("The size of the data is %d\n", data_length);
 8000438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800043c:	4619      	mov	r1, r3
 800043e:	4822      	ldr	r0, [pc, #136]	; (80004c8 <main+0x128>)
 8000440:	f001 f96a 	bl	8001718 <iprintf>

		commandcode = 0x52;
 8000444:	2352      	movs	r3, #82	; 0x52
 8000446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while (I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, I2C_SLAVE_ADDR, I2C_REPEATED_START_ENABLE) != I2C_STATE_READY);
 800044a:	bf00      	nop
 800044c:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8000450:	2301      	movs	r3, #1
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2368      	movs	r3, #104	; 0x68
 8000456:	2201      	movs	r2, #1
 8000458:	481a      	ldr	r0, [pc, #104]	; (80004c4 <main+0x124>)
 800045a:	f000 fd3b 	bl	8000ed4 <I2C_MasterSendDataIT>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1f3      	bne.n	800044c <main+0xac>

		// receive the entirety of the data from the arduino
		while (I2C_MasterReceiveDataIT(&I2C1Handle, RxBuffer, data_length, I2C_SLAVE_ADDR, I2C_REPEATED_START_DISABLE) != I2C_STATE_READY);
 8000464:	bf00      	nop
 8000466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800046a:	461a      	mov	r2, r3
 800046c:	1d39      	adds	r1, r7, #4
 800046e:	2300      	movs	r3, #0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2368      	movs	r3, #104	; 0x68
 8000474:	4813      	ldr	r0, [pc, #76]	; (80004c4 <main+0x124>)
 8000476:	f000 fd6f 	bl	8000f58 <I2C_MasterReceiveDataIT>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f2      	bne.n	8000466 <main+0xc6>
		RxCompleteFlag = RESET;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <main+0x12c>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
		while(RxCompleteFlag == SET) {}
 8000486:	bf00      	nop
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <main+0x12c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d0fb      	beq.n	8000488 <main+0xe8>

		RxBuffer[data_length+1] = '\0';
 8000490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000494:	3301      	adds	r3, #1
 8000496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800049a:	4413      	add	r3, r2
 800049c:	2200      	movs	r2, #0
 800049e:	f803 2c24 	strb.w	r2, [r3, #-36]
		printf("The message is %s\n", RxBuffer);
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	480a      	ldr	r0, [pc, #40]	; (80004d0 <main+0x130>)
 80004a8:	f001 f936 	bl	8001718 <iprintf>
		RxCompleteFlag = RESET;
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <main+0x12c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 80004b2:	e799      	b.n	80003e8 <main+0x48>
 80004b4:	08002b10 	.word	0x08002b10
 80004b8:	40005400 	.word	0x40005400
 80004bc:	40020800 	.word	0x40020800
 80004c0:	0007a120 	.word	0x0007a120
 80004c4:	20000144 	.word	0x20000144
 80004c8:	08002b28 	.word	0x08002b28
 80004cc:	20000088 	.word	0x20000088
 80004d0:	08002b44 	.word	0x08002b44

080004d4 <I2C1_EV_IRQHandler>:
	}

	return 0;
}
void I2C1_EV_IRQHandler(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <I2C1_EV_IRQHandler+0x10>)
 80004da:	f000 fe09 	bl	80010f0 <I2C_EV_IRQHandling>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000144 	.word	0x20000144

080004e8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <I2C1_ER_IRQHandler+0x10>)
 80004ee:	f000 fec5 	bl	800127c <I2C_ER_IRQHandling>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000144 	.word	0x20000144

080004fc <I2C_ApplicationEventCallback>:

// handle the events caused the by driver as described by the application events macros
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
	if (AppEv == I2C_EV_TX_CMPLT) {
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d103      	bne.n	8000516 <I2C_ApplicationEventCallback+0x1a>
		printf("Tx is completed\n");
 800050e:	4835      	ldr	r0, [pc, #212]	; (80005e4 <I2C_ApplicationEventCallback+0xe8>)
 8000510:	f001 f976 	bl	8001800 <puts>
	} else if (AppEv == I2C_ERROR_TIMEOUT) {
		printf("Error: TIMEOUT Error\n");
		I2C_CloseSendData(pI2CHandle);
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
	}
}
 8000514:	e062      	b.n	80005dc <I2C_ApplicationEventCallback+0xe0>
	} else if (AppEv == I2C_EV_RX_CMPLT) {
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d106      	bne.n	800052a <I2C_ApplicationEventCallback+0x2e>
		printf("Rx is completed\n");
 800051c:	4832      	ldr	r0, [pc, #200]	; (80005e8 <I2C_ApplicationEventCallback+0xec>)
 800051e:	f001 f96f 	bl	8001800 <puts>
		RxCompleteFlag = SET;
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <I2C_ApplicationEventCallback+0xf0>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
}
 8000528:	e058      	b.n	80005dc <I2C_ApplicationEventCallback+0xe0>
	} else if (AppEv == I2C_EV_STOP) {
 800052a:	78fb      	ldrb	r3, [r7, #3]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d10b      	bne.n	8000548 <I2C_ApplicationEventCallback+0x4c>
		printf("STOP bit cleared\n");
 8000530:	482f      	ldr	r0, [pc, #188]	; (80005f0 <I2C_ApplicationEventCallback+0xf4>)
 8000532:	f001 f965 	bl	8001800 <puts>
		I2C_CloseSendData(pI2CHandle);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 ff62 	bl	8001400 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 ff4d 	bl	80013e0 <I2C_GenerateStopCondition>
}
 8000546:	e049      	b.n	80005dc <I2C_ApplicationEventCallback+0xe0>
	} else if (AppEv == I2C_ERROR_AF) {
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b05      	cmp	r3, #5
 800054c:	d10b      	bne.n	8000566 <I2C_ApplicationEventCallback+0x6a>
		printf("Error: ACK failure\n");
 800054e:	4829      	ldr	r0, [pc, #164]	; (80005f4 <I2C_ApplicationEventCallback+0xf8>)
 8000550:	f001 f956 	bl	8001800 <puts>
		I2C_CloseSendData(pI2CHandle);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 ff53 	bl	8001400 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ff3e 	bl	80013e0 <I2C_GenerateStopCondition>
		while(1);
 8000564:	e7fe      	b.n	8000564 <I2C_ApplicationEventCallback+0x68>
	} else if (AppEv == I2C_ERROR_BERR) {
 8000566:	78fb      	ldrb	r3, [r7, #3]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d10b      	bne.n	8000584 <I2C_ApplicationEventCallback+0x88>
		printf("Error: Bus Error\n");
 800056c:	4822      	ldr	r0, [pc, #136]	; (80005f8 <I2C_ApplicationEventCallback+0xfc>)
 800056e:	f001 f947 	bl	8001800 <puts>
		I2C_CloseSendData(pI2CHandle);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 ff44 	bl	8001400 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 ff2f 	bl	80013e0 <I2C_GenerateStopCondition>
}
 8000582:	e02b      	b.n	80005dc <I2C_ApplicationEventCallback+0xe0>
	} else if (AppEv == I2C_ERROR_ARLO) {
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b04      	cmp	r3, #4
 8000588:	d10b      	bne.n	80005a2 <I2C_ApplicationEventCallback+0xa6>
		printf("Error: ARLO Error\n");
 800058a:	481c      	ldr	r0, [pc, #112]	; (80005fc <I2C_ApplicationEventCallback+0x100>)
 800058c:	f001 f938 	bl	8001800 <puts>
		I2C_CloseSendData(pI2CHandle);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 ff35 	bl	8001400 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 ff20 	bl	80013e0 <I2C_GenerateStopCondition>
}
 80005a0:	e01c      	b.n	80005dc <I2C_ApplicationEventCallback+0xe0>
	} else if (AppEv == I2C_ERROR_OVR) {
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	2b06      	cmp	r3, #6
 80005a6:	d10b      	bne.n	80005c0 <I2C_ApplicationEventCallback+0xc4>
		printf("Error: OVR Error\n");
 80005a8:	4815      	ldr	r0, [pc, #84]	; (8000600 <I2C_ApplicationEventCallback+0x104>)
 80005aa:	f001 f929 	bl	8001800 <puts>
		I2C_CloseSendData(pI2CHandle);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 ff26 	bl	8001400 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff11 	bl	80013e0 <I2C_GenerateStopCondition>
}
 80005be:	e00d      	b.n	80005dc <I2C_ApplicationEventCallback+0xe0>
	} else if (AppEv == I2C_ERROR_TIMEOUT) {
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b07      	cmp	r3, #7
 80005c4:	d10a      	bne.n	80005dc <I2C_ApplicationEventCallback+0xe0>
		printf("Error: TIMEOUT Error\n");
 80005c6:	480f      	ldr	r0, [pc, #60]	; (8000604 <I2C_ApplicationEventCallback+0x108>)
 80005c8:	f001 f91a 	bl	8001800 <puts>
		I2C_CloseSendData(pI2CHandle);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 ff17 	bl	8001400 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 ff02 	bl	80013e0 <I2C_GenerateStopCondition>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08002b58 	.word	0x08002b58
 80005e8:	08002b68 	.word	0x08002b68
 80005ec:	20000088 	.word	0x20000088
 80005f0:	08002b78 	.word	0x08002b78
 80005f4:	08002b8c 	.word	0x08002b8c
 80005f8:	08002ba0 	.word	0x08002ba0
 80005fc:	08002bb4 	.word	0x08002bb4
 8000600:	08002bc8 	.word	0x08002bc8
 8000604:	08002bdc 	.word	0x08002bdc

08000608 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <_sbrk+0x50>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x16>
		heap_end = &end;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <_sbrk+0x50>)
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <_sbrk+0x54>)
 800061c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <_sbrk+0x50>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <_sbrk+0x50>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	466a      	mov	r2, sp
 800062e:	4293      	cmp	r3, r2
 8000630:	d907      	bls.n	8000642 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000632:	f001 f83f 	bl	80016b4 <__errno>
 8000636:	4602      	mov	r2, r0
 8000638:	230c      	movs	r3, #12
 800063a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	e006      	b.n	8000650 <_sbrk+0x48>
	}

	heap_end += incr;
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <_sbrk+0x50>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a03      	ldr	r2, [pc, #12]	; (8000658 <_sbrk+0x50>)
 800064c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000008c 	.word	0x2000008c
 800065c:	20000168 	.word	0x20000168

08000660 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d157      	bne.n	8000722 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a55      	ldr	r2, [pc, #340]	; (80007cc <GPIO_PeriClockControl+0x16c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a54      	ldr	r2, [pc, #336]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 8000686:	e09b      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a52      	ldr	r2, [pc, #328]	; (80007d4 <GPIO_PeriClockControl+0x174>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000690:	4b4f      	ldr	r3, [pc, #316]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a4e      	ldr	r2, [pc, #312]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069c:	e090      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a4d      	ldr	r2, [pc, #308]	; (80007d8 <GPIO_PeriClockControl+0x178>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 80006a6:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a49      	ldr	r2, [pc, #292]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b2:	e085      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a49      	ldr	r2, [pc, #292]	; (80007dc <GPIO_PeriClockControl+0x17c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a43      	ldr	r2, [pc, #268]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c8:	e07a      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a44      	ldr	r2, [pc, #272]	; (80007e0 <GPIO_PeriClockControl+0x180>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80006d2:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a3e      	ldr	r2, [pc, #248]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006de:	e06f      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a40      	ldr	r2, [pc, #256]	; (80007e4 <GPIO_PeriClockControl+0x184>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d106      	bne.n	80006f6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 80006e8:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a38      	ldr	r2, [pc, #224]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f4:	e064      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a3b      	ldr	r2, [pc, #236]	; (80007e8 <GPIO_PeriClockControl+0x188>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d106      	bne.n	800070c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a33      	ldr	r2, [pc, #204]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070a:	e059      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a37      	ldr	r2, [pc, #220]	; (80007ec <GPIO_PeriClockControl+0x18c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d155      	bne.n	80007c0 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 800071a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000720:	e04e      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a29      	ldr	r2, [pc, #164]	; (80007cc <GPIO_PeriClockControl+0x16c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d105      	bne.n	8000736 <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000734:	e044      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <GPIO_PeriClockControl+0x174>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d105      	bne.n	800074a <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000748:	e03a      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <GPIO_PeriClockControl+0x178>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d105      	bne.n	800075e <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800075c:	e030      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <GPIO_PeriClockControl+0x17c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d105      	bne.n	8000772 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000770:	e026      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <GPIO_PeriClockControl+0x180>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d105      	bne.n	8000786 <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000784:	e01c      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <GPIO_PeriClockControl+0x184>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d105      	bne.n	800079a <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000798:	e012      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <GPIO_PeriClockControl+0x188>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d105      	bne.n	80007ae <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80007ac:	e008      	b.n	80007c0 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <GPIO_PeriClockControl+0x18c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d104      	bne.n	80007c0 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <GPIO_PeriClockControl+0x170>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40021400 	.word	0x40021400
 80007e8:	40021800 	.word	0x40021800
 80007ec:	40021c00 	.word	0x40021c00

080007f0 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff2c 	bl	8000660 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	795b      	ldrb	r3, [r3, #5]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d822      	bhi.n	8000856 <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	795b      	ldrb	r3, [r3, #5]
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2103      	movs	r1, #3
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	400a      	ands	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e0c3      	b.n	80009de <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	2b04      	cmp	r3, #4
 800085c:	d117      	bne.n	800088e <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085e:	4b4a      	ldr	r3, [pc, #296]	; (8000988 <GPIO_Init+0x198>)
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	7912      	ldrb	r2, [r2, #4]
 8000866:	4611      	mov	r1, r2
 8000868:	2201      	movs	r2, #1
 800086a:	408a      	lsls	r2, r1
 800086c:	4611      	mov	r1, r2
 800086e:	4a46      	ldr	r2, [pc, #280]	; (8000988 <GPIO_Init+0x198>)
 8000870:	430b      	orrs	r3, r1
 8000872:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000874:	4b44      	ldr	r3, [pc, #272]	; (8000988 <GPIO_Init+0x198>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	7912      	ldrb	r2, [r2, #4]
 800087c:	4611      	mov	r1, r2
 800087e:	2201      	movs	r2, #1
 8000880:	408a      	lsls	r2, r1
 8000882:	43d2      	mvns	r2, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a40      	ldr	r2, [pc, #256]	; (8000988 <GPIO_Init+0x198>)
 8000888:	400b      	ands	r3, r1
 800088a:	6093      	str	r3, [r2, #8]
 800088c:	e036      	b.n	80008fc <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	2b05      	cmp	r3, #5
 8000894:	d117      	bne.n	80008c6 <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000896:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <GPIO_Init+0x198>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	7912      	ldrb	r2, [r2, #4]
 800089e:	4611      	mov	r1, r2
 80008a0:	2201      	movs	r2, #1
 80008a2:	408a      	lsls	r2, r1
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a38      	ldr	r2, [pc, #224]	; (8000988 <GPIO_Init+0x198>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <GPIO_Init+0x198>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	7912      	ldrb	r2, [r2, #4]
 80008b4:	4611      	mov	r1, r2
 80008b6:	2201      	movs	r2, #1
 80008b8:	408a      	lsls	r2, r1
 80008ba:	43d2      	mvns	r2, r2
 80008bc:	4611      	mov	r1, r2
 80008be:	4a32      	ldr	r2, [pc, #200]	; (8000988 <GPIO_Init+0x198>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	60d3      	str	r3, [r2, #12]
 80008c4:	e01a      	b.n	80008fc <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	795b      	ldrb	r3, [r3, #5]
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d116      	bne.n	80008fc <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <GPIO_Init+0x198>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	7912      	ldrb	r2, [r2, #4]
 80008d6:	4611      	mov	r1, r2
 80008d8:	2201      	movs	r2, #1
 80008da:	408a      	lsls	r2, r1
 80008dc:	4611      	mov	r1, r2
 80008de:	4a2a      	ldr	r2, [pc, #168]	; (8000988 <GPIO_Init+0x198>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <GPIO_Init+0x198>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	7912      	ldrb	r2, [r2, #4]
 80008ec:	4611      	mov	r1, r2
 80008ee:	2201      	movs	r2, #1
 80008f0:	408a      	lsls	r2, r1
 80008f2:	43d2      	mvns	r2, r2
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a24      	ldr	r2, [pc, #144]	; (8000988 <GPIO_Init+0x198>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <GPIO_Init+0x19c>)
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	3302      	adds	r3, #2
 8000914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	491c      	ldr	r1, [pc, #112]	; (8000990 <GPIO_Init+0x1a0>)
 800091e:	428b      	cmp	r3, r1
 8000920:	d046      	beq.n	80009b0 <GPIO_Init+0x1c0>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	491b      	ldr	r1, [pc, #108]	; (8000994 <GPIO_Init+0x1a4>)
 8000928:	428b      	cmp	r3, r1
 800092a:	d02b      	beq.n	8000984 <GPIO_Init+0x194>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4919      	ldr	r1, [pc, #100]	; (8000998 <GPIO_Init+0x1a8>)
 8000932:	428b      	cmp	r3, r1
 8000934:	d024      	beq.n	8000980 <GPIO_Init+0x190>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4918      	ldr	r1, [pc, #96]	; (800099c <GPIO_Init+0x1ac>)
 800093c:	428b      	cmp	r3, r1
 800093e:	d01d      	beq.n	800097c <GPIO_Init+0x18c>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4916      	ldr	r1, [pc, #88]	; (80009a0 <GPIO_Init+0x1b0>)
 8000946:	428b      	cmp	r3, r1
 8000948:	d016      	beq.n	8000978 <GPIO_Init+0x188>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4915      	ldr	r1, [pc, #84]	; (80009a4 <GPIO_Init+0x1b4>)
 8000950:	428b      	cmp	r3, r1
 8000952:	d00f      	beq.n	8000974 <GPIO_Init+0x184>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4913      	ldr	r1, [pc, #76]	; (80009a8 <GPIO_Init+0x1b8>)
 800095a:	428b      	cmp	r3, r1
 800095c:	d008      	beq.n	8000970 <GPIO_Init+0x180>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4912      	ldr	r1, [pc, #72]	; (80009ac <GPIO_Init+0x1bc>)
 8000964:	428b      	cmp	r3, r1
 8000966:	d101      	bne.n	800096c <GPIO_Init+0x17c>
 8000968:	2307      	movs	r3, #7
 800096a:	e022      	b.n	80009b2 <GPIO_Init+0x1c2>
 800096c:	2300      	movs	r3, #0
 800096e:	e020      	b.n	80009b2 <GPIO_Init+0x1c2>
 8000970:	2306      	movs	r3, #6
 8000972:	e01e      	b.n	80009b2 <GPIO_Init+0x1c2>
 8000974:	2305      	movs	r3, #5
 8000976:	e01c      	b.n	80009b2 <GPIO_Init+0x1c2>
 8000978:	2304      	movs	r3, #4
 800097a:	e01a      	b.n	80009b2 <GPIO_Init+0x1c2>
 800097c:	2303      	movs	r3, #3
 800097e:	e018      	b.n	80009b2 <GPIO_Init+0x1c2>
 8000980:	2302      	movs	r3, #2
 8000982:	e016      	b.n	80009b2 <GPIO_Init+0x1c2>
 8000984:	2301      	movs	r3, #1
 8000986:	e014      	b.n	80009b2 <GPIO_Init+0x1c2>
 8000988:	40013c00 	.word	0x40013c00
 800098c:	40013800 	.word	0x40013800
 8000990:	40020000 	.word	0x40020000
 8000994:	40020400 	.word	0x40020400
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40021400 	.word	0x40021400
 80009a8:	40021800 	.word	0x40021800
 80009ac:	40021c00 	.word	0x40021c00
 80009b0:	2300      	movs	r3, #0
 80009b2:	7cb9      	ldrb	r1, [r7, #18]
 80009b4:	0089      	lsls	r1, r1, #2
 80009b6:	408b      	lsls	r3, r1
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	4957      	ldr	r1, [pc, #348]	; (8000b1c <GPIO_Init+0x32c>)
 80009be:	7cfb      	ldrb	r3, [r7, #19]
 80009c0:	4002      	ands	r2, r0
 80009c2:	3302      	adds	r3, #2
 80009c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80009c8:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <GPIO_Init+0x330>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	7912      	ldrb	r2, [r2, #4]
 80009d0:	4611      	mov	r1, r2
 80009d2:	2201      	movs	r2, #1
 80009d4:	408a      	lsls	r2, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a51      	ldr	r2, [pc, #324]	; (8000b20 <GPIO_Init+0x330>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	799b      	ldrb	r3, [r3, #6]
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2103      	movs	r1, #3
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6899      	ldr	r1, [r3, #8]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	79db      	ldrb	r3, [r3, #7]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2103      	movs	r1, #3
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	400a      	ands	r2, r1
 8000a50:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68d9      	ldr	r1, [r3, #12]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7a1b      	ldrb	r3, [r3, #8]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2301      	movs	r3, #1
 8000a84:	408b      	lsls	r3, r1
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	400a      	ands	r2, r1
 8000a90:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6859      	ldr	r1, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	795b      	ldrb	r3, [r3, #5]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d132      	bne.n	8000b14 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4011      	ands	r1, r2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	3208      	adds	r2, #8
 8000af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a5b      	ldrb	r3, [r3, #9]
 8000afa:	4619      	mov	r1, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4311      	orrs	r1, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40013c00 	.word	0x40013c00

08000b24 <GPIO_ReadFromInputPin>:
 * desc: reads the input pin of a GPIOx peripheral (specified by pinNumber)
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: 2 byte pin register data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	uint8_t out;
	out = (uint8_t)((pGPIOx->IDR >> pinNumber) & 1);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691a      	ldr	r2, [r3, #16]
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
	return out;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <RCC_GetPLLOutputClock>:
 * RCC Get PLL Output Clock
 * desc: gets the pll output clock
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPLLOutputClock() {
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
	 * Definitions:
	 * 	PLLP = main PLL division factor for main system clock
	 * 	PLLN = main PLL multiplication factor for VCO
	 * 	PLLM = division factor for the main PLL input clock
	 */
	uint8_t pll_div_factors[4] = {2, 4, 6, 8};
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <RCC_GetPLLOutputClock+0x88>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	607b      	str	r3, [r7, #4]

	uint32_t clk_src, clk_vco, plln, clk_pll = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
	uint8_t pllp, pllm = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	75fb      	strb	r3, [r7, #23]
	uint8_t temp = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	75bb      	strb	r3, [r7, #22]

	temp = (RCC->PLLCFGR << 22) & 1;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <RCC_GetPLLOutputClock+0x8c>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75bb      	strb	r3, [r7, #22]
	if (temp) {
 8000b70:	7dbb      	ldrb	r3, [r7, #22]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <RCC_GetPLLOutputClock+0x2c>
		// HSI clock selected as PLL
		clk_src = 16000000;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <RCC_GetPLLOutputClock+0x90>)
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	e001      	b.n	8000b80 <RCC_GetPLLOutputClock+0x30>
	} else {
		// HSE clock selected as PLL
		clk_src = 8000000;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <RCC_GetPLLOutputClock+0x94>)
 8000b7e:	61fb      	str	r3, [r7, #28]
	}

	plln = (RCC->PLLCFGR << 6) & 0x1FF;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <RCC_GetPLLOutputClock+0x8c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b8a:	613b      	str	r3, [r7, #16]
	pllm = (RCC->PLLCFGR << 0) & 0x3F;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <RCC_GetPLLOutputClock+0x8c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b96:	75fb      	strb	r3, [r7, #23]

	clk_vco = clk_src * (plln / pllm);
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	60fb      	str	r3, [r7, #12]

	temp = (RCC->PLLCFGR << 16) & 0x3;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <RCC_GetPLLOutputClock+0x8c>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2300      	movs	r3, #0
 8000bae:	75bb      	strb	r3, [r7, #22]
	pllp = pll_div_factors[temp];
 8000bb0:	7dbb      	ldrb	r3, [r7, #22]
 8000bb2:	f107 0220 	add.w	r2, r7, #32
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bbc:	72fb      	strb	r3, [r7, #11]
	clk_pll = clk_vco / pllp;
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	61bb      	str	r3, [r7, #24]

	return clk_pll;
 8000bc8:	69bb      	ldr	r3, [r7, #24]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	08002bf4 	.word	0x08002bf4
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	00f42400 	.word	0x00f42400
 8000be4:	007a1200 	.word	0x007a1200

08000be8 <RCC_GetPCLK1Value>:
 * RCC Get PLL PCLK1 Value
 * desc: gets the pclk value from the HSI oscillator. Contains unused capabilities to get PCLK from HSE or PLL
 * input1: none
 * output: a pll clock value to be used as a PCLK
 */
uint32_t RCC_GetPCLK1Value(void) {
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
	uint32_t clk_sys, clk_ahb = 0, clk_pclk1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t clk_apb = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t temp = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t hpre_div_factors[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <RCC_GetPCLK1Value+0xec>)
 8000c00:	f107 0408 	add.w	r4, r7, #8
 8000c04:	461d      	mov	r5, r3
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ppre1_div_factors[4] = {2, 4, 8, 16};
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <RCC_GetPCLK1Value+0xf0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	607b      	str	r3, [r7, #4]

	temp = (RCC->CFGR << 2) & 0x3;
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <RCC_GetPCLK1Value+0xf4>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (temp == 0) {
 8000c2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <RCC_GetPCLK1Value+0x50>
		// HSI oscillator
		clk_sys = 16000000;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <RCC_GetPCLK1Value+0xf8>)
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
 8000c36:	e00d      	b.n	8000c54 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 1) {
 8000c38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d102      	bne.n	8000c46 <RCC_GetPCLK1Value+0x5e>
		// HSE oscillator
		clk_sys = 8000000;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <RCC_GetPCLK1Value+0xfc>)
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
 8000c44:	e006      	b.n	8000c54 <RCC_GetPCLK1Value+0x6c>
	} else if (temp == 2) {
 8000c46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d102      	bne.n	8000c54 <RCC_GetPCLK1Value+0x6c>
		// PLL system clock
		clk_sys = RCC_GetPLLOutputClock();
 8000c4e:	f7ff ff7f 	bl	8000b50 <RCC_GetPLLOutputClock>
 8000c52:	6378      	str	r0, [r7, #52]	; 0x34
	}

	temp = (RCC->CFGR << 4) & 0xF;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <RCC_GetPCLK1Value+0xf4>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 8) clk_ahb = 1;
 8000c66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d802      	bhi.n	8000c74 <RCC_GetPCLK1Value+0x8c>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
 8000c72:	e009      	b.n	8000c88 <RCC_GetPCLK1Value+0xa0>
	else clk_ahb = hpre_div_factors[temp - 8];
 8000c74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c80:	4413      	add	r3, r2
 8000c82:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30

	temp = (RCC->CFGR << 10) & 0x7;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <RCC_GetPCLK1Value+0xf4>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (temp < 4) clk_apb = 1;
 8000c92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d803      	bhi.n	8000ca2 <RCC_GetPCLK1Value+0xba>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ca0:	e009      	b.n	8000cb6 <RCC_GetPCLK1Value+0xce>
	else clk_apb = ppre1_div_factors[temp - 4];
 8000ca2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000cac:	4413      	add	r3, r2
 8000cae:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	clk_pclk1 = (clk_sys / clk_ahb) / clk_apb;
 8000cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
	return clk_pclk1;
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08002bf8 	.word	0x08002bf8
 8000cd8:	08002c18 	.word	0x08002c18
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	00f42400 	.word	0x00f42400
 8000ce4:	007a1200 	.word	0x007a1200

08000ce8 <I2C_PeriClockControl>:
 * desc: enables the I2C peripheral clock for a specific I2C peripheral
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d120      	bne.n	8000d3c <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <I2C_PeriClockControl+0x9c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d106      	bne.n	8000d10 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI;
		}
	}
}
 8000d0e:	e032      	b.n	8000d76 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d106      	bne.n	8000d26 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d24:	e027      	b.n	8000d76 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <I2C_PeriClockControl+0xa8>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d123      	bne.n	8000d76 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_EN;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d3a:	e01c      	b.n	8000d76 <I2C_PeriClockControl+0x8e>
		if (pI2Cx == I2C1) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <I2C_PeriClockControl+0x9c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d105      	bne.n	8000d50 <I2C_PeriClockControl+0x68>
			I2C1_PCLK_DI;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d4e:	e012      	b.n	8000d76 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C2) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d105      	bne.n	8000d64 <I2C_PeriClockControl+0x7c>
			I2C2_PCLK_DI;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d62:	e008      	b.n	8000d76 <I2C_PeriClockControl+0x8e>
		else if (pI2Cx == I2C3) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <I2C_PeriClockControl+0xa8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d104      	bne.n	8000d76 <I2C_PeriClockControl+0x8e>
			I2C3_PCLK_DI;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40005800 	.word	0x40005800
 8000d90:	40005c00 	.word	0x40005c00

08000d94 <I2C_Init>:
 * I2C Peripheral Initialization
 * desc: initializes an I2C peripheral
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	uint32_t temp_reg = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff9e 	bl	8000ce8 <I2C_PeriClockControl>

	// Configure I2C with the peripheral clocks frequency
	// only 5 bits are valid
	temp_reg = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
	temp_reg |= RCC_GetPCLK1Value() / 1000000U;
 8000db0:	f7ff ff1a 	bl	8000be8 <RCC_GetPCLK1Value>
 8000db4:	4602      	mov	r2, r0
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <I2C_Init+0xfc>)
 8000db8:	fba3 2302 	umull	r2, r3, r3, r2
 8000dbc:	0c9b      	lsrs	r3, r3, #18
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = temp_reg & 0x3F;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dce:	605a      	str	r2, [r3, #4]

	// Specify the address of the device we are going to communicate with
	temp_reg = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
	temp_reg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7a1b      	ldrb	r3, [r3, #8]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
	temp_reg |= (1 << I2C_OAR1_BIT14);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = temp_reg;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	609a      	str	r2, [r3, #8]

	// Configure the speed of the serial clock
	uint16_t ccr_val = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	817b      	strh	r3, [r7, #10]
	temp_reg = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <I2C_Init+0x100>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d80f      	bhi.n	8000e24 <I2C_Init+0x90>
		// slow (standard) mode
		ccr_val = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e04:	f7ff fef0 	bl	8000be8 <RCC_GetPCLK1Value>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e14:	817b      	strh	r3, [r7, #10]
		temp_reg |= (ccr_val & 0xFFF);
 8000e16:	897b      	ldrh	r3, [r7, #10]
 8000e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	e00a      	b.n	8000e3a <I2C_Init+0xa6>
	} else {
		// fast mode
		temp_reg |= (1 << I2C_CCR_FS);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2a:	60fb      	str	r3, [r7, #12]
		temp_reg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7a9b      	ldrb	r3, [r3, #10]
 8000e30:	039b      	lsls	r3, r3, #14
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = temp_reg;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	61da      	str	r2, [r3, #28]


	// Configure the rise time for I2C pins through TRISE
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <I2C_Init+0x100>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d109      	bne.n	8000e60 <I2C_Init+0xcc>
		temp_reg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000e4c:	f7ff fecc 	bl	8000be8 <RCC_GetPCLK1Value>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <I2C_Init+0xfc>)
 8000e54:	fba3 2302 	umull	r2, r3, r3, r2
 8000e58:	0c9b      	lsrs	r3, r3, #18
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	e00d      	b.n	8000e7c <I2C_Init+0xe8>
	}
	else {
		temp_reg = ((RCC_GetPCLK1Value() * 300) / 1000000000U + 1);
 8000e60:	f7ff fec2 	bl	8000be8 <RCC_GetPCLK1Value>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e6a:	fb03 f302 	mul.w	r3, r3, r2
 8000e6e:	0a5b      	lsrs	r3, r3, #9
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <I2C_Init+0x104>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	09db      	lsrs	r3, r3, #7
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (temp_reg & 0x3F);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e86:	621a      	str	r2, [r3, #32]
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	000186a0 	.word	0x000186a0
 8000e98:	00044b83 	.word	0x00044b83

08000e9c <I2C_PeripheralControl>:
 * desc: enables or disables the I2C peripheral (which enables all I2C devices?)
 * input1: a pointer to an I2C peripheral addr
 * input2: an enable or disable flag
 * output: none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == ENABLE) {
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000eba:	e005      	b.n	8000ec8 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 0201 	bic.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <I2C_MasterSendDataIT>:
 * input3: the size of the message to be sent
 * input4: uint8 slave address data
 * input5: an enable/disable flag for repeated starts
 * output: none
 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len, uint8_t slave_addr, uint8_t repeated_start_flag) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	70fb      	strb	r3, [r7, #3]
	uint8_t busy_state = pI2CHandle->TxRxState;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	7f1b      	ldrb	r3, [r3, #28]
 8000ee6:	75fb      	strb	r3, [r7, #23]
	if((busy_state != I2C_STATE_BUSY_IN_TX) && (busy_state != I2C_STATE_BUSY_IN_RX)) {
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d02f      	beq.n	8000f4e <I2C_MasterSendDataIT+0x7a>
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d02c      	beq.n	8000f4e <I2C_MasterSendDataIT+0x7a>
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = len;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_STATE_BUSY_IN_TX;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DeviceAddr = slave_addr;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = repeated_start_flag;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f12:	77da      	strb	r2, [r3, #31]

		// trigger the start condition and enable the interrupts, which generates an interrupt
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fb2b 	bl	8001574 <I2C_GenerateStartCondition>
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f2c:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f3c:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f4c:	605a      	str	r2, [r3, #4]
	}
	return busy_state;
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <I2C_MasterReceiveDataIT>:
 * input3: the size of the message to be sent
 * input4: uint8 slave address data
 * input5: an enable/disable flag for repeated starts
 * output: none
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t len, uint8_t slave_addr, uint8_t repeated_start_flag) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	70fb      	strb	r3, [r7, #3]
	uint8_t busy_state = pI2CHandle->TxRxState;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	7f1b      	ldrb	r3, [r3, #28]
 8000f6a:	75fb      	strb	r3, [r7, #23]

	if((busy_state != I2C_STATE_BUSY_IN_TX) && (busy_state != I2C_STATE_BUSY_IN_RX)) {
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d033      	beq.n	8000fda <I2C_MasterReceiveDataIT+0x82>
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d030      	beq.n	8000fda <I2C_MasterReceiveDataIT+0x82>
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = len;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_STATE_BUSY_IN_RX;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2202      	movs	r2, #2
 8000f88:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = len; //Rxsize is used in the ISR code to manage the data reception
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	779a      	strb	r2, [r3, #30]
		pI2CHandle->DeviceAddr = slave_addr;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = repeated_start_flag;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f9e:	77da      	strb	r2, [r3, #31]

		// trigger the start condition and enable the interrupts, which generates an interrupt
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fae5 	bl	8001574 <I2C_GenerateStartCondition>
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fb8:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc8:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd8:	605a      	str	r2, [r3, #4]
	}
	return busy_state;
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <I2C_IRQInterruptConfig>:
 * desc: enables or disables a specific interrupt for a peripheral function
 * input1: a number describing which interrupt to enable
 * input2: an flag for disabling or enabling an NVIC reg
 * output: none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enable_flag) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	if (enable_flag == ENABLE) {
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d133      	bne.n	8001062 <I2C_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b1f      	cmp	r3, #31
 8000ffe:	d80a      	bhi.n	8001016 <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <I2C_IRQInterruptConfig+0xf4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	79fa      	ldrb	r2, [r7, #7]
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	4611      	mov	r1, r2
 800100e:	4a32      	ldr	r2, [pc, #200]	; (80010d8 <I2C_IRQInterruptConfig+0xf4>)
 8001010:	430b      	orrs	r3, r1
 8001012:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8001014:	e059      	b.n	80010ca <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b1f      	cmp	r3, #31
 800101a:	d90f      	bls.n	800103c <I2C_IRQInterruptConfig+0x58>
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b3f      	cmp	r3, #63	; 0x3f
 8001020:	d80c      	bhi.n	800103c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <I2C_IRQInterruptConfig+0xf8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	f002 021f 	and.w	r2, r2, #31
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4611      	mov	r1, r2
 8001034:	4a29      	ldr	r2, [pc, #164]	; (80010dc <I2C_IRQInterruptConfig+0xf8>)
 8001036:	430b      	orrs	r3, r1
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e046      	b.n	80010ca <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b3f      	cmp	r3, #63	; 0x3f
 8001040:	d943      	bls.n	80010ca <I2C_IRQInterruptConfig+0xe6>
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b5f      	cmp	r3, #95	; 0x5f
 8001046:	d840      	bhi.n	80010ca <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <I2C_IRQInterruptConfig+0xfc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	4611      	mov	r1, r2
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <I2C_IRQInterruptConfig+0xfc>)
 800105c:	430b      	orrs	r3, r1
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	e033      	b.n	80010ca <I2C_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b1f      	cmp	r3, #31
 8001066:	d80a      	bhi.n	800107e <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <I2C_IRQInterruptConfig+0x100>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4611      	mov	r1, r2
 8001076:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <I2C_IRQInterruptConfig+0x100>)
 8001078:	430b      	orrs	r3, r1
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	e025      	b.n	80010ca <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b1f      	cmp	r3, #31
 8001082:	d90f      	bls.n	80010a4 <I2C_IRQInterruptConfig+0xc0>
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b3f      	cmp	r3, #63	; 0x3f
 8001088:	d80c      	bhi.n	80010a4 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <I2C_IRQInterruptConfig+0x104>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	f002 021f 	and.w	r2, r2, #31
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	4611      	mov	r1, r2
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <I2C_IRQInterruptConfig+0x104>)
 800109e:	430b      	orrs	r3, r1
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e012      	b.n	80010ca <I2C_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b3f      	cmp	r3, #63	; 0x3f
 80010a8:	d90f      	bls.n	80010ca <I2C_IRQInterruptConfig+0xe6>
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b5f      	cmp	r3, #95	; 0x5f
 80010ae:	d80c      	bhi.n	80010ca <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <I2C_IRQInterruptConfig+0x108>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <I2C_IRQInterruptConfig+0x108>)
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	e7ff      	b.n	80010ca <I2C_IRQInterruptConfig+0xe6>
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000e104 	.word	0xe000e104
 80010e0:	e000e108 	.word	0xe000e108
 80010e4:	e000e180 	.word	0xe000e180
 80010e8:	e000e184 	.word	0xe000e184
 80010ec:	e000e188 	.word	0xe000e188

080010f0 <I2C_EV_IRQHandling>:
 * I2C EV IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C interrupt events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint32_t ITEVTEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001102:	613b      	str	r3, [r7, #16]
	uint32_t ITBUFEN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110e:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]

	// check SB
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by SB event
	if (ITEVTEN_val && temp) {
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01b      	beq.n	800115e <I2C_EV_IRQHandling+0x6e>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d018      	beq.n	800115e <I2C_EV_IRQHandling+0x6e>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7f1b      	ldrb	r3, [r3, #28]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f5b      	ldrb	r3, [r3, #29]
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f000 fa28 	bl	8001594 <I2C_ExecuteAddressPhaseWrite>
 8001144:	e00b      	b.n	800115e <I2C_EV_IRQHandling+0x6e>
		}
		else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7f1b      	ldrb	r3, [r3, #28]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d107      	bne.n	800115e <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DeviceAddr);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7f5b      	ldrb	r3, [r3, #29]
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f000 fa31 	bl	80015c0 <I2C_ExecuteAddressPhaseRead>
		}
	}

	// check ADDR
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the ADDR event
	if (ITEVTEN_val && temp) {
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <I2C_EV_IRQHandling+0x8c>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <I2C_EV_IRQHandling+0x8c>
		// this function will handle the case of receiving the last byte
		I2C_ClearADDRFlag(pI2CHandle);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa38 	bl	80015ec <I2C_ClearADDRFlag>
	}

	// check STOPF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the STOPF event. This will only be generated by the slave
	if (ITEVTEN_val && temp) {
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00c      	beq.n	80011a8 <I2C_EV_IRQHandling+0xb8>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d009      	beq.n	80011a8 <I2C_EV_IRQHandling+0xb8>
		// to clear stop we need to read from SR1 and write to CR1. SR1 was already read above so we will write to SR1 here
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	601a      	str	r2, [r3, #0]
		// notify application about STOP
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80011a0:	2102      	movs	r1, #2
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff f9aa 	bl	80004fc <I2C_ApplicationEventCallback>
	}

	// check BTF
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60bb      	str	r3, [r7, #8]
	// handle the interrupt generated by the BTF event. Note that this event will only be triggered
	// from a transmission
	if (ITEVTEN_val && temp) {
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d021      	beq.n	80011fe <I2C_EV_IRQHandling+0x10e>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01e      	beq.n	80011fe <I2C_EV_IRQHandling+0x10e>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7f1b      	ldrb	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d11a      	bne.n	80011fe <I2C_EV_IRQHandling+0x10e>
			if (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d013      	beq.n	80011fe <I2C_EV_IRQHandling+0x10e>
				if (pI2CHandle->TxLen == 0) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <I2C_EV_IRQHandling+0x10e>
					// Closing out an interrupt based data transmission requires 3 different steps.
					// 1. Generate the stop condition
					if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7fdb      	ldrb	r3, [r3, #31]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d104      	bne.n	80011f0 <I2C_EV_IRQHandling+0x100>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f8f8 	bl	80013e0 <I2C_GenerateStopCondition>
					// 2. Reset the handle struct
					I2C_CloseSendData(pI2CHandle);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f905 	bl	8001400 <I2C_CloseSendData>
					// 3. Notify the application that the transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff f97f 	bl	80004fc <I2C_ApplicationEventCallback>
			} else if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {}
		}
	}

	// check TxE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001208:	60bb      	str	r3, [r7, #8]
	// handle the TxE interrupt event
//	printf("TXE temp : %lu\n", temp);

	// interrupt latency delay compensation
	for (int i=0; i<100; i++) {}
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e002      	b.n	8001216 <I2C_EV_IRQHandling+0x126>
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b63      	cmp	r3, #99	; 0x63
 800121a:	ddf9      	ble.n	8001210 <I2C_EV_IRQHandling+0x120>

	if (ITEVTEN_val && ITBUFEN_val && temp) {
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00f      	beq.n	8001242 <I2C_EV_IRQHandling+0x152>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <I2C_EV_IRQHandling+0x152>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <I2C_EV_IRQHandling+0x152>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <I2C_EV_IRQHandling+0x152>
			I2C_MasterHandleTXEInterrupt(pI2CHandle);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f930 	bl	80014a2 <I2C_MasterHandleTXEInterrupt>
			// slave
		}
	}

	// check RxNE
	temp = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124c:	60bb      	str	r3, [r7, #8]
	// handle the RxNE interrupt event
	if (ITEVTEN_val && ITBUFEN_val && temp) {
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00f      	beq.n	8001274 <I2C_EV_IRQHandling+0x184>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <I2C_EV_IRQHandling+0x184>
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <I2C_EV_IRQHandling+0x184>
		// check for device mode
		if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <I2C_EV_IRQHandling+0x184>
			I2C_MasterHandleRNXEInterrupt(pI2CHandle);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f935 	bl	80014de <I2C_MasterHandleRNXEInterrupt>
		}
		else {
			// slave
		}
	}
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <I2C_ER_IRQHandling>:
 * I2C ER IRQ Handling
 * desc: Interrupt handling for both master and slave modes of a device. Handles all I2C error events
 * input1: a pointer to an I2C handle struct
 * output: none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	// for error handling clear the status bit and inform the application
	uint8_t ITERREN_val = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITERREN);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73bb      	strb	r3, [r7, #14]

	// check BERR
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BERR);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	b2da      	uxtb	r2, r3
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <I2C_ER_IRQHandling+0x4c>
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00b      	beq.n	80012c8 <I2C_ER_IRQHandling+0x4c>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012be:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 80012c0:	2103      	movs	r1, #3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f91a 	bl	80004fc <I2C_ApplicationEventCallback>
	}
	// check ARLO
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ARLO);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00e      	beq.n	80012fe <I2C_ER_IRQHandling+0x82>
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <I2C_ER_IRQHandling+0x82>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012f4:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 80012f6:	2104      	movs	r1, #4
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f8ff 	bl	80004fc <I2C_ApplicationEventCallback>
	}
	// check AF, ack failure
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_AF);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001308:	b2da      	uxtb	r2, r3
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	4313      	orrs	r3, r2
 800130e:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00e      	beq.n	8001334 <I2C_ER_IRQHandling+0xb8>
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <I2C_ER_IRQHandling+0xb8>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800132a:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 800132c:	2105      	movs	r1, #5
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff f8e4 	bl	80004fc <I2C_ApplicationEventCallback>
	}
	// check OVR, overrun/underrun
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_OVR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	b2da      	uxtb	r2, r3
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	4313      	orrs	r3, r2
 8001344:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00e      	beq.n	800136a <I2C_ER_IRQHandling+0xee>
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <I2C_ER_IRQHandling+0xee>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001360:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 8001362:	2106      	movs	r1, #6
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff f8c9 	bl	80004fc <I2C_ApplicationEventCallback>
	}
	// check TIMEOUT
	temp |= pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TIMEOUT);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001374:	b2da      	uxtb	r2, r3
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	4313      	orrs	r3, r2
 800137a:	73bb      	strb	r3, [r7, #14]
	// handle the interrupt generated by SB event
	if (ITERREN_val && temp) {
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00e      	beq.n	80013a0 <I2C_ER_IRQHandling+0x124>
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <I2C_ER_IRQHandling+0x124>
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001396:	615a      	str	r2, [r3, #20]
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 8001398:	2107      	movs	r1, #7
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff f8ae 	bl	80004fc <I2C_ApplicationEventCallback>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <I2C_ManageAcking>:
 * desc: handles the enabling/disabling of I2C ACKing
 * input1: I2C register pointer mapped to an I2C peripheral
 * input2: a flag for enabling/disabling
 * output: none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t enable_flag) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
	if(enable_flag == I2C_ACK_ENABLE) {
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d106      	bne.n	80013c8 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
	}else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80013c6:	e005      	b.n	80013d4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <I2C_GenerateStopCondition>:
 * I2C Generate Stop Condition
 * desc: helper function that generates a stop condition
 * input1: pointer to the I2C peripheral addr
 * output: none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <I2C_CloseSendData>:
 * I2C Close Send Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle) {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001416:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001426:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <I2C_CloseReceiveData>:
 * I2C Close Receive Data
 * desc: resets the IRQ enables and clears the I2C handle data for the next data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle) {
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800145c:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800146c:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	779a      	strb	r2, [r3, #30]
	if (pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7a5b      	ldrb	r3, [r3, #9]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2101      	movs	r1, #1
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff87 	bl	80013a8 <I2C_ManageAcking>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <I2C_MasterHandleTXEInterrupt>:
 * I2C Master Handle TXE Interrupt
 * desc: interrupt function that handles I2C data transmission
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle) {
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	if (pI2CHandle->TxLen > 0) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00f      	beq.n	80014d2 <I2C_MasterHandleTXEInterrupt+0x30>
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	611a      	str	r2, [r3, #16]
		pI2CHandle->pTxBuffer++;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen--;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	615a      	str	r2, [r3, #20]
	}
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <I2C_MasterHandleRNXEInterrupt>:
 * I2C Master Handle RNXE Interrupt
 * desc: interrupt function that handles I2C data reception
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_MasterHandleRNXEInterrupt(I2C_Handle_t *pI2CHandle) {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	// two cases: data reception and the last byte data reception
	if (pI2CHandle->RxSize == 1) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7f9b      	ldrb	r3, [r3, #30]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <I2C_MasterHandleRNXEInterrupt+0x28>
			// the clear address function will handle the addr clearing before this function is called
			// so ack disable is not required here
	//		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
			*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
			pI2CHandle->RxLen--;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
	}
	if (pI2CHandle->RxSize > 1) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7f9b      	ldrb	r3, [r3, #30]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d91a      	bls.n	8001544 <I2C_MasterHandleRNXEInterrupt+0x66>
		if (pI2CHandle->RxLen == 2) I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d105      	bne.n	8001522 <I2C_MasterHandleRNXEInterrupt+0x44>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff43 	bl	80013a8 <I2C_ManageAcking>
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	1e5a      	subs	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
	}
	// if we are at the end of the transmission, close the transmission
	if (pI2CHandle->RxLen == 0) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <I2C_MasterHandleRNXEInterrupt+0x8e>
		// generate stop
		if (pI2CHandle->Sr == I2C_REPEATED_START_DISABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7fdb      	ldrb	r3, [r3, #31]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <I2C_MasterHandleRNXEInterrupt+0x80>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff41 	bl	80013e0 <I2C_GenerateStopCondition>
		// close I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff71 	bl	8001446 <I2C_CloseReceiveData>
		// notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8001564:	2101      	movs	r1, #1
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7fe ffc8 	bl	80004fc <I2C_ApplicationEventCallback>
	}
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C_GenerateStartCondition>:
 * I2C Generate Start Condition
 * desc: helper function that generates a start condition
 * input1: pointer to the I2C peripheral addr
 * output: none
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	601a      	str	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <I2C_ExecuteAddressPhaseWrite>:
 * desc: helper function that transmits the slave addr followed by a write command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	70fb      	strb	r3, [r7, #3]
	slave_addr &= ~(1);
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	611a      	str	r2, [r3, #16]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <I2C_ExecuteAddressPhaseRead>:
 * desc: helper function that transmits the slave addr followed by a read command
 * input1: pointer to the I2C peripheral addr
 * input2: the slave device addr
 * output: none
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slave_addr) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
	// message is 8 bits which includes a slave addr and an instruction (r/w)
	slave_addr = slave_addr << 1;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	70fb      	strb	r3, [r7, #3]
	slave_addr |= 1;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slave_addr;
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	611a      	str	r2, [r3, #16]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <I2C_ClearADDRFlag>:
 * I2C Clear Address Flag
 * desc: helper function that clears the ADDR bit in the in the SR1 reg
 * input1: pointer to an I2C handle struct
 * output: none
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint32_t clear_read = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
	// check if device is master or slave mode
	// master mode conditional
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01f      	beq.n	8001646 <I2C_ClearADDRFlag+0x5a>
		if (pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7f1b      	ldrb	r3, [r3, #28]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d112      	bne.n	8001634 <I2C_ClearADDRFlag+0x48>
			if (pI2CHandle->RxSize == 1) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f9b      	ldrb	r3, [r3, #30]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d11f      	bne.n	8001656 <I2C_ClearADDRFlag+0x6a>
				// disable acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fec3 	bl	80013a8 <I2C_ManageAcking>
				// then clear addr
				// SR->ADDR is cleared by reading SR1 and SR2
				clear_read = pI2CHandle->pI2Cx->SR1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	60fb      	str	r3, [r7, #12]
				clear_read = pI2CHandle->pI2Cx->SR2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	60fb      	str	r3, [r7, #12]
	} else { // slave mode conditional
		clear_read = pI2CHandle->pI2Cx->SR1;
		clear_read = pI2CHandle->pI2Cx->SR2;
		(void)clear_read;
	}
}
 8001632:	e010      	b.n	8001656 <I2C_ClearADDRFlag+0x6a>
			clear_read = pI2CHandle->pI2Cx->SR1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	60fb      	str	r3, [r7, #12]
			clear_read = pI2CHandle->pI2Cx->SR2;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	60fb      	str	r3, [r7, #12]
}
 8001644:	e007      	b.n	8001656 <I2C_ClearADDRFlag+0x6a>
		clear_read = pI2CHandle->pI2Cx->SR1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	60fb      	str	r3, [r7, #12]
		clear_read = pI2CHandle->pI2Cx->SR2;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	60fb      	str	r3, [r7, #12]
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001662:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800168a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800168e:	f000 f817 	bl	80016c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7fe fe85 	bl	80003a0 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   r0, =_estack
 8001698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016a4:	08002cd8 	.word	0x08002cd8
  ldr r2, =_sbss
 80016a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016ac:	20000168 	.word	0x20000168

080016b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>
	...

080016b4 <__errno>:
 80016b4:	4b01      	ldr	r3, [pc, #4]	; (80016bc <__errno+0x8>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4e0d      	ldr	r6, [pc, #52]	; (80016f8 <__libc_init_array+0x38>)
 80016c4:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c6:	1ba4      	subs	r4, r4, r6
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	2500      	movs	r5, #0
 80016cc:	42a5      	cmp	r5, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	4e0b      	ldr	r6, [pc, #44]	; (8001700 <__libc_init_array+0x40>)
 80016d2:	4c0c      	ldr	r4, [pc, #48]	; (8001704 <__libc_init_array+0x44>)
 80016d4:	f001 fa10 	bl	8002af8 <_init>
 80016d8:	1ba4      	subs	r4, r4, r6
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	2500      	movs	r5, #0
 80016de:	42a5      	cmp	r5, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016e8:	4798      	blx	r3
 80016ea:	3501      	adds	r5, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f2:	4798      	blx	r3
 80016f4:	3501      	adds	r5, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08002cd0 	.word	0x08002cd0
 80016fc:	08002cd0 	.word	0x08002cd0
 8001700:	08002cd0 	.word	0x08002cd0
 8001704:	08002cd4 	.word	0x08002cd4

08001708 <memset>:
 8001708:	4402      	add	r2, r0
 800170a:	4603      	mov	r3, r0
 800170c:	4293      	cmp	r3, r2
 800170e:	d100      	bne.n	8001712 <memset+0xa>
 8001710:	4770      	bx	lr
 8001712:	f803 1b01 	strb.w	r1, [r3], #1
 8001716:	e7f9      	b.n	800170c <memset+0x4>

08001718 <iprintf>:
 8001718:	b40f      	push	{r0, r1, r2, r3}
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <iprintf+0x2c>)
 800171c:	b513      	push	{r0, r1, r4, lr}
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	b124      	cbz	r4, 800172c <iprintf+0x14>
 8001722:	69a3      	ldr	r3, [r4, #24]
 8001724:	b913      	cbnz	r3, 800172c <iprintf+0x14>
 8001726:	4620      	mov	r0, r4
 8001728:	f000 fa22 	bl	8001b70 <__sinit>
 800172c:	ab05      	add	r3, sp, #20
 800172e:	9a04      	ldr	r2, [sp, #16]
 8001730:	68a1      	ldr	r1, [r4, #8]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	4620      	mov	r0, r4
 8001736:	f000 fbdb 	bl	8001ef0 <_vfiprintf_r>
 800173a:	b002      	add	sp, #8
 800173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001740:	b004      	add	sp, #16
 8001742:	4770      	bx	lr
 8001744:	20000000 	.word	0x20000000

08001748 <_puts_r>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	460e      	mov	r6, r1
 800174c:	4605      	mov	r5, r0
 800174e:	b118      	cbz	r0, 8001758 <_puts_r+0x10>
 8001750:	6983      	ldr	r3, [r0, #24]
 8001752:	b90b      	cbnz	r3, 8001758 <_puts_r+0x10>
 8001754:	f000 fa0c 	bl	8001b70 <__sinit>
 8001758:	69ab      	ldr	r3, [r5, #24]
 800175a:	68ac      	ldr	r4, [r5, #8]
 800175c:	b913      	cbnz	r3, 8001764 <_puts_r+0x1c>
 800175e:	4628      	mov	r0, r5
 8001760:	f000 fa06 	bl	8001b70 <__sinit>
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <_puts_r+0xac>)
 8001766:	429c      	cmp	r4, r3
 8001768:	d117      	bne.n	800179a <_puts_r+0x52>
 800176a:	686c      	ldr	r4, [r5, #4]
 800176c:	89a3      	ldrh	r3, [r4, #12]
 800176e:	071b      	lsls	r3, r3, #28
 8001770:	d51d      	bpl.n	80017ae <_puts_r+0x66>
 8001772:	6923      	ldr	r3, [r4, #16]
 8001774:	b1db      	cbz	r3, 80017ae <_puts_r+0x66>
 8001776:	3e01      	subs	r6, #1
 8001778:	68a3      	ldr	r3, [r4, #8]
 800177a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800177e:	3b01      	subs	r3, #1
 8001780:	60a3      	str	r3, [r4, #8]
 8001782:	b9e9      	cbnz	r1, 80017c0 <_puts_r+0x78>
 8001784:	2b00      	cmp	r3, #0
 8001786:	da2e      	bge.n	80017e6 <_puts_r+0x9e>
 8001788:	4622      	mov	r2, r4
 800178a:	210a      	movs	r1, #10
 800178c:	4628      	mov	r0, r5
 800178e:	f000 f83f 	bl	8001810 <__swbuf_r>
 8001792:	3001      	adds	r0, #1
 8001794:	d011      	beq.n	80017ba <_puts_r+0x72>
 8001796:	200a      	movs	r0, #10
 8001798:	e011      	b.n	80017be <_puts_r+0x76>
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <_puts_r+0xb0>)
 800179c:	429c      	cmp	r4, r3
 800179e:	d101      	bne.n	80017a4 <_puts_r+0x5c>
 80017a0:	68ac      	ldr	r4, [r5, #8]
 80017a2:	e7e3      	b.n	800176c <_puts_r+0x24>
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_puts_r+0xb4>)
 80017a6:	429c      	cmp	r4, r3
 80017a8:	bf08      	it	eq
 80017aa:	68ec      	ldreq	r4, [r5, #12]
 80017ac:	e7de      	b.n	800176c <_puts_r+0x24>
 80017ae:	4621      	mov	r1, r4
 80017b0:	4628      	mov	r0, r5
 80017b2:	f000 f87f 	bl	80018b4 <__swsetup_r>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d0dd      	beq.n	8001776 <_puts_r+0x2e>
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da04      	bge.n	80017ce <_puts_r+0x86>
 80017c4:	69a2      	ldr	r2, [r4, #24]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dc06      	bgt.n	80017d8 <_puts_r+0x90>
 80017ca:	290a      	cmp	r1, #10
 80017cc:	d004      	beq.n	80017d8 <_puts_r+0x90>
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	6022      	str	r2, [r4, #0]
 80017d4:	7019      	strb	r1, [r3, #0]
 80017d6:	e7cf      	b.n	8001778 <_puts_r+0x30>
 80017d8:	4622      	mov	r2, r4
 80017da:	4628      	mov	r0, r5
 80017dc:	f000 f818 	bl	8001810 <__swbuf_r>
 80017e0:	3001      	adds	r0, #1
 80017e2:	d1c9      	bne.n	8001778 <_puts_r+0x30>
 80017e4:	e7e9      	b.n	80017ba <_puts_r+0x72>
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	200a      	movs	r0, #10
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	6022      	str	r2, [r4, #0]
 80017ee:	7018      	strb	r0, [r3, #0]
 80017f0:	e7e5      	b.n	80017be <_puts_r+0x76>
 80017f2:	bf00      	nop
 80017f4:	08002c40 	.word	0x08002c40
 80017f8:	08002c60 	.word	0x08002c60
 80017fc:	08002c20 	.word	0x08002c20

08001800 <puts>:
 8001800:	4b02      	ldr	r3, [pc, #8]	; (800180c <puts+0xc>)
 8001802:	4601      	mov	r1, r0
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	f7ff bf9f 	b.w	8001748 <_puts_r>
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000

08001810 <__swbuf_r>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	460e      	mov	r6, r1
 8001814:	4614      	mov	r4, r2
 8001816:	4605      	mov	r5, r0
 8001818:	b118      	cbz	r0, 8001822 <__swbuf_r+0x12>
 800181a:	6983      	ldr	r3, [r0, #24]
 800181c:	b90b      	cbnz	r3, 8001822 <__swbuf_r+0x12>
 800181e:	f000 f9a7 	bl	8001b70 <__sinit>
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <__swbuf_r+0x98>)
 8001824:	429c      	cmp	r4, r3
 8001826:	d12a      	bne.n	800187e <__swbuf_r+0x6e>
 8001828:	686c      	ldr	r4, [r5, #4]
 800182a:	69a3      	ldr	r3, [r4, #24]
 800182c:	60a3      	str	r3, [r4, #8]
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	071a      	lsls	r2, r3, #28
 8001832:	d52e      	bpl.n	8001892 <__swbuf_r+0x82>
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	b363      	cbz	r3, 8001892 <__swbuf_r+0x82>
 8001838:	6923      	ldr	r3, [r4, #16]
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	1ac0      	subs	r0, r0, r3
 800183e:	6963      	ldr	r3, [r4, #20]
 8001840:	b2f6      	uxtb	r6, r6
 8001842:	4283      	cmp	r3, r0
 8001844:	4637      	mov	r7, r6
 8001846:	dc04      	bgt.n	8001852 <__swbuf_r+0x42>
 8001848:	4621      	mov	r1, r4
 800184a:	4628      	mov	r0, r5
 800184c:	f000 f926 	bl	8001a9c <_fflush_r>
 8001850:	bb28      	cbnz	r0, 800189e <__swbuf_r+0x8e>
 8001852:	68a3      	ldr	r3, [r4, #8]
 8001854:	3b01      	subs	r3, #1
 8001856:	60a3      	str	r3, [r4, #8]
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	6022      	str	r2, [r4, #0]
 800185e:	701e      	strb	r6, [r3, #0]
 8001860:	6963      	ldr	r3, [r4, #20]
 8001862:	3001      	adds	r0, #1
 8001864:	4283      	cmp	r3, r0
 8001866:	d004      	beq.n	8001872 <__swbuf_r+0x62>
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	07db      	lsls	r3, r3, #31
 800186c:	d519      	bpl.n	80018a2 <__swbuf_r+0x92>
 800186e:	2e0a      	cmp	r6, #10
 8001870:	d117      	bne.n	80018a2 <__swbuf_r+0x92>
 8001872:	4621      	mov	r1, r4
 8001874:	4628      	mov	r0, r5
 8001876:	f000 f911 	bl	8001a9c <_fflush_r>
 800187a:	b190      	cbz	r0, 80018a2 <__swbuf_r+0x92>
 800187c:	e00f      	b.n	800189e <__swbuf_r+0x8e>
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <__swbuf_r+0x9c>)
 8001880:	429c      	cmp	r4, r3
 8001882:	d101      	bne.n	8001888 <__swbuf_r+0x78>
 8001884:	68ac      	ldr	r4, [r5, #8]
 8001886:	e7d0      	b.n	800182a <__swbuf_r+0x1a>
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <__swbuf_r+0xa0>)
 800188a:	429c      	cmp	r4, r3
 800188c:	bf08      	it	eq
 800188e:	68ec      	ldreq	r4, [r5, #12]
 8001890:	e7cb      	b.n	800182a <__swbuf_r+0x1a>
 8001892:	4621      	mov	r1, r4
 8001894:	4628      	mov	r0, r5
 8001896:	f000 f80d 	bl	80018b4 <__swsetup_r>
 800189a:	2800      	cmp	r0, #0
 800189c:	d0cc      	beq.n	8001838 <__swbuf_r+0x28>
 800189e:	f04f 37ff 	mov.w	r7, #4294967295
 80018a2:	4638      	mov	r0, r7
 80018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	08002c40 	.word	0x08002c40
 80018ac:	08002c60 	.word	0x08002c60
 80018b0:	08002c20 	.word	0x08002c20

080018b4 <__swsetup_r>:
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <__swsetup_r+0xcc>)
 80018b6:	b570      	push	{r4, r5, r6, lr}
 80018b8:	681d      	ldr	r5, [r3, #0]
 80018ba:	4606      	mov	r6, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	b125      	cbz	r5, 80018ca <__swsetup_r+0x16>
 80018c0:	69ab      	ldr	r3, [r5, #24]
 80018c2:	b913      	cbnz	r3, 80018ca <__swsetup_r+0x16>
 80018c4:	4628      	mov	r0, r5
 80018c6:	f000 f953 	bl	8001b70 <__sinit>
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <__swsetup_r+0xd0>)
 80018cc:	429c      	cmp	r4, r3
 80018ce:	d10f      	bne.n	80018f0 <__swsetup_r+0x3c>
 80018d0:	686c      	ldr	r4, [r5, #4]
 80018d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	0715      	lsls	r5, r2, #28
 80018da:	d42c      	bmi.n	8001936 <__swsetup_r+0x82>
 80018dc:	06d0      	lsls	r0, r2, #27
 80018de:	d411      	bmi.n	8001904 <__swsetup_r+0x50>
 80018e0:	2209      	movs	r2, #9
 80018e2:	6032      	str	r2, [r6, #0]
 80018e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e8:	81a3      	strh	r3, [r4, #12]
 80018ea:	f04f 30ff 	mov.w	r0, #4294967295
 80018ee:	e03e      	b.n	800196e <__swsetup_r+0xba>
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <__swsetup_r+0xd4>)
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d101      	bne.n	80018fa <__swsetup_r+0x46>
 80018f6:	68ac      	ldr	r4, [r5, #8]
 80018f8:	e7eb      	b.n	80018d2 <__swsetup_r+0x1e>
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <__swsetup_r+0xd8>)
 80018fc:	429c      	cmp	r4, r3
 80018fe:	bf08      	it	eq
 8001900:	68ec      	ldreq	r4, [r5, #12]
 8001902:	e7e6      	b.n	80018d2 <__swsetup_r+0x1e>
 8001904:	0751      	lsls	r1, r2, #29
 8001906:	d512      	bpl.n	800192e <__swsetup_r+0x7a>
 8001908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800190a:	b141      	cbz	r1, 800191e <__swsetup_r+0x6a>
 800190c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001910:	4299      	cmp	r1, r3
 8001912:	d002      	beq.n	800191a <__swsetup_r+0x66>
 8001914:	4630      	mov	r0, r6
 8001916:	f000 fa19 	bl	8001d4c <_free_r>
 800191a:	2300      	movs	r3, #0
 800191c:	6363      	str	r3, [r4, #52]	; 0x34
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001924:	81a3      	strh	r3, [r4, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	6063      	str	r3, [r4, #4]
 800192a:	6923      	ldr	r3, [r4, #16]
 800192c:	6023      	str	r3, [r4, #0]
 800192e:	89a3      	ldrh	r3, [r4, #12]
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	81a3      	strh	r3, [r4, #12]
 8001936:	6923      	ldr	r3, [r4, #16]
 8001938:	b94b      	cbnz	r3, 800194e <__swsetup_r+0x9a>
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001944:	d003      	beq.n	800194e <__swsetup_r+0x9a>
 8001946:	4621      	mov	r1, r4
 8001948:	4630      	mov	r0, r6
 800194a:	f000 f9bf 	bl	8001ccc <__smakebuf_r>
 800194e:	89a2      	ldrh	r2, [r4, #12]
 8001950:	f012 0301 	ands.w	r3, r2, #1
 8001954:	d00c      	beq.n	8001970 <__swsetup_r+0xbc>
 8001956:	2300      	movs	r3, #0
 8001958:	60a3      	str	r3, [r4, #8]
 800195a:	6963      	ldr	r3, [r4, #20]
 800195c:	425b      	negs	r3, r3
 800195e:	61a3      	str	r3, [r4, #24]
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	b953      	cbnz	r3, 800197a <__swsetup_r+0xc6>
 8001964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001968:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800196c:	d1ba      	bne.n	80018e4 <__swsetup_r+0x30>
 800196e:	bd70      	pop	{r4, r5, r6, pc}
 8001970:	0792      	lsls	r2, r2, #30
 8001972:	bf58      	it	pl
 8001974:	6963      	ldrpl	r3, [r4, #20]
 8001976:	60a3      	str	r3, [r4, #8]
 8001978:	e7f2      	b.n	8001960 <__swsetup_r+0xac>
 800197a:	2000      	movs	r0, #0
 800197c:	e7f7      	b.n	800196e <__swsetup_r+0xba>
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000
 8001984:	08002c40 	.word	0x08002c40
 8001988:	08002c60 	.word	0x08002c60
 800198c:	08002c20 	.word	0x08002c20

08001990 <__sflush_r>:
 8001990:	898a      	ldrh	r2, [r1, #12]
 8001992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001996:	4605      	mov	r5, r0
 8001998:	0710      	lsls	r0, r2, #28
 800199a:	460c      	mov	r4, r1
 800199c:	d458      	bmi.n	8001a50 <__sflush_r+0xc0>
 800199e:	684b      	ldr	r3, [r1, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dc05      	bgt.n	80019b0 <__sflush_r+0x20>
 80019a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc02      	bgt.n	80019b0 <__sflush_r+0x20>
 80019aa:	2000      	movs	r0, #0
 80019ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019b2:	2e00      	cmp	r6, #0
 80019b4:	d0f9      	beq.n	80019aa <__sflush_r+0x1a>
 80019b6:	2300      	movs	r3, #0
 80019b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019bc:	682f      	ldr	r7, [r5, #0]
 80019be:	6a21      	ldr	r1, [r4, #32]
 80019c0:	602b      	str	r3, [r5, #0]
 80019c2:	d032      	beq.n	8001a2a <__sflush_r+0x9a>
 80019c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c6:	89a3      	ldrh	r3, [r4, #12]
 80019c8:	075a      	lsls	r2, r3, #29
 80019ca:	d505      	bpl.n	80019d8 <__sflush_r+0x48>
 80019cc:	6863      	ldr	r3, [r4, #4]
 80019ce:	1ac0      	subs	r0, r0, r3
 80019d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019d2:	b10b      	cbz	r3, 80019d8 <__sflush_r+0x48>
 80019d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d6:	1ac0      	subs	r0, r0, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	4602      	mov	r2, r0
 80019dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019de:	6a21      	ldr	r1, [r4, #32]
 80019e0:	4628      	mov	r0, r5
 80019e2:	47b0      	blx	r6
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	89a3      	ldrh	r3, [r4, #12]
 80019e8:	d106      	bne.n	80019f8 <__sflush_r+0x68>
 80019ea:	6829      	ldr	r1, [r5, #0]
 80019ec:	291d      	cmp	r1, #29
 80019ee:	d848      	bhi.n	8001a82 <__sflush_r+0xf2>
 80019f0:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <__sflush_r+0x108>)
 80019f2:	40ca      	lsrs	r2, r1
 80019f4:	07d6      	lsls	r6, r2, #31
 80019f6:	d544      	bpl.n	8001a82 <__sflush_r+0xf2>
 80019f8:	2200      	movs	r2, #0
 80019fa:	6062      	str	r2, [r4, #4]
 80019fc:	04d9      	lsls	r1, r3, #19
 80019fe:	6922      	ldr	r2, [r4, #16]
 8001a00:	6022      	str	r2, [r4, #0]
 8001a02:	d504      	bpl.n	8001a0e <__sflush_r+0x7e>
 8001a04:	1c42      	adds	r2, r0, #1
 8001a06:	d101      	bne.n	8001a0c <__sflush_r+0x7c>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	b903      	cbnz	r3, 8001a0e <__sflush_r+0x7e>
 8001a0c:	6560      	str	r0, [r4, #84]	; 0x54
 8001a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a10:	602f      	str	r7, [r5, #0]
 8001a12:	2900      	cmp	r1, #0
 8001a14:	d0c9      	beq.n	80019aa <__sflush_r+0x1a>
 8001a16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a1a:	4299      	cmp	r1, r3
 8001a1c:	d002      	beq.n	8001a24 <__sflush_r+0x94>
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f000 f994 	bl	8001d4c <_free_r>
 8001a24:	2000      	movs	r0, #0
 8001a26:	6360      	str	r0, [r4, #52]	; 0x34
 8001a28:	e7c0      	b.n	80019ac <__sflush_r+0x1c>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	47b0      	blx	r6
 8001a30:	1c41      	adds	r1, r0, #1
 8001a32:	d1c8      	bne.n	80019c6 <__sflush_r+0x36>
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0c5      	beq.n	80019c6 <__sflush_r+0x36>
 8001a3a:	2b1d      	cmp	r3, #29
 8001a3c:	d001      	beq.n	8001a42 <__sflush_r+0xb2>
 8001a3e:	2b16      	cmp	r3, #22
 8001a40:	d101      	bne.n	8001a46 <__sflush_r+0xb6>
 8001a42:	602f      	str	r7, [r5, #0]
 8001a44:	e7b1      	b.n	80019aa <__sflush_r+0x1a>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4c:	81a3      	strh	r3, [r4, #12]
 8001a4e:	e7ad      	b.n	80019ac <__sflush_r+0x1c>
 8001a50:	690f      	ldr	r7, [r1, #16]
 8001a52:	2f00      	cmp	r7, #0
 8001a54:	d0a9      	beq.n	80019aa <__sflush_r+0x1a>
 8001a56:	0793      	lsls	r3, r2, #30
 8001a58:	680e      	ldr	r6, [r1, #0]
 8001a5a:	bf08      	it	eq
 8001a5c:	694b      	ldreq	r3, [r1, #20]
 8001a5e:	600f      	str	r7, [r1, #0]
 8001a60:	bf18      	it	ne
 8001a62:	2300      	movne	r3, #0
 8001a64:	eba6 0807 	sub.w	r8, r6, r7
 8001a68:	608b      	str	r3, [r1, #8]
 8001a6a:	f1b8 0f00 	cmp.w	r8, #0
 8001a6e:	dd9c      	ble.n	80019aa <__sflush_r+0x1a>
 8001a70:	4643      	mov	r3, r8
 8001a72:	463a      	mov	r2, r7
 8001a74:	6a21      	ldr	r1, [r4, #32]
 8001a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a78:	4628      	mov	r0, r5
 8001a7a:	47b0      	blx	r6
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	dc06      	bgt.n	8001a8e <__sflush_r+0xfe>
 8001a80:	89a3      	ldrh	r3, [r4, #12]
 8001a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a86:	81a3      	strh	r3, [r4, #12]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	e78e      	b.n	80019ac <__sflush_r+0x1c>
 8001a8e:	4407      	add	r7, r0
 8001a90:	eba8 0800 	sub.w	r8, r8, r0
 8001a94:	e7e9      	b.n	8001a6a <__sflush_r+0xda>
 8001a96:	bf00      	nop
 8001a98:	20400001 	.word	0x20400001

08001a9c <_fflush_r>:
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	690b      	ldr	r3, [r1, #16]
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	b1db      	cbz	r3, 8001ade <_fflush_r+0x42>
 8001aa6:	b118      	cbz	r0, 8001ab0 <_fflush_r+0x14>
 8001aa8:	6983      	ldr	r3, [r0, #24]
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <_fflush_r+0x14>
 8001aac:	f000 f860 	bl	8001b70 <__sinit>
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <_fflush_r+0x48>)
 8001ab2:	429c      	cmp	r4, r3
 8001ab4:	d109      	bne.n	8001aca <_fflush_r+0x2e>
 8001ab6:	686c      	ldr	r4, [r5, #4]
 8001ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001abc:	b17b      	cbz	r3, 8001ade <_fflush_r+0x42>
 8001abe:	4621      	mov	r1, r4
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ac6:	f7ff bf63 	b.w	8001990 <__sflush_r>
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <_fflush_r+0x4c>)
 8001acc:	429c      	cmp	r4, r3
 8001ace:	d101      	bne.n	8001ad4 <_fflush_r+0x38>
 8001ad0:	68ac      	ldr	r4, [r5, #8]
 8001ad2:	e7f1      	b.n	8001ab8 <_fflush_r+0x1c>
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <_fflush_r+0x50>)
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	bf08      	it	eq
 8001ada:	68ec      	ldreq	r4, [r5, #12]
 8001adc:	e7ec      	b.n	8001ab8 <_fflush_r+0x1c>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	bd38      	pop	{r3, r4, r5, pc}
 8001ae2:	bf00      	nop
 8001ae4:	08002c40 	.word	0x08002c40
 8001ae8:	08002c60 	.word	0x08002c60
 8001aec:	08002c20 	.word	0x08002c20

08001af0 <std>:
 8001af0:	2300      	movs	r3, #0
 8001af2:	b510      	push	{r4, lr}
 8001af4:	4604      	mov	r4, r0
 8001af6:	e9c0 3300 	strd	r3, r3, [r0]
 8001afa:	6083      	str	r3, [r0, #8]
 8001afc:	8181      	strh	r1, [r0, #12]
 8001afe:	6643      	str	r3, [r0, #100]	; 0x64
 8001b00:	81c2      	strh	r2, [r0, #14]
 8001b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b06:	6183      	str	r3, [r0, #24]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	305c      	adds	r0, #92	; 0x5c
 8001b0e:	f7ff fdfb 	bl	8001708 <memset>
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <std+0x38>)
 8001b14:	6263      	str	r3, [r4, #36]	; 0x24
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <std+0x3c>)
 8001b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <std+0x40>)
 8001b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <std+0x44>)
 8001b20:	6224      	str	r4, [r4, #32]
 8001b22:	6323      	str	r3, [r4, #48]	; 0x30
 8001b24:	bd10      	pop	{r4, pc}
 8001b26:	bf00      	nop
 8001b28:	0800244d 	.word	0x0800244d
 8001b2c:	0800246f 	.word	0x0800246f
 8001b30:	080024a7 	.word	0x080024a7
 8001b34:	080024cb 	.word	0x080024cb

08001b38 <_cleanup_r>:
 8001b38:	4901      	ldr	r1, [pc, #4]	; (8001b40 <_cleanup_r+0x8>)
 8001b3a:	f000 b885 	b.w	8001c48 <_fwalk_reent>
 8001b3e:	bf00      	nop
 8001b40:	08001a9d 	.word	0x08001a9d

08001b44 <__sfmoreglue>:
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	1e4a      	subs	r2, r1, #1
 8001b48:	2568      	movs	r5, #104	; 0x68
 8001b4a:	4355      	muls	r5, r2
 8001b4c:	460e      	mov	r6, r1
 8001b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b52:	f000 f949 	bl	8001de8 <_malloc_r>
 8001b56:	4604      	mov	r4, r0
 8001b58:	b140      	cbz	r0, 8001b6c <__sfmoreglue+0x28>
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8001b60:	300c      	adds	r0, #12
 8001b62:	60a0      	str	r0, [r4, #8]
 8001b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b68:	f7ff fdce 	bl	8001708 <memset>
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}

08001b70 <__sinit>:
 8001b70:	6983      	ldr	r3, [r0, #24]
 8001b72:	b510      	push	{r4, lr}
 8001b74:	4604      	mov	r4, r0
 8001b76:	bb33      	cbnz	r3, 8001bc6 <__sinit+0x56>
 8001b78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b7c:	6503      	str	r3, [r0, #80]	; 0x50
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <__sinit+0x58>)
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <__sinit+0x5c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6282      	str	r2, [r0, #40]	; 0x28
 8001b86:	4298      	cmp	r0, r3
 8001b88:	bf04      	itt	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	6183      	streq	r3, [r0, #24]
 8001b8e:	f000 f81f 	bl	8001bd0 <__sfp>
 8001b92:	6060      	str	r0, [r4, #4]
 8001b94:	4620      	mov	r0, r4
 8001b96:	f000 f81b 	bl	8001bd0 <__sfp>
 8001b9a:	60a0      	str	r0, [r4, #8]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f000 f817 	bl	8001bd0 <__sfp>
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60e0      	str	r0, [r4, #12]
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	6860      	ldr	r0, [r4, #4]
 8001baa:	f7ff ffa1 	bl	8001af0 <std>
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2109      	movs	r1, #9
 8001bb2:	68a0      	ldr	r0, [r4, #8]
 8001bb4:	f7ff ff9c 	bl	8001af0 <std>
 8001bb8:	2202      	movs	r2, #2
 8001bba:	2112      	movs	r1, #18
 8001bbc:	68e0      	ldr	r0, [r4, #12]
 8001bbe:	f7ff ff97 	bl	8001af0 <std>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61a3      	str	r3, [r4, #24]
 8001bc6:	bd10      	pop	{r4, pc}
 8001bc8:	08002c1c 	.word	0x08002c1c
 8001bcc:	08001b39 	.word	0x08001b39

08001bd0 <__sfp>:
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <__sfp+0x70>)
 8001bd4:	681e      	ldr	r6, [r3, #0]
 8001bd6:	69b3      	ldr	r3, [r6, #24]
 8001bd8:	4607      	mov	r7, r0
 8001bda:	b913      	cbnz	r3, 8001be2 <__sfp+0x12>
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f7ff ffc7 	bl	8001b70 <__sinit>
 8001be2:	3648      	adds	r6, #72	; 0x48
 8001be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	d503      	bpl.n	8001bf4 <__sfp+0x24>
 8001bec:	6833      	ldr	r3, [r6, #0]
 8001bee:	b133      	cbz	r3, 8001bfe <__sfp+0x2e>
 8001bf0:	6836      	ldr	r6, [r6, #0]
 8001bf2:	e7f7      	b.n	8001be4 <__sfp+0x14>
 8001bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bf8:	b16d      	cbz	r5, 8001c16 <__sfp+0x46>
 8001bfa:	3468      	adds	r4, #104	; 0x68
 8001bfc:	e7f4      	b.n	8001be8 <__sfp+0x18>
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4638      	mov	r0, r7
 8001c02:	f7ff ff9f 	bl	8001b44 <__sfmoreglue>
 8001c06:	6030      	str	r0, [r6, #0]
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1f1      	bne.n	8001bf0 <__sfp+0x20>
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	4604      	mov	r4, r0
 8001c12:	4620      	mov	r0, r4
 8001c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <__sfp+0x74>)
 8001c18:	6665      	str	r5, [r4, #100]	; 0x64
 8001c1a:	e9c4 5500 	strd	r5, r5, [r4]
 8001c1e:	60a5      	str	r5, [r4, #8]
 8001c20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c30:	f7ff fd6a 	bl	8001708 <memset>
 8001c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c3c:	e7e9      	b.n	8001c12 <__sfp+0x42>
 8001c3e:	bf00      	nop
 8001c40:	08002c1c 	.word	0x08002c1c
 8001c44:	ffff0001 	.word	0xffff0001

08001c48 <_fwalk_reent>:
 8001c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c4c:	4680      	mov	r8, r0
 8001c4e:	4689      	mov	r9, r1
 8001c50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c54:	2600      	movs	r6, #0
 8001c56:	b914      	cbnz	r4, 8001c5e <_fwalk_reent+0x16>
 8001c58:	4630      	mov	r0, r6
 8001c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c62:	3f01      	subs	r7, #1
 8001c64:	d501      	bpl.n	8001c6a <_fwalk_reent+0x22>
 8001c66:	6824      	ldr	r4, [r4, #0]
 8001c68:	e7f5      	b.n	8001c56 <_fwalk_reent+0xe>
 8001c6a:	89ab      	ldrh	r3, [r5, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d907      	bls.n	8001c80 <_fwalk_reent+0x38>
 8001c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c74:	3301      	adds	r3, #1
 8001c76:	d003      	beq.n	8001c80 <_fwalk_reent+0x38>
 8001c78:	4629      	mov	r1, r5
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	47c8      	blx	r9
 8001c7e:	4306      	orrs	r6, r0
 8001c80:	3568      	adds	r5, #104	; 0x68
 8001c82:	e7ee      	b.n	8001c62 <_fwalk_reent+0x1a>

08001c84 <__swhatbuf_r>:
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	460e      	mov	r6, r1
 8001c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	b096      	sub	sp, #88	; 0x58
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	da07      	bge.n	8001ca6 <__swhatbuf_r+0x22>
 8001c96:	2300      	movs	r3, #0
 8001c98:	602b      	str	r3, [r5, #0]
 8001c9a:	89b3      	ldrh	r3, [r6, #12]
 8001c9c:	061a      	lsls	r2, r3, #24
 8001c9e:	d410      	bmi.n	8001cc2 <__swhatbuf_r+0x3e>
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca4:	e00e      	b.n	8001cc4 <__swhatbuf_r+0x40>
 8001ca6:	466a      	mov	r2, sp
 8001ca8:	f000 fc36 	bl	8002518 <_fstat_r>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	dbf2      	blt.n	8001c96 <__swhatbuf_r+0x12>
 8001cb0:	9a01      	ldr	r2, [sp, #4]
 8001cb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001cb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001cba:	425a      	negs	r2, r3
 8001cbc:	415a      	adcs	r2, r3
 8001cbe:	602a      	str	r2, [r5, #0]
 8001cc0:	e7ee      	b.n	8001ca0 <__swhatbuf_r+0x1c>
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	6023      	str	r3, [r4, #0]
 8001cc8:	b016      	add	sp, #88	; 0x58
 8001cca:	bd70      	pop	{r4, r5, r6, pc}

08001ccc <__smakebuf_r>:
 8001ccc:	898b      	ldrh	r3, [r1, #12]
 8001cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cd0:	079d      	lsls	r5, r3, #30
 8001cd2:	4606      	mov	r6, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	d507      	bpl.n	8001ce8 <__smakebuf_r+0x1c>
 8001cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	6123      	str	r3, [r4, #16]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	6163      	str	r3, [r4, #20]
 8001ce4:	b002      	add	sp, #8
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	ab01      	add	r3, sp, #4
 8001cea:	466a      	mov	r2, sp
 8001cec:	f7ff ffca 	bl	8001c84 <__swhatbuf_r>
 8001cf0:	9900      	ldr	r1, [sp, #0]
 8001cf2:	4605      	mov	r5, r0
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f000 f877 	bl	8001de8 <_malloc_r>
 8001cfa:	b948      	cbnz	r0, 8001d10 <__smakebuf_r+0x44>
 8001cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d00:	059a      	lsls	r2, r3, #22
 8001d02:	d4ef      	bmi.n	8001ce4 <__smakebuf_r+0x18>
 8001d04:	f023 0303 	bic.w	r3, r3, #3
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	81a3      	strh	r3, [r4, #12]
 8001d0e:	e7e3      	b.n	8001cd8 <__smakebuf_r+0xc>
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <__smakebuf_r+0x7c>)
 8001d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d14:	89a3      	ldrh	r3, [r4, #12]
 8001d16:	6020      	str	r0, [r4, #0]
 8001d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1c:	81a3      	strh	r3, [r4, #12]
 8001d1e:	9b00      	ldr	r3, [sp, #0]
 8001d20:	6163      	str	r3, [r4, #20]
 8001d22:	9b01      	ldr	r3, [sp, #4]
 8001d24:	6120      	str	r0, [r4, #16]
 8001d26:	b15b      	cbz	r3, 8001d40 <__smakebuf_r+0x74>
 8001d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	f000 fc05 	bl	800253c <_isatty_r>
 8001d32:	b128      	cbz	r0, 8001d40 <__smakebuf_r+0x74>
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	81a3      	strh	r3, [r4, #12]
 8001d40:	89a3      	ldrh	r3, [r4, #12]
 8001d42:	431d      	orrs	r5, r3
 8001d44:	81a5      	strh	r5, [r4, #12]
 8001d46:	e7cd      	b.n	8001ce4 <__smakebuf_r+0x18>
 8001d48:	08001b39 	.word	0x08001b39

08001d4c <_free_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	4605      	mov	r5, r0
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d045      	beq.n	8001de0 <_free_r+0x94>
 8001d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d58:	1f0c      	subs	r4, r1, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bfb8      	it	lt
 8001d5e:	18e4      	addlt	r4, r4, r3
 8001d60:	f000 fc0e 	bl	8002580 <__malloc_lock>
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <_free_r+0x98>)
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	4610      	mov	r0, r2
 8001d6a:	b933      	cbnz	r3, 8001d7a <_free_r+0x2e>
 8001d6c:	6063      	str	r3, [r4, #4]
 8001d6e:	6014      	str	r4, [r2, #0]
 8001d70:	4628      	mov	r0, r5
 8001d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d76:	f000 bc04 	b.w	8002582 <__malloc_unlock>
 8001d7a:	42a3      	cmp	r3, r4
 8001d7c:	d90c      	bls.n	8001d98 <_free_r+0x4c>
 8001d7e:	6821      	ldr	r1, [r4, #0]
 8001d80:	1862      	adds	r2, r4, r1
 8001d82:	4293      	cmp	r3, r2
 8001d84:	bf04      	itt	eq
 8001d86:	681a      	ldreq	r2, [r3, #0]
 8001d88:	685b      	ldreq	r3, [r3, #4]
 8001d8a:	6063      	str	r3, [r4, #4]
 8001d8c:	bf04      	itt	eq
 8001d8e:	1852      	addeq	r2, r2, r1
 8001d90:	6022      	streq	r2, [r4, #0]
 8001d92:	6004      	str	r4, [r0, #0]
 8001d94:	e7ec      	b.n	8001d70 <_free_r+0x24>
 8001d96:	4613      	mov	r3, r2
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	b10a      	cbz	r2, 8001da0 <_free_r+0x54>
 8001d9c:	42a2      	cmp	r2, r4
 8001d9e:	d9fa      	bls.n	8001d96 <_free_r+0x4a>
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	1858      	adds	r0, r3, r1
 8001da4:	42a0      	cmp	r0, r4
 8001da6:	d10b      	bne.n	8001dc0 <_free_r+0x74>
 8001da8:	6820      	ldr	r0, [r4, #0]
 8001daa:	4401      	add	r1, r0
 8001dac:	1858      	adds	r0, r3, r1
 8001dae:	4282      	cmp	r2, r0
 8001db0:	6019      	str	r1, [r3, #0]
 8001db2:	d1dd      	bne.n	8001d70 <_free_r+0x24>
 8001db4:	6810      	ldr	r0, [r2, #0]
 8001db6:	6852      	ldr	r2, [r2, #4]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	4401      	add	r1, r0
 8001dbc:	6019      	str	r1, [r3, #0]
 8001dbe:	e7d7      	b.n	8001d70 <_free_r+0x24>
 8001dc0:	d902      	bls.n	8001dc8 <_free_r+0x7c>
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	602b      	str	r3, [r5, #0]
 8001dc6:	e7d3      	b.n	8001d70 <_free_r+0x24>
 8001dc8:	6820      	ldr	r0, [r4, #0]
 8001dca:	1821      	adds	r1, r4, r0
 8001dcc:	428a      	cmp	r2, r1
 8001dce:	bf04      	itt	eq
 8001dd0:	6811      	ldreq	r1, [r2, #0]
 8001dd2:	6852      	ldreq	r2, [r2, #4]
 8001dd4:	6062      	str	r2, [r4, #4]
 8001dd6:	bf04      	itt	eq
 8001dd8:	1809      	addeq	r1, r1, r0
 8001dda:	6021      	streq	r1, [r4, #0]
 8001ddc:	605c      	str	r4, [r3, #4]
 8001dde:	e7c7      	b.n	8001d70 <_free_r+0x24>
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	20000090 	.word	0x20000090

08001de8 <_malloc_r>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	1ccd      	adds	r5, r1, #3
 8001dec:	f025 0503 	bic.w	r5, r5, #3
 8001df0:	3508      	adds	r5, #8
 8001df2:	2d0c      	cmp	r5, #12
 8001df4:	bf38      	it	cc
 8001df6:	250c      	movcc	r5, #12
 8001df8:	2d00      	cmp	r5, #0
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	db01      	blt.n	8001e02 <_malloc_r+0x1a>
 8001dfe:	42a9      	cmp	r1, r5
 8001e00:	d903      	bls.n	8001e0a <_malloc_r+0x22>
 8001e02:	230c      	movs	r3, #12
 8001e04:	6033      	str	r3, [r6, #0]
 8001e06:	2000      	movs	r0, #0
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	f000 fbb9 	bl	8002580 <__malloc_lock>
 8001e0e:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <_malloc_r+0xac>)
 8001e10:	6814      	ldr	r4, [r2, #0]
 8001e12:	4621      	mov	r1, r4
 8001e14:	b991      	cbnz	r1, 8001e3c <_malloc_r+0x54>
 8001e16:	4c20      	ldr	r4, [pc, #128]	; (8001e98 <_malloc_r+0xb0>)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	b91b      	cbnz	r3, 8001e24 <_malloc_r+0x3c>
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f000 fb05 	bl	800242c <_sbrk_r>
 8001e22:	6020      	str	r0, [r4, #0]
 8001e24:	4629      	mov	r1, r5
 8001e26:	4630      	mov	r0, r6
 8001e28:	f000 fb00 	bl	800242c <_sbrk_r>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	d124      	bne.n	8001e7a <_malloc_r+0x92>
 8001e30:	230c      	movs	r3, #12
 8001e32:	6033      	str	r3, [r6, #0]
 8001e34:	4630      	mov	r0, r6
 8001e36:	f000 fba4 	bl	8002582 <__malloc_unlock>
 8001e3a:	e7e4      	b.n	8001e06 <_malloc_r+0x1e>
 8001e3c:	680b      	ldr	r3, [r1, #0]
 8001e3e:	1b5b      	subs	r3, r3, r5
 8001e40:	d418      	bmi.n	8001e74 <_malloc_r+0x8c>
 8001e42:	2b0b      	cmp	r3, #11
 8001e44:	d90f      	bls.n	8001e66 <_malloc_r+0x7e>
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	50cd      	str	r5, [r1, r3]
 8001e4a:	18cc      	adds	r4, r1, r3
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f000 fb98 	bl	8002582 <__malloc_unlock>
 8001e52:	f104 000b 	add.w	r0, r4, #11
 8001e56:	1d23      	adds	r3, r4, #4
 8001e58:	f020 0007 	bic.w	r0, r0, #7
 8001e5c:	1ac3      	subs	r3, r0, r3
 8001e5e:	d0d3      	beq.n	8001e08 <_malloc_r+0x20>
 8001e60:	425a      	negs	r2, r3
 8001e62:	50e2      	str	r2, [r4, r3]
 8001e64:	e7d0      	b.n	8001e08 <_malloc_r+0x20>
 8001e66:	428c      	cmp	r4, r1
 8001e68:	684b      	ldr	r3, [r1, #4]
 8001e6a:	bf16      	itet	ne
 8001e6c:	6063      	strne	r3, [r4, #4]
 8001e6e:	6013      	streq	r3, [r2, #0]
 8001e70:	460c      	movne	r4, r1
 8001e72:	e7eb      	b.n	8001e4c <_malloc_r+0x64>
 8001e74:	460c      	mov	r4, r1
 8001e76:	6849      	ldr	r1, [r1, #4]
 8001e78:	e7cc      	b.n	8001e14 <_malloc_r+0x2c>
 8001e7a:	1cc4      	adds	r4, r0, #3
 8001e7c:	f024 0403 	bic.w	r4, r4, #3
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d005      	beq.n	8001e90 <_malloc_r+0xa8>
 8001e84:	1a21      	subs	r1, r4, r0
 8001e86:	4630      	mov	r0, r6
 8001e88:	f000 fad0 	bl	800242c <_sbrk_r>
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d0cf      	beq.n	8001e30 <_malloc_r+0x48>
 8001e90:	6025      	str	r5, [r4, #0]
 8001e92:	e7db      	b.n	8001e4c <_malloc_r+0x64>
 8001e94:	20000090 	.word	0x20000090
 8001e98:	20000094 	.word	0x20000094

08001e9c <__sfputc_r>:
 8001e9c:	6893      	ldr	r3, [r2, #8]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	b410      	push	{r4}
 8001ea4:	6093      	str	r3, [r2, #8]
 8001ea6:	da08      	bge.n	8001eba <__sfputc_r+0x1e>
 8001ea8:	6994      	ldr	r4, [r2, #24]
 8001eaa:	42a3      	cmp	r3, r4
 8001eac:	db01      	blt.n	8001eb2 <__sfputc_r+0x16>
 8001eae:	290a      	cmp	r1, #10
 8001eb0:	d103      	bne.n	8001eba <__sfputc_r+0x1e>
 8001eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eb6:	f7ff bcab 	b.w	8001810 <__swbuf_r>
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	1c58      	adds	r0, r3, #1
 8001ebe:	6010      	str	r0, [r2, #0]
 8001ec0:	7019      	strb	r1, [r3, #0]
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <__sfputs_r>:
 8001eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ecc:	4606      	mov	r6, r0
 8001ece:	460f      	mov	r7, r1
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	18d5      	adds	r5, r2, r3
 8001ed4:	42ac      	cmp	r4, r5
 8001ed6:	d101      	bne.n	8001edc <__sfputs_r+0x12>
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e007      	b.n	8001eec <__sfputs_r+0x22>
 8001edc:	463a      	mov	r2, r7
 8001ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f7ff ffda 	bl	8001e9c <__sfputc_r>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	d1f3      	bne.n	8001ed4 <__sfputs_r+0xa>
 8001eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ef0 <_vfiprintf_r>:
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	b09d      	sub	sp, #116	; 0x74
 8001ef8:	4617      	mov	r7, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	4606      	mov	r6, r0
 8001efe:	b118      	cbz	r0, 8001f08 <_vfiprintf_r+0x18>
 8001f00:	6983      	ldr	r3, [r0, #24]
 8001f02:	b90b      	cbnz	r3, 8001f08 <_vfiprintf_r+0x18>
 8001f04:	f7ff fe34 	bl	8001b70 <__sinit>
 8001f08:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <_vfiprintf_r+0x20c>)
 8001f0a:	429c      	cmp	r4, r3
 8001f0c:	d158      	bne.n	8001fc0 <_vfiprintf_r+0xd0>
 8001f0e:	6874      	ldr	r4, [r6, #4]
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	0718      	lsls	r0, r3, #28
 8001f14:	d55e      	bpl.n	8001fd4 <_vfiprintf_r+0xe4>
 8001f16:	6923      	ldr	r3, [r4, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d05b      	beq.n	8001fd4 <_vfiprintf_r+0xe4>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f20:	2320      	movs	r3, #32
 8001f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f26:	2330      	movs	r3, #48	; 0x30
 8001f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f2c:	9503      	str	r5, [sp, #12]
 8001f2e:	f04f 0b01 	mov.w	fp, #1
 8001f32:	46b8      	mov	r8, r7
 8001f34:	4645      	mov	r5, r8
 8001f36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f3a:	b10b      	cbz	r3, 8001f40 <_vfiprintf_r+0x50>
 8001f3c:	2b25      	cmp	r3, #37	; 0x25
 8001f3e:	d154      	bne.n	8001fea <_vfiprintf_r+0xfa>
 8001f40:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f44:	d00b      	beq.n	8001f5e <_vfiprintf_r+0x6e>
 8001f46:	4653      	mov	r3, sl
 8001f48:	463a      	mov	r2, r7
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f7ff ffbc 	bl	8001eca <__sfputs_r>
 8001f52:	3001      	adds	r0, #1
 8001f54:	f000 80c2 	beq.w	80020dc <_vfiprintf_r+0x1ec>
 8001f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f5a:	4453      	add	r3, sl
 8001f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f5e:	f898 3000 	ldrb.w	r3, [r8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80ba 	beq.w	80020dc <_vfiprintf_r+0x1ec>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	9307      	str	r3, [sp, #28]
 8001f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f7c:	46a8      	mov	r8, r5
 8001f7e:	2205      	movs	r2, #5
 8001f80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001f84:	485e      	ldr	r0, [pc, #376]	; (8002100 <_vfiprintf_r+0x210>)
 8001f86:	f7fe f943 	bl	8000210 <memchr>
 8001f8a:	9b04      	ldr	r3, [sp, #16]
 8001f8c:	bb78      	cbnz	r0, 8001fee <_vfiprintf_r+0xfe>
 8001f8e:	06d9      	lsls	r1, r3, #27
 8001f90:	bf44      	itt	mi
 8001f92:	2220      	movmi	r2, #32
 8001f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f98:	071a      	lsls	r2, r3, #28
 8001f9a:	bf44      	itt	mi
 8001f9c:	222b      	movmi	r2, #43	; 0x2b
 8001f9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fa2:	782a      	ldrb	r2, [r5, #0]
 8001fa4:	2a2a      	cmp	r2, #42	; 0x2a
 8001fa6:	d02a      	beq.n	8001ffe <_vfiprintf_r+0x10e>
 8001fa8:	9a07      	ldr	r2, [sp, #28]
 8001faa:	46a8      	mov	r8, r5
 8001fac:	2000      	movs	r0, #0
 8001fae:	250a      	movs	r5, #10
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fb6:	3b30      	subs	r3, #48	; 0x30
 8001fb8:	2b09      	cmp	r3, #9
 8001fba:	d969      	bls.n	8002090 <_vfiprintf_r+0x1a0>
 8001fbc:	b360      	cbz	r0, 8002018 <_vfiprintf_r+0x128>
 8001fbe:	e024      	b.n	800200a <_vfiprintf_r+0x11a>
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <_vfiprintf_r+0x214>)
 8001fc2:	429c      	cmp	r4, r3
 8001fc4:	d101      	bne.n	8001fca <_vfiprintf_r+0xda>
 8001fc6:	68b4      	ldr	r4, [r6, #8]
 8001fc8:	e7a2      	b.n	8001f10 <_vfiprintf_r+0x20>
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <_vfiprintf_r+0x218>)
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	bf08      	it	eq
 8001fd0:	68f4      	ldreq	r4, [r6, #12]
 8001fd2:	e79d      	b.n	8001f10 <_vfiprintf_r+0x20>
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	f7ff fc6c 	bl	80018b4 <__swsetup_r>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d09d      	beq.n	8001f1c <_vfiprintf_r+0x2c>
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	b01d      	add	sp, #116	; 0x74
 8001fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fea:	46a8      	mov	r8, r5
 8001fec:	e7a2      	b.n	8001f34 <_vfiprintf_r+0x44>
 8001fee:	4a44      	ldr	r2, [pc, #272]	; (8002100 <_vfiprintf_r+0x210>)
 8001ff0:	1a80      	subs	r0, r0, r2
 8001ff2:	fa0b f000 	lsl.w	r0, fp, r0
 8001ff6:	4318      	orrs	r0, r3
 8001ff8:	9004      	str	r0, [sp, #16]
 8001ffa:	4645      	mov	r5, r8
 8001ffc:	e7be      	b.n	8001f7c <_vfiprintf_r+0x8c>
 8001ffe:	9a03      	ldr	r2, [sp, #12]
 8002000:	1d11      	adds	r1, r2, #4
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	9103      	str	r1, [sp, #12]
 8002006:	2a00      	cmp	r2, #0
 8002008:	db01      	blt.n	800200e <_vfiprintf_r+0x11e>
 800200a:	9207      	str	r2, [sp, #28]
 800200c:	e004      	b.n	8002018 <_vfiprintf_r+0x128>
 800200e:	4252      	negs	r2, r2
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	9207      	str	r2, [sp, #28]
 8002016:	9304      	str	r3, [sp, #16]
 8002018:	f898 3000 	ldrb.w	r3, [r8]
 800201c:	2b2e      	cmp	r3, #46	; 0x2e
 800201e:	d10e      	bne.n	800203e <_vfiprintf_r+0x14e>
 8002020:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002024:	2b2a      	cmp	r3, #42	; 0x2a
 8002026:	d138      	bne.n	800209a <_vfiprintf_r+0x1aa>
 8002028:	9b03      	ldr	r3, [sp, #12]
 800202a:	1d1a      	adds	r2, r3, #4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	9203      	str	r2, [sp, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	bfb8      	it	lt
 8002034:	f04f 33ff 	movlt.w	r3, #4294967295
 8002038:	f108 0802 	add.w	r8, r8, #2
 800203c:	9305      	str	r3, [sp, #20]
 800203e:	4d33      	ldr	r5, [pc, #204]	; (800210c <_vfiprintf_r+0x21c>)
 8002040:	f898 1000 	ldrb.w	r1, [r8]
 8002044:	2203      	movs	r2, #3
 8002046:	4628      	mov	r0, r5
 8002048:	f7fe f8e2 	bl	8000210 <memchr>
 800204c:	b140      	cbz	r0, 8002060 <_vfiprintf_r+0x170>
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	1b40      	subs	r0, r0, r5
 8002052:	fa03 f000 	lsl.w	r0, r3, r0
 8002056:	9b04      	ldr	r3, [sp, #16]
 8002058:	4303      	orrs	r3, r0
 800205a:	f108 0801 	add.w	r8, r8, #1
 800205e:	9304      	str	r3, [sp, #16]
 8002060:	f898 1000 	ldrb.w	r1, [r8]
 8002064:	482a      	ldr	r0, [pc, #168]	; (8002110 <_vfiprintf_r+0x220>)
 8002066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800206a:	2206      	movs	r2, #6
 800206c:	f108 0701 	add.w	r7, r8, #1
 8002070:	f7fe f8ce 	bl	8000210 <memchr>
 8002074:	2800      	cmp	r0, #0
 8002076:	d037      	beq.n	80020e8 <_vfiprintf_r+0x1f8>
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <_vfiprintf_r+0x224>)
 800207a:	bb1b      	cbnz	r3, 80020c4 <_vfiprintf_r+0x1d4>
 800207c:	9b03      	ldr	r3, [sp, #12]
 800207e:	3307      	adds	r3, #7
 8002080:	f023 0307 	bic.w	r3, r3, #7
 8002084:	3308      	adds	r3, #8
 8002086:	9303      	str	r3, [sp, #12]
 8002088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800208a:	444b      	add	r3, r9
 800208c:	9309      	str	r3, [sp, #36]	; 0x24
 800208e:	e750      	b.n	8001f32 <_vfiprintf_r+0x42>
 8002090:	fb05 3202 	mla	r2, r5, r2, r3
 8002094:	2001      	movs	r0, #1
 8002096:	4688      	mov	r8, r1
 8002098:	e78a      	b.n	8001fb0 <_vfiprintf_r+0xc0>
 800209a:	2300      	movs	r3, #0
 800209c:	f108 0801 	add.w	r8, r8, #1
 80020a0:	9305      	str	r3, [sp, #20]
 80020a2:	4619      	mov	r1, r3
 80020a4:	250a      	movs	r5, #10
 80020a6:	4640      	mov	r0, r8
 80020a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020ac:	3a30      	subs	r2, #48	; 0x30
 80020ae:	2a09      	cmp	r2, #9
 80020b0:	d903      	bls.n	80020ba <_vfiprintf_r+0x1ca>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0c3      	beq.n	800203e <_vfiprintf_r+0x14e>
 80020b6:	9105      	str	r1, [sp, #20]
 80020b8:	e7c1      	b.n	800203e <_vfiprintf_r+0x14e>
 80020ba:	fb05 2101 	mla	r1, r5, r1, r2
 80020be:	2301      	movs	r3, #1
 80020c0:	4680      	mov	r8, r0
 80020c2:	e7f0      	b.n	80020a6 <_vfiprintf_r+0x1b6>
 80020c4:	ab03      	add	r3, sp, #12
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4622      	mov	r2, r4
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_vfiprintf_r+0x228>)
 80020cc:	a904      	add	r1, sp, #16
 80020ce:	4630      	mov	r0, r6
 80020d0:	f3af 8000 	nop.w
 80020d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020d8:	4681      	mov	r9, r0
 80020da:	d1d5      	bne.n	8002088 <_vfiprintf_r+0x198>
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	065b      	lsls	r3, r3, #25
 80020e0:	f53f af7e 	bmi.w	8001fe0 <_vfiprintf_r+0xf0>
 80020e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020e6:	e77d      	b.n	8001fe4 <_vfiprintf_r+0xf4>
 80020e8:	ab03      	add	r3, sp, #12
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4622      	mov	r2, r4
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <_vfiprintf_r+0x228>)
 80020f0:	a904      	add	r1, sp, #16
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 f888 	bl	8002208 <_printf_i>
 80020f8:	e7ec      	b.n	80020d4 <_vfiprintf_r+0x1e4>
 80020fa:	bf00      	nop
 80020fc:	08002c40 	.word	0x08002c40
 8002100:	08002c80 	.word	0x08002c80
 8002104:	08002c60 	.word	0x08002c60
 8002108:	08002c20 	.word	0x08002c20
 800210c:	08002c86 	.word	0x08002c86
 8002110:	08002c8a 	.word	0x08002c8a
 8002114:	00000000 	.word	0x00000000
 8002118:	08001ecb 	.word	0x08001ecb

0800211c <_printf_common>:
 800211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002120:	4691      	mov	r9, r2
 8002122:	461f      	mov	r7, r3
 8002124:	688a      	ldr	r2, [r1, #8]
 8002126:	690b      	ldr	r3, [r1, #16]
 8002128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800212c:	4293      	cmp	r3, r2
 800212e:	bfb8      	it	lt
 8002130:	4613      	movlt	r3, r2
 8002132:	f8c9 3000 	str.w	r3, [r9]
 8002136:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800213a:	4606      	mov	r6, r0
 800213c:	460c      	mov	r4, r1
 800213e:	b112      	cbz	r2, 8002146 <_printf_common+0x2a>
 8002140:	3301      	adds	r3, #1
 8002142:	f8c9 3000 	str.w	r3, [r9]
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	0699      	lsls	r1, r3, #26
 800214a:	bf42      	ittt	mi
 800214c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002150:	3302      	addmi	r3, #2
 8002152:	f8c9 3000 	strmi.w	r3, [r9]
 8002156:	6825      	ldr	r5, [r4, #0]
 8002158:	f015 0506 	ands.w	r5, r5, #6
 800215c:	d107      	bne.n	800216e <_printf_common+0x52>
 800215e:	f104 0a19 	add.w	sl, r4, #25
 8002162:	68e3      	ldr	r3, [r4, #12]
 8002164:	f8d9 2000 	ldr.w	r2, [r9]
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	42ab      	cmp	r3, r5
 800216c:	dc28      	bgt.n	80021c0 <_printf_common+0xa4>
 800216e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	3300      	adds	r3, #0
 8002176:	bf18      	it	ne
 8002178:	2301      	movne	r3, #1
 800217a:	0692      	lsls	r2, r2, #26
 800217c:	d42d      	bmi.n	80021da <_printf_common+0xbe>
 800217e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002182:	4639      	mov	r1, r7
 8002184:	4630      	mov	r0, r6
 8002186:	47c0      	blx	r8
 8002188:	3001      	adds	r0, #1
 800218a:	d020      	beq.n	80021ce <_printf_common+0xb2>
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	68e5      	ldr	r5, [r4, #12]
 8002190:	f8d9 2000 	ldr.w	r2, [r9]
 8002194:	f003 0306 	and.w	r3, r3, #6
 8002198:	2b04      	cmp	r3, #4
 800219a:	bf08      	it	eq
 800219c:	1aad      	subeq	r5, r5, r2
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	6922      	ldr	r2, [r4, #16]
 80021a2:	bf0c      	ite	eq
 80021a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021a8:	2500      	movne	r5, #0
 80021aa:	4293      	cmp	r3, r2
 80021ac:	bfc4      	itt	gt
 80021ae:	1a9b      	subgt	r3, r3, r2
 80021b0:	18ed      	addgt	r5, r5, r3
 80021b2:	f04f 0900 	mov.w	r9, #0
 80021b6:	341a      	adds	r4, #26
 80021b8:	454d      	cmp	r5, r9
 80021ba:	d11a      	bne.n	80021f2 <_printf_common+0xd6>
 80021bc:	2000      	movs	r0, #0
 80021be:	e008      	b.n	80021d2 <_printf_common+0xb6>
 80021c0:	2301      	movs	r3, #1
 80021c2:	4652      	mov	r2, sl
 80021c4:	4639      	mov	r1, r7
 80021c6:	4630      	mov	r0, r6
 80021c8:	47c0      	blx	r8
 80021ca:	3001      	adds	r0, #1
 80021cc:	d103      	bne.n	80021d6 <_printf_common+0xba>
 80021ce:	f04f 30ff 	mov.w	r0, #4294967295
 80021d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021d6:	3501      	adds	r5, #1
 80021d8:	e7c3      	b.n	8002162 <_printf_common+0x46>
 80021da:	18e1      	adds	r1, r4, r3
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	2030      	movs	r0, #48	; 0x30
 80021e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021e4:	4422      	add	r2, r4
 80021e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021ee:	3302      	adds	r3, #2
 80021f0:	e7c5      	b.n	800217e <_printf_common+0x62>
 80021f2:	2301      	movs	r3, #1
 80021f4:	4622      	mov	r2, r4
 80021f6:	4639      	mov	r1, r7
 80021f8:	4630      	mov	r0, r6
 80021fa:	47c0      	blx	r8
 80021fc:	3001      	adds	r0, #1
 80021fe:	d0e6      	beq.n	80021ce <_printf_common+0xb2>
 8002200:	f109 0901 	add.w	r9, r9, #1
 8002204:	e7d8      	b.n	80021b8 <_printf_common+0x9c>
	...

08002208 <_printf_i>:
 8002208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800220c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002210:	460c      	mov	r4, r1
 8002212:	7e09      	ldrb	r1, [r1, #24]
 8002214:	b085      	sub	sp, #20
 8002216:	296e      	cmp	r1, #110	; 0x6e
 8002218:	4617      	mov	r7, r2
 800221a:	4606      	mov	r6, r0
 800221c:	4698      	mov	r8, r3
 800221e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002220:	f000 80b3 	beq.w	800238a <_printf_i+0x182>
 8002224:	d822      	bhi.n	800226c <_printf_i+0x64>
 8002226:	2963      	cmp	r1, #99	; 0x63
 8002228:	d036      	beq.n	8002298 <_printf_i+0x90>
 800222a:	d80a      	bhi.n	8002242 <_printf_i+0x3a>
 800222c:	2900      	cmp	r1, #0
 800222e:	f000 80b9 	beq.w	80023a4 <_printf_i+0x19c>
 8002232:	2958      	cmp	r1, #88	; 0x58
 8002234:	f000 8083 	beq.w	800233e <_printf_i+0x136>
 8002238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800223c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002240:	e032      	b.n	80022a8 <_printf_i+0xa0>
 8002242:	2964      	cmp	r1, #100	; 0x64
 8002244:	d001      	beq.n	800224a <_printf_i+0x42>
 8002246:	2969      	cmp	r1, #105	; 0x69
 8002248:	d1f6      	bne.n	8002238 <_printf_i+0x30>
 800224a:	6820      	ldr	r0, [r4, #0]
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	0605      	lsls	r5, r0, #24
 8002250:	f103 0104 	add.w	r1, r3, #4
 8002254:	d52a      	bpl.n	80022ac <_printf_i+0xa4>
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da03      	bge.n	8002266 <_printf_i+0x5e>
 800225e:	222d      	movs	r2, #45	; 0x2d
 8002260:	425b      	negs	r3, r3
 8002262:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002266:	486f      	ldr	r0, [pc, #444]	; (8002424 <_printf_i+0x21c>)
 8002268:	220a      	movs	r2, #10
 800226a:	e039      	b.n	80022e0 <_printf_i+0xd8>
 800226c:	2973      	cmp	r1, #115	; 0x73
 800226e:	f000 809d 	beq.w	80023ac <_printf_i+0x1a4>
 8002272:	d808      	bhi.n	8002286 <_printf_i+0x7e>
 8002274:	296f      	cmp	r1, #111	; 0x6f
 8002276:	d020      	beq.n	80022ba <_printf_i+0xb2>
 8002278:	2970      	cmp	r1, #112	; 0x70
 800227a:	d1dd      	bne.n	8002238 <_printf_i+0x30>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	6023      	str	r3, [r4, #0]
 8002284:	e003      	b.n	800228e <_printf_i+0x86>
 8002286:	2975      	cmp	r1, #117	; 0x75
 8002288:	d017      	beq.n	80022ba <_printf_i+0xb2>
 800228a:	2978      	cmp	r1, #120	; 0x78
 800228c:	d1d4      	bne.n	8002238 <_printf_i+0x30>
 800228e:	2378      	movs	r3, #120	; 0x78
 8002290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002294:	4864      	ldr	r0, [pc, #400]	; (8002428 <_printf_i+0x220>)
 8002296:	e055      	b.n	8002344 <_printf_i+0x13c>
 8002298:	6813      	ldr	r3, [r2, #0]
 800229a:	1d19      	adds	r1, r3, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6011      	str	r1, [r2, #0]
 80022a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022a8:	2301      	movs	r3, #1
 80022aa:	e08c      	b.n	80023c6 <_printf_i+0x1be>
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6011      	str	r1, [r2, #0]
 80022b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022b4:	bf18      	it	ne
 80022b6:	b21b      	sxthne	r3, r3
 80022b8:	e7cf      	b.n	800225a <_printf_i+0x52>
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	6825      	ldr	r5, [r4, #0]
 80022be:	1d18      	adds	r0, r3, #4
 80022c0:	6010      	str	r0, [r2, #0]
 80022c2:	0628      	lsls	r0, r5, #24
 80022c4:	d501      	bpl.n	80022ca <_printf_i+0xc2>
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	e002      	b.n	80022d0 <_printf_i+0xc8>
 80022ca:	0668      	lsls	r0, r5, #25
 80022cc:	d5fb      	bpl.n	80022c6 <_printf_i+0xbe>
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	4854      	ldr	r0, [pc, #336]	; (8002424 <_printf_i+0x21c>)
 80022d2:	296f      	cmp	r1, #111	; 0x6f
 80022d4:	bf14      	ite	ne
 80022d6:	220a      	movne	r2, #10
 80022d8:	2208      	moveq	r2, #8
 80022da:	2100      	movs	r1, #0
 80022dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022e0:	6865      	ldr	r5, [r4, #4]
 80022e2:	60a5      	str	r5, [r4, #8]
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	f2c0 8095 	blt.w	8002414 <_printf_i+0x20c>
 80022ea:	6821      	ldr	r1, [r4, #0]
 80022ec:	f021 0104 	bic.w	r1, r1, #4
 80022f0:	6021      	str	r1, [r4, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d13d      	bne.n	8002372 <_printf_i+0x16a>
 80022f6:	2d00      	cmp	r5, #0
 80022f8:	f040 808e 	bne.w	8002418 <_printf_i+0x210>
 80022fc:	4665      	mov	r5, ip
 80022fe:	2a08      	cmp	r2, #8
 8002300:	d10b      	bne.n	800231a <_printf_i+0x112>
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	07db      	lsls	r3, r3, #31
 8002306:	d508      	bpl.n	800231a <_printf_i+0x112>
 8002308:	6923      	ldr	r3, [r4, #16]
 800230a:	6862      	ldr	r2, [r4, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	bfde      	ittt	le
 8002310:	2330      	movle	r3, #48	; 0x30
 8002312:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002316:	f105 35ff 	addle.w	r5, r5, #4294967295
 800231a:	ebac 0305 	sub.w	r3, ip, r5
 800231e:	6123      	str	r3, [r4, #16]
 8002320:	f8cd 8000 	str.w	r8, [sp]
 8002324:	463b      	mov	r3, r7
 8002326:	aa03      	add	r2, sp, #12
 8002328:	4621      	mov	r1, r4
 800232a:	4630      	mov	r0, r6
 800232c:	f7ff fef6 	bl	800211c <_printf_common>
 8002330:	3001      	adds	r0, #1
 8002332:	d14d      	bne.n	80023d0 <_printf_i+0x1c8>
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	b005      	add	sp, #20
 800233a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800233e:	4839      	ldr	r0, [pc, #228]	; (8002424 <_printf_i+0x21c>)
 8002340:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	6821      	ldr	r1, [r4, #0]
 8002348:	1d1d      	adds	r5, r3, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6015      	str	r5, [r2, #0]
 800234e:	060a      	lsls	r2, r1, #24
 8002350:	d50b      	bpl.n	800236a <_printf_i+0x162>
 8002352:	07ca      	lsls	r2, r1, #31
 8002354:	bf44      	itt	mi
 8002356:	f041 0120 	orrmi.w	r1, r1, #32
 800235a:	6021      	strmi	r1, [r4, #0]
 800235c:	b91b      	cbnz	r3, 8002366 <_printf_i+0x15e>
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	f022 0220 	bic.w	r2, r2, #32
 8002364:	6022      	str	r2, [r4, #0]
 8002366:	2210      	movs	r2, #16
 8002368:	e7b7      	b.n	80022da <_printf_i+0xd2>
 800236a:	064d      	lsls	r5, r1, #25
 800236c:	bf48      	it	mi
 800236e:	b29b      	uxthmi	r3, r3
 8002370:	e7ef      	b.n	8002352 <_printf_i+0x14a>
 8002372:	4665      	mov	r5, ip
 8002374:	fbb3 f1f2 	udiv	r1, r3, r2
 8002378:	fb02 3311 	mls	r3, r2, r1, r3
 800237c:	5cc3      	ldrb	r3, [r0, r3]
 800237e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002382:	460b      	mov	r3, r1
 8002384:	2900      	cmp	r1, #0
 8002386:	d1f5      	bne.n	8002374 <_printf_i+0x16c>
 8002388:	e7b9      	b.n	80022fe <_printf_i+0xf6>
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	6825      	ldr	r5, [r4, #0]
 800238e:	6961      	ldr	r1, [r4, #20]
 8002390:	1d18      	adds	r0, r3, #4
 8002392:	6010      	str	r0, [r2, #0]
 8002394:	0628      	lsls	r0, r5, #24
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	d501      	bpl.n	800239e <_printf_i+0x196>
 800239a:	6019      	str	r1, [r3, #0]
 800239c:	e002      	b.n	80023a4 <_printf_i+0x19c>
 800239e:	066a      	lsls	r2, r5, #25
 80023a0:	d5fb      	bpl.n	800239a <_printf_i+0x192>
 80023a2:	8019      	strh	r1, [r3, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	4665      	mov	r5, ip
 80023aa:	e7b9      	b.n	8002320 <_printf_i+0x118>
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	1d19      	adds	r1, r3, #4
 80023b0:	6011      	str	r1, [r2, #0]
 80023b2:	681d      	ldr	r5, [r3, #0]
 80023b4:	6862      	ldr	r2, [r4, #4]
 80023b6:	2100      	movs	r1, #0
 80023b8:	4628      	mov	r0, r5
 80023ba:	f7fd ff29 	bl	8000210 <memchr>
 80023be:	b108      	cbz	r0, 80023c4 <_printf_i+0x1bc>
 80023c0:	1b40      	subs	r0, r0, r5
 80023c2:	6060      	str	r0, [r4, #4]
 80023c4:	6863      	ldr	r3, [r4, #4]
 80023c6:	6123      	str	r3, [r4, #16]
 80023c8:	2300      	movs	r3, #0
 80023ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ce:	e7a7      	b.n	8002320 <_printf_i+0x118>
 80023d0:	6923      	ldr	r3, [r4, #16]
 80023d2:	462a      	mov	r2, r5
 80023d4:	4639      	mov	r1, r7
 80023d6:	4630      	mov	r0, r6
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d0aa      	beq.n	8002334 <_printf_i+0x12c>
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	079b      	lsls	r3, r3, #30
 80023e2:	d413      	bmi.n	800240c <_printf_i+0x204>
 80023e4:	68e0      	ldr	r0, [r4, #12]
 80023e6:	9b03      	ldr	r3, [sp, #12]
 80023e8:	4298      	cmp	r0, r3
 80023ea:	bfb8      	it	lt
 80023ec:	4618      	movlt	r0, r3
 80023ee:	e7a3      	b.n	8002338 <_printf_i+0x130>
 80023f0:	2301      	movs	r3, #1
 80023f2:	464a      	mov	r2, r9
 80023f4:	4639      	mov	r1, r7
 80023f6:	4630      	mov	r0, r6
 80023f8:	47c0      	blx	r8
 80023fa:	3001      	adds	r0, #1
 80023fc:	d09a      	beq.n	8002334 <_printf_i+0x12c>
 80023fe:	3501      	adds	r5, #1
 8002400:	68e3      	ldr	r3, [r4, #12]
 8002402:	9a03      	ldr	r2, [sp, #12]
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	42ab      	cmp	r3, r5
 8002408:	dcf2      	bgt.n	80023f0 <_printf_i+0x1e8>
 800240a:	e7eb      	b.n	80023e4 <_printf_i+0x1dc>
 800240c:	2500      	movs	r5, #0
 800240e:	f104 0919 	add.w	r9, r4, #25
 8002412:	e7f5      	b.n	8002400 <_printf_i+0x1f8>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ac      	bne.n	8002372 <_printf_i+0x16a>
 8002418:	7803      	ldrb	r3, [r0, #0]
 800241a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800241e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002422:	e76c      	b.n	80022fe <_printf_i+0xf6>
 8002424:	08002c91 	.word	0x08002c91
 8002428:	08002ca2 	.word	0x08002ca2

0800242c <_sbrk_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4c06      	ldr	r4, [pc, #24]	; (8002448 <_sbrk_r+0x1c>)
 8002430:	2300      	movs	r3, #0
 8002432:	4605      	mov	r5, r0
 8002434:	4608      	mov	r0, r1
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	f7fe f8e6 	bl	8000608 <_sbrk>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_sbrk_r+0x1a>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	b103      	cbz	r3, 8002446 <_sbrk_r+0x1a>
 8002444:	602b      	str	r3, [r5, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	20000164 	.word	0x20000164

0800244c <__sread>:
 800244c:	b510      	push	{r4, lr}
 800244e:	460c      	mov	r4, r1
 8002450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002454:	f000 f896 	bl	8002584 <_read_r>
 8002458:	2800      	cmp	r0, #0
 800245a:	bfab      	itete	ge
 800245c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800245e:	89a3      	ldrhlt	r3, [r4, #12]
 8002460:	181b      	addge	r3, r3, r0
 8002462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002466:	bfac      	ite	ge
 8002468:	6563      	strge	r3, [r4, #84]	; 0x54
 800246a:	81a3      	strhlt	r3, [r4, #12]
 800246c:	bd10      	pop	{r4, pc}

0800246e <__swrite>:
 800246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002472:	461f      	mov	r7, r3
 8002474:	898b      	ldrh	r3, [r1, #12]
 8002476:	05db      	lsls	r3, r3, #23
 8002478:	4605      	mov	r5, r0
 800247a:	460c      	mov	r4, r1
 800247c:	4616      	mov	r6, r2
 800247e:	d505      	bpl.n	800248c <__swrite+0x1e>
 8002480:	2302      	movs	r3, #2
 8002482:	2200      	movs	r2, #0
 8002484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002488:	f000 f868 	bl	800255c <_lseek_r>
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002496:	81a3      	strh	r3, [r4, #12]
 8002498:	4632      	mov	r2, r6
 800249a:	463b      	mov	r3, r7
 800249c:	4628      	mov	r0, r5
 800249e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024a2:	f000 b817 	b.w	80024d4 <_write_r>

080024a6 <__sseek>:
 80024a6:	b510      	push	{r4, lr}
 80024a8:	460c      	mov	r4, r1
 80024aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ae:	f000 f855 	bl	800255c <_lseek_r>
 80024b2:	1c43      	adds	r3, r0, #1
 80024b4:	89a3      	ldrh	r3, [r4, #12]
 80024b6:	bf15      	itete	ne
 80024b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80024ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024c2:	81a3      	strheq	r3, [r4, #12]
 80024c4:	bf18      	it	ne
 80024c6:	81a3      	strhne	r3, [r4, #12]
 80024c8:	bd10      	pop	{r4, pc}

080024ca <__sclose>:
 80024ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ce:	f000 b813 	b.w	80024f8 <_close_r>
	...

080024d4 <_write_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4c07      	ldr	r4, [pc, #28]	; (80024f4 <_write_r+0x20>)
 80024d8:	4605      	mov	r5, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	6022      	str	r2, [r4, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 f911 	bl	800270a <_write>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d102      	bne.n	80024f2 <_write_r+0x1e>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	b103      	cbz	r3, 80024f2 <_write_r+0x1e>
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	bd38      	pop	{r3, r4, r5, pc}
 80024f4:	20000164 	.word	0x20000164

080024f8 <_close_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4c06      	ldr	r4, [pc, #24]	; (8002514 <_close_r+0x1c>)
 80024fc:	2300      	movs	r3, #0
 80024fe:	4605      	mov	r5, r0
 8002500:	4608      	mov	r0, r1
 8002502:	6023      	str	r3, [r4, #0]
 8002504:	f000 f930 	bl	8002768 <_close>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d102      	bne.n	8002512 <_close_r+0x1a>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	b103      	cbz	r3, 8002512 <_close_r+0x1a>
 8002510:	602b      	str	r3, [r5, #0]
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	20000164 	.word	0x20000164

08002518 <_fstat_r>:
 8002518:	b538      	push	{r3, r4, r5, lr}
 800251a:	4c07      	ldr	r4, [pc, #28]	; (8002538 <_fstat_r+0x20>)
 800251c:	2300      	movs	r3, #0
 800251e:	4605      	mov	r5, r0
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	f000 f966 	bl	80027f6 <_fstat>
 800252a:	1c43      	adds	r3, r0, #1
 800252c:	d102      	bne.n	8002534 <_fstat_r+0x1c>
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	b103      	cbz	r3, 8002534 <_fstat_r+0x1c>
 8002532:	602b      	str	r3, [r5, #0]
 8002534:	bd38      	pop	{r3, r4, r5, pc}
 8002536:	bf00      	nop
 8002538:	20000164 	.word	0x20000164

0800253c <_isatty_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4c06      	ldr	r4, [pc, #24]	; (8002558 <_isatty_r+0x1c>)
 8002540:	2300      	movs	r3, #0
 8002542:	4605      	mov	r5, r0
 8002544:	4608      	mov	r0, r1
 8002546:	6023      	str	r3, [r4, #0]
 8002548:	f000 faba 	bl	8002ac0 <_isatty>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d102      	bne.n	8002556 <_isatty_r+0x1a>
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	b103      	cbz	r3, 8002556 <_isatty_r+0x1a>
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	bd38      	pop	{r3, r4, r5, pc}
 8002558:	20000164 	.word	0x20000164

0800255c <_lseek_r>:
 800255c:	b538      	push	{r3, r4, r5, lr}
 800255e:	4c07      	ldr	r4, [pc, #28]	; (800257c <_lseek_r+0x20>)
 8002560:	4605      	mov	r5, r0
 8002562:	4608      	mov	r0, r1
 8002564:	4611      	mov	r1, r2
 8002566:	2200      	movs	r2, #0
 8002568:	6022      	str	r2, [r4, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	f000 f8bb 	bl	80026e6 <_lseek>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d102      	bne.n	800257a <_lseek_r+0x1e>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	b103      	cbz	r3, 800257a <_lseek_r+0x1e>
 8002578:	602b      	str	r3, [r5, #0]
 800257a:	bd38      	pop	{r3, r4, r5, pc}
 800257c:	20000164 	.word	0x20000164

08002580 <__malloc_lock>:
 8002580:	4770      	bx	lr

08002582 <__malloc_unlock>:
 8002582:	4770      	bx	lr

08002584 <_read_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4c07      	ldr	r4, [pc, #28]	; (80025a4 <_read_r+0x20>)
 8002588:	4605      	mov	r5, r0
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	2200      	movs	r2, #0
 8002590:	6022      	str	r2, [r4, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	f000 f850 	bl	8002638 <_read>
 8002598:	1c43      	adds	r3, r0, #1
 800259a:	d102      	bne.n	80025a2 <_read_r+0x1e>
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	b103      	cbz	r3, 80025a2 <_read_r+0x1e>
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	20000164 	.word	0x20000164

080025a8 <findslot>:
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <findslot+0x2c>)
 80025aa:	b510      	push	{r4, lr}
 80025ac:	4604      	mov	r4, r0
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	b118      	cbz	r0, 80025ba <findslot+0x12>
 80025b2:	6983      	ldr	r3, [r0, #24]
 80025b4:	b90b      	cbnz	r3, 80025ba <findslot+0x12>
 80025b6:	f7ff fadb 	bl	8001b70 <__sinit>
 80025ba:	2c13      	cmp	r4, #19
 80025bc:	d807      	bhi.n	80025ce <findslot+0x26>
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <findslot+0x30>)
 80025c0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80025c4:	3301      	adds	r3, #1
 80025c6:	d002      	beq.n	80025ce <findslot+0x26>
 80025c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	2000      	movs	r0, #0
 80025d0:	e7fc      	b.n	80025cc <findslot+0x24>
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000
 80025d8:	200000a4 	.word	0x200000a4

080025dc <checkerror>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	1c43      	adds	r3, r0, #1
 80025e0:	4605      	mov	r5, r0
 80025e2:	d109      	bne.n	80025f8 <checkerror+0x1c>
 80025e4:	f7ff f866 	bl	80016b4 <__errno>
 80025e8:	2413      	movs	r4, #19
 80025ea:	4606      	mov	r6, r0
 80025ec:	2700      	movs	r7, #0
 80025ee:	4620      	mov	r0, r4
 80025f0:	4639      	mov	r1, r7
 80025f2:	beab      	bkpt	0x00ab
 80025f4:	4604      	mov	r4, r0
 80025f6:	6034      	str	r4, [r6, #0]
 80025f8:	4628      	mov	r0, r5
 80025fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025fc <error>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	4605      	mov	r5, r0
 8002600:	f7ff f858 	bl	80016b4 <__errno>
 8002604:	2413      	movs	r4, #19
 8002606:	4606      	mov	r6, r0
 8002608:	2700      	movs	r7, #0
 800260a:	4620      	mov	r0, r4
 800260c:	4639      	mov	r1, r7
 800260e:	beab      	bkpt	0x00ab
 8002610:	4604      	mov	r4, r0
 8002612:	6034      	str	r4, [r6, #0]
 8002614:	4628      	mov	r0, r5
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002618 <_swiread>:
 8002618:	b530      	push	{r4, r5, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002620:	9203      	str	r2, [sp, #12]
 8002622:	2406      	movs	r4, #6
 8002624:	ad01      	add	r5, sp, #4
 8002626:	4620      	mov	r0, r4
 8002628:	4629      	mov	r1, r5
 800262a:	beab      	bkpt	0x00ab
 800262c:	4604      	mov	r4, r0
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff ffd4 	bl	80025dc <checkerror>
 8002634:	b005      	add	sp, #20
 8002636:	bd30      	pop	{r4, r5, pc}

08002638 <_read>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	460e      	mov	r6, r1
 800263c:	4615      	mov	r5, r2
 800263e:	f7ff ffb3 	bl	80025a8 <findslot>
 8002642:	4604      	mov	r4, r0
 8002644:	b930      	cbnz	r0, 8002654 <_read+0x1c>
 8002646:	f7ff f835 	bl	80016b4 <__errno>
 800264a:	2309      	movs	r3, #9
 800264c:	6003      	str	r3, [r0, #0]
 800264e:	f04f 30ff 	mov.w	r0, #4294967295
 8002652:	bd70      	pop	{r4, r5, r6, pc}
 8002654:	462a      	mov	r2, r5
 8002656:	4631      	mov	r1, r6
 8002658:	6800      	ldr	r0, [r0, #0]
 800265a:	f7ff ffdd 	bl	8002618 <_swiread>
 800265e:	1c43      	adds	r3, r0, #1
 8002660:	bf1f      	itttt	ne
 8002662:	6863      	ldrne	r3, [r4, #4]
 8002664:	1a28      	subne	r0, r5, r0
 8002666:	181b      	addne	r3, r3, r0
 8002668:	6063      	strne	r3, [r4, #4]
 800266a:	e7f2      	b.n	8002652 <_read+0x1a>

0800266c <_swilseek>:
 800266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800266e:	460c      	mov	r4, r1
 8002670:	4616      	mov	r6, r2
 8002672:	f7ff ff99 	bl	80025a8 <findslot>
 8002676:	4605      	mov	r5, r0
 8002678:	b940      	cbnz	r0, 800268c <_swilseek+0x20>
 800267a:	f7ff f81b 	bl	80016b4 <__errno>
 800267e:	2309      	movs	r3, #9
 8002680:	6003      	str	r3, [r0, #0]
 8002682:	f04f 34ff 	mov.w	r4, #4294967295
 8002686:	4620      	mov	r0, r4
 8002688:	b003      	add	sp, #12
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	2e02      	cmp	r6, #2
 800268e:	d903      	bls.n	8002698 <_swilseek+0x2c>
 8002690:	f7ff f810 	bl	80016b4 <__errno>
 8002694:	2316      	movs	r3, #22
 8002696:	e7f3      	b.n	8002680 <_swilseek+0x14>
 8002698:	2e01      	cmp	r6, #1
 800269a:	d112      	bne.n	80026c2 <_swilseek+0x56>
 800269c:	6843      	ldr	r3, [r0, #4]
 800269e:	18e4      	adds	r4, r4, r3
 80026a0:	d4f6      	bmi.n	8002690 <_swilseek+0x24>
 80026a2:	682b      	ldr	r3, [r5, #0]
 80026a4:	260a      	movs	r6, #10
 80026a6:	e9cd 3400 	strd	r3, r4, [sp]
 80026aa:	466f      	mov	r7, sp
 80026ac:	4630      	mov	r0, r6
 80026ae:	4639      	mov	r1, r7
 80026b0:	beab      	bkpt	0x00ab
 80026b2:	4606      	mov	r6, r0
 80026b4:	4630      	mov	r0, r6
 80026b6:	f7ff ff91 	bl	80025dc <checkerror>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	dbe1      	blt.n	8002682 <_swilseek+0x16>
 80026be:	606c      	str	r4, [r5, #4]
 80026c0:	e7e1      	b.n	8002686 <_swilseek+0x1a>
 80026c2:	2e02      	cmp	r6, #2
 80026c4:	d1ed      	bne.n	80026a2 <_swilseek+0x36>
 80026c6:	af02      	add	r7, sp, #8
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	f847 3d08 	str.w	r3, [r7, #-8]!
 80026ce:	260c      	movs	r6, #12
 80026d0:	4630      	mov	r0, r6
 80026d2:	4639      	mov	r1, r7
 80026d4:	beab      	bkpt	0x00ab
 80026d6:	4606      	mov	r6, r0
 80026d8:	4630      	mov	r0, r6
 80026da:	f7ff ff7f 	bl	80025dc <checkerror>
 80026de:	1c43      	adds	r3, r0, #1
 80026e0:	d0cf      	beq.n	8002682 <_swilseek+0x16>
 80026e2:	4404      	add	r4, r0
 80026e4:	e7dd      	b.n	80026a2 <_swilseek+0x36>

080026e6 <_lseek>:
 80026e6:	f7ff bfc1 	b.w	800266c <_swilseek>

080026ea <_swiwrite>:
 80026ea:	b530      	push	{r4, r5, lr}
 80026ec:	b085      	sub	sp, #20
 80026ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80026f2:	9203      	str	r2, [sp, #12]
 80026f4:	2405      	movs	r4, #5
 80026f6:	ad01      	add	r5, sp, #4
 80026f8:	4620      	mov	r0, r4
 80026fa:	4629      	mov	r1, r5
 80026fc:	beab      	bkpt	0x00ab
 80026fe:	4604      	mov	r4, r0
 8002700:	4620      	mov	r0, r4
 8002702:	f7ff ff6b 	bl	80025dc <checkerror>
 8002706:	b005      	add	sp, #20
 8002708:	bd30      	pop	{r4, r5, pc}

0800270a <_write>:
 800270a:	b570      	push	{r4, r5, r6, lr}
 800270c:	460e      	mov	r6, r1
 800270e:	4615      	mov	r5, r2
 8002710:	f7ff ff4a 	bl	80025a8 <findslot>
 8002714:	4604      	mov	r4, r0
 8002716:	b930      	cbnz	r0, 8002726 <_write+0x1c>
 8002718:	f7fe ffcc 	bl	80016b4 <__errno>
 800271c:	2309      	movs	r3, #9
 800271e:	6003      	str	r3, [r0, #0]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	bd70      	pop	{r4, r5, r6, pc}
 8002726:	462a      	mov	r2, r5
 8002728:	4631      	mov	r1, r6
 800272a:	6800      	ldr	r0, [r0, #0]
 800272c:	f7ff ffdd 	bl	80026ea <_swiwrite>
 8002730:	1e02      	subs	r2, r0, #0
 8002732:	dbf5      	blt.n	8002720 <_write+0x16>
 8002734:	6863      	ldr	r3, [r4, #4]
 8002736:	1aa8      	subs	r0, r5, r2
 8002738:	4403      	add	r3, r0
 800273a:	42aa      	cmp	r2, r5
 800273c:	6063      	str	r3, [r4, #4]
 800273e:	d1f1      	bne.n	8002724 <_write+0x1a>
 8002740:	2000      	movs	r0, #0
 8002742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002746:	f7ff bf59 	b.w	80025fc <error>

0800274a <_swiclose>:
 800274a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800274c:	ad02      	add	r5, sp, #8
 800274e:	2402      	movs	r4, #2
 8002750:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	beab      	bkpt	0x00ab
 800275a:	4604      	mov	r4, r0
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff ff3d 	bl	80025dc <checkerror>
 8002762:	b003      	add	sp, #12
 8002764:	bd30      	pop	{r4, r5, pc}
	...

08002768 <_close>:
 8002768:	b538      	push	{r3, r4, r5, lr}
 800276a:	4605      	mov	r5, r0
 800276c:	f7ff ff1c 	bl	80025a8 <findslot>
 8002770:	4604      	mov	r4, r0
 8002772:	b930      	cbnz	r0, 8002782 <_close+0x1a>
 8002774:	f7fe ff9e 	bl	80016b4 <__errno>
 8002778:	2309      	movs	r3, #9
 800277a:	6003      	str	r3, [r0, #0]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	bd38      	pop	{r3, r4, r5, pc}
 8002782:	3d01      	subs	r5, #1
 8002784:	2d01      	cmp	r5, #1
 8002786:	d809      	bhi.n	800279c <_close+0x34>
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <_close+0x48>)
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	429a      	cmp	r2, r3
 8002790:	d104      	bne.n	800279c <_close+0x34>
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	6003      	str	r3, [r0, #0]
 8002798:	2000      	movs	r0, #0
 800279a:	e7f1      	b.n	8002780 <_close+0x18>
 800279c:	6820      	ldr	r0, [r4, #0]
 800279e:	f7ff ffd4 	bl	800274a <_swiclose>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d1ec      	bne.n	8002780 <_close+0x18>
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	6023      	str	r3, [r4, #0]
 80027ac:	e7e8      	b.n	8002780 <_close+0x18>
 80027ae:	bf00      	nop
 80027b0:	200000a4 	.word	0x200000a4

080027b4 <_swistat>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	460c      	mov	r4, r1
 80027b8:	f7ff fef6 	bl	80025a8 <findslot>
 80027bc:	4606      	mov	r6, r0
 80027be:	b930      	cbnz	r0, 80027ce <_swistat+0x1a>
 80027c0:	f7fe ff78 	bl	80016b4 <__errno>
 80027c4:	2309      	movs	r3, #9
 80027c6:	6003      	str	r3, [r0, #0]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	6863      	ldr	r3, [r4, #4]
 80027d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d4:	6063      	str	r3, [r4, #4]
 80027d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027da:	6463      	str	r3, [r4, #68]	; 0x44
 80027dc:	250c      	movs	r5, #12
 80027de:	4628      	mov	r0, r5
 80027e0:	4631      	mov	r1, r6
 80027e2:	beab      	bkpt	0x00ab
 80027e4:	4605      	mov	r5, r0
 80027e6:	4628      	mov	r0, r5
 80027e8:	f7ff fef8 	bl	80025dc <checkerror>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	bf1c      	itt	ne
 80027f0:	6120      	strne	r0, [r4, #16]
 80027f2:	2000      	movne	r0, #0
 80027f4:	e7ea      	b.n	80027cc <_swistat+0x18>

080027f6 <_fstat>:
 80027f6:	460b      	mov	r3, r1
 80027f8:	b510      	push	{r4, lr}
 80027fa:	2100      	movs	r1, #0
 80027fc:	4604      	mov	r4, r0
 80027fe:	2258      	movs	r2, #88	; 0x58
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe ff81 	bl	8001708 <memset>
 8002806:	4601      	mov	r1, r0
 8002808:	4620      	mov	r0, r4
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800280e:	f7ff bfd1 	b.w	80027b4 <_swistat>

08002812 <_stat>:
 8002812:	b538      	push	{r3, r4, r5, lr}
 8002814:	460d      	mov	r5, r1
 8002816:	4604      	mov	r4, r0
 8002818:	2258      	movs	r2, #88	; 0x58
 800281a:	2100      	movs	r1, #0
 800281c:	4628      	mov	r0, r5
 800281e:	f7fe ff73 	bl	8001708 <memset>
 8002822:	4620      	mov	r0, r4
 8002824:	2100      	movs	r1, #0
 8002826:	f000 f811 	bl	800284c <_swiopen>
 800282a:	1c43      	adds	r3, r0, #1
 800282c:	4604      	mov	r4, r0
 800282e:	d00b      	beq.n	8002848 <_stat+0x36>
 8002830:	686b      	ldr	r3, [r5, #4]
 8002832:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002836:	606b      	str	r3, [r5, #4]
 8002838:	4629      	mov	r1, r5
 800283a:	f7ff ffbb 	bl	80027b4 <_swistat>
 800283e:	4605      	mov	r5, r0
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ff91 	bl	8002768 <_close>
 8002846:	462c      	mov	r4, r5
 8002848:	4620      	mov	r0, r4
 800284a:	bd38      	pop	{r3, r4, r5, pc}

0800284c <_swiopen>:
 800284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <_swiopen+0xb4>)
 8002852:	b096      	sub	sp, #88	; 0x58
 8002854:	4682      	mov	sl, r0
 8002856:	460e      	mov	r6, r1
 8002858:	2500      	movs	r5, #0
 800285a:	4698      	mov	r8, r3
 800285c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002860:	1c61      	adds	r1, r4, #1
 8002862:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002866:	d036      	beq.n	80028d6 <_swiopen+0x8a>
 8002868:	3501      	adds	r5, #1
 800286a:	2d14      	cmp	r5, #20
 800286c:	d1f6      	bne.n	800285c <_swiopen+0x10>
 800286e:	f7fe ff21 	bl	80016b4 <__errno>
 8002872:	2318      	movs	r3, #24
 8002874:	6003      	str	r3, [r0, #0]
 8002876:	f04f 34ff 	mov.w	r4, #4294967295
 800287a:	e03c      	b.n	80028f6 <_swiopen+0xaa>
 800287c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002880:	f240 6301 	movw	r3, #1537	; 0x601
 8002884:	07b2      	lsls	r2, r6, #30
 8002886:	bf48      	it	mi
 8002888:	f044 0402 	orrmi.w	r4, r4, #2
 800288c:	421e      	tst	r6, r3
 800288e:	bf18      	it	ne
 8002890:	f044 0404 	orrne.w	r4, r4, #4
 8002894:	0733      	lsls	r3, r6, #28
 8002896:	bf48      	it	mi
 8002898:	f024 0404 	bicmi.w	r4, r4, #4
 800289c:	4650      	mov	r0, sl
 800289e:	bf48      	it	mi
 80028a0:	f044 0408 	orrmi.w	r4, r4, #8
 80028a4:	f8cd a000 	str.w	sl, [sp]
 80028a8:	f7fd fd02 	bl	80002b0 <strlen>
 80028ac:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80028b0:	2401      	movs	r4, #1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4649      	mov	r1, r9
 80028b6:	beab      	bkpt	0x00ab
 80028b8:	4604      	mov	r4, r0
 80028ba:	2c00      	cmp	r4, #0
 80028bc:	db06      	blt.n	80028cc <_swiopen+0x80>
 80028be:	4447      	add	r7, r8
 80028c0:	2300      	movs	r3, #0
 80028c2:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	462c      	mov	r4, r5
 80028ca:	e014      	b.n	80028f6 <_swiopen+0xaa>
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fe95 	bl	80025fc <error>
 80028d2:	4604      	mov	r4, r0
 80028d4:	e00f      	b.n	80028f6 <_swiopen+0xaa>
 80028d6:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80028da:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028de:	46e9      	mov	r9, sp
 80028e0:	d1cc      	bne.n	800287c <_swiopen+0x30>
 80028e2:	4649      	mov	r1, r9
 80028e4:	4650      	mov	r0, sl
 80028e6:	f7ff ff94 	bl	8002812 <_stat>
 80028ea:	3001      	adds	r0, #1
 80028ec:	d0c6      	beq.n	800287c <_swiopen+0x30>
 80028ee:	f7fe fee1 	bl	80016b4 <__errno>
 80028f2:	2311      	movs	r3, #17
 80028f4:	6003      	str	r3, [r0, #0]
 80028f6:	4620      	mov	r0, r4
 80028f8:	b016      	add	sp, #88	; 0x58
 80028fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028fe:	bf00      	nop
 8002900:	200000a4 	.word	0x200000a4

08002904 <_get_semihosting_exts>:
 8002904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002908:	4607      	mov	r7, r0
 800290a:	4688      	mov	r8, r1
 800290c:	4829      	ldr	r0, [pc, #164]	; (80029b4 <_get_semihosting_exts+0xb0>)
 800290e:	2100      	movs	r1, #0
 8002910:	4615      	mov	r5, r2
 8002912:	f7ff ff9b 	bl	800284c <_swiopen>
 8002916:	462a      	mov	r2, r5
 8002918:	4604      	mov	r4, r0
 800291a:	2100      	movs	r1, #0
 800291c:	4638      	mov	r0, r7
 800291e:	f7fe fef3 	bl	8001708 <memset>
 8002922:	1c63      	adds	r3, r4, #1
 8002924:	d015      	beq.n	8002952 <_get_semihosting_exts+0x4e>
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe3e 	bl	80025a8 <findslot>
 800292c:	260c      	movs	r6, #12
 800292e:	4681      	mov	r9, r0
 8002930:	4630      	mov	r0, r6
 8002932:	4649      	mov	r1, r9
 8002934:	beab      	bkpt	0x00ab
 8002936:	4606      	mov	r6, r0
 8002938:	4630      	mov	r0, r6
 800293a:	f7ff fe4f 	bl	80025dc <checkerror>
 800293e:	2803      	cmp	r0, #3
 8002940:	dd02      	ble.n	8002948 <_get_semihosting_exts+0x44>
 8002942:	3803      	subs	r0, #3
 8002944:	42a8      	cmp	r0, r5
 8002946:	dc08      	bgt.n	800295a <_get_semihosting_exts+0x56>
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff ff0d 	bl	8002768 <_close>
 800294e:	f04f 34ff 	mov.w	r4, #4294967295
 8002952:	4620      	mov	r0, r4
 8002954:	b003      	add	sp, #12
 8002956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800295a:	2204      	movs	r2, #4
 800295c:	eb0d 0102 	add.w	r1, sp, r2
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff fe69 	bl	8002638 <_read>
 8002966:	2803      	cmp	r0, #3
 8002968:	ddee      	ble.n	8002948 <_get_semihosting_exts+0x44>
 800296a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800296e:	2b53      	cmp	r3, #83	; 0x53
 8002970:	d1ea      	bne.n	8002948 <_get_semihosting_exts+0x44>
 8002972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002976:	2b48      	cmp	r3, #72	; 0x48
 8002978:	d1e6      	bne.n	8002948 <_get_semihosting_exts+0x44>
 800297a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800297e:	2b46      	cmp	r3, #70	; 0x46
 8002980:	d1e2      	bne.n	8002948 <_get_semihosting_exts+0x44>
 8002982:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002986:	2b42      	cmp	r3, #66	; 0x42
 8002988:	d1de      	bne.n	8002948 <_get_semihosting_exts+0x44>
 800298a:	2201      	movs	r2, #1
 800298c:	4641      	mov	r1, r8
 800298e:	4620      	mov	r0, r4
 8002990:	f7ff fe6c 	bl	800266c <_swilseek>
 8002994:	2800      	cmp	r0, #0
 8002996:	dbd7      	blt.n	8002948 <_get_semihosting_exts+0x44>
 8002998:	462a      	mov	r2, r5
 800299a:	4639      	mov	r1, r7
 800299c:	4620      	mov	r0, r4
 800299e:	f7ff fe4b 	bl	8002638 <_read>
 80029a2:	4605      	mov	r5, r0
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff fedf 	bl	8002768 <_close>
 80029aa:	4628      	mov	r0, r5
 80029ac:	f7ff fe16 	bl	80025dc <checkerror>
 80029b0:	4604      	mov	r4, r0
 80029b2:	e7ce      	b.n	8002952 <_get_semihosting_exts+0x4e>
 80029b4:	08002cb3 	.word	0x08002cb3

080029b8 <initialise_semihosting_exts>:
 80029b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029ba:	4d0a      	ldr	r5, [pc, #40]	; (80029e4 <initialise_semihosting_exts+0x2c>)
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <initialise_semihosting_exts+0x30>)
 80029be:	2100      	movs	r1, #0
 80029c0:	2201      	movs	r2, #1
 80029c2:	a801      	add	r0, sp, #4
 80029c4:	6029      	str	r1, [r5, #0]
 80029c6:	6022      	str	r2, [r4, #0]
 80029c8:	f7ff ff9c 	bl	8002904 <_get_semihosting_exts>
 80029cc:	2800      	cmp	r0, #0
 80029ce:	dd07      	ble.n	80029e0 <initialise_semihosting_exts+0x28>
 80029d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029d4:	f003 0201 	and.w	r2, r3, #1
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	602a      	str	r2, [r5, #0]
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	b003      	add	sp, #12
 80029e2:	bd30      	pop	{r4, r5, pc}
 80029e4:	20000064 	.word	0x20000064
 80029e8:	20000068 	.word	0x20000068

080029ec <_has_ext_stdout_stderr>:
 80029ec:	b510      	push	{r4, lr}
 80029ee:	4c04      	ldr	r4, [pc, #16]	; (8002a00 <_has_ext_stdout_stderr+0x14>)
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	da01      	bge.n	80029fa <_has_ext_stdout_stderr+0xe>
 80029f6:	f7ff ffdf 	bl	80029b8 <initialise_semihosting_exts>
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	bf00      	nop
 8002a00:	20000068 	.word	0x20000068

08002a04 <initialise_monitor_handles>:
 8002a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002abc <initialise_monitor_handles+0xb8>
 8002a0e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a12:	2303      	movs	r3, #3
 8002a14:	2400      	movs	r4, #0
 8002a16:	9303      	str	r3, [sp, #12]
 8002a18:	f10d 0804 	add.w	r8, sp, #4
 8002a1c:	9402      	str	r4, [sp, #8]
 8002a1e:	2501      	movs	r5, #1
 8002a20:	4628      	mov	r0, r5
 8002a22:	4641      	mov	r1, r8
 8002a24:	beab      	bkpt	0x00ab
 8002a26:	4605      	mov	r5, r0
 8002a28:	4e20      	ldr	r6, [pc, #128]	; (8002aac <initialise_monitor_handles+0xa8>)
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <initialise_monitor_handles+0xac>)
 8002a2c:	6035      	str	r5, [r6, #0]
 8002a2e:	4623      	mov	r3, r4
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	4614      	mov	r4, r2
 8002a36:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	2b14      	cmp	r3, #20
 8002a3e:	d1fa      	bne.n	8002a36 <initialise_monitor_handles+0x32>
 8002a40:	f7ff ffd4 	bl	80029ec <_has_ext_stdout_stderr>
 8002a44:	4d1b      	ldr	r5, [pc, #108]	; (8002ab4 <initialise_monitor_handles+0xb0>)
 8002a46:	b1d0      	cbz	r0, 8002a7e <initialise_monitor_handles+0x7a>
 8002a48:	f04f 0a03 	mov.w	sl, #3
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a52:	2701      	movs	r7, #1
 8002a54:	f8cd a00c 	str.w	sl, [sp, #12]
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	beab      	bkpt	0x00ab
 8002a60:	4683      	mov	fp, r0
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <initialise_monitor_handles+0xb4>)
 8002a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a68:	f8c3 b000 	str.w	fp, [r3]
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002a72:	9302      	str	r3, [sp, #8]
 8002a74:	4638      	mov	r0, r7
 8002a76:	4641      	mov	r1, r8
 8002a78:	beab      	bkpt	0x00ab
 8002a7a:	4607      	mov	r7, r0
 8002a7c:	602f      	str	r7, [r5, #0]
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	bf02      	ittt	eq
 8002a84:	4b0c      	ldreq	r3, [pc, #48]	; (8002ab8 <initialise_monitor_handles+0xb4>)
 8002a86:	681b      	ldreq	r3, [r3, #0]
 8002a88:	602b      	streq	r3, [r5, #0]
 8002a8a:	6833      	ldr	r3, [r6, #0]
 8002a8c:	6023      	str	r3, [r4, #0]
 8002a8e:	2600      	movs	r6, #0
 8002a90:	6066      	str	r6, [r4, #4]
 8002a92:	f7ff ffab 	bl	80029ec <_has_ext_stdout_stderr>
 8002a96:	b130      	cbz	r0, 8002aa6 <initialise_monitor_handles+0xa2>
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <initialise_monitor_handles+0xb4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002aa6:	b005      	add	sp, #20
 8002aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aac:	2000009c 	.word	0x2000009c
 8002ab0:	200000a4 	.word	0x200000a4
 8002ab4:	20000098 	.word	0x20000098
 8002ab8:	200000a0 	.word	0x200000a0
 8002abc:	08002cc9 	.word	0x08002cc9

08002ac0 <_isatty>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	f7ff fd71 	bl	80025a8 <findslot>
 8002ac6:	2509      	movs	r5, #9
 8002ac8:	4604      	mov	r4, r0
 8002aca:	b920      	cbnz	r0, 8002ad6 <_isatty+0x16>
 8002acc:	f7fe fdf2 	bl	80016b4 <__errno>
 8002ad0:	6005      	str	r5, [r0, #0]
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	4621      	mov	r1, r4
 8002ada:	beab      	bkpt	0x00ab
 8002adc:	4604      	mov	r4, r0
 8002ade:	2c01      	cmp	r4, #1
 8002ae0:	d0f7      	beq.n	8002ad2 <_isatty+0x12>
 8002ae2:	f7fe fde7 	bl	80016b4 <__errno>
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	4606      	mov	r6, r0
 8002aea:	2513      	movs	r5, #19
 8002aec:	4628      	mov	r0, r5
 8002aee:	4621      	mov	r1, r4
 8002af0:	beab      	bkpt	0x00ab
 8002af2:	4605      	mov	r5, r0
 8002af4:	6035      	str	r5, [r6, #0]
 8002af6:	e7ec      	b.n	8002ad2 <_isatty+0x12>

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
