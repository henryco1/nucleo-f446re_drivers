
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a24  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000be8  08000be8  00010be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  4 .ARM          00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bf4  08000bfc  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bfc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bfc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010bfc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001884  00000000  00000000  00010c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000046c  00000000  00000000  000124b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00012920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00012a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000201f  00000000  00000000  00012b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001200  00000000  00000000  00014b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009110  00000000  00000000  00015d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ee87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000448  00000000  00000000  0001ef04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000bd0 	.word	0x08000bd0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000bd0 	.word	0x08000bd0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
#include <string.h>

/*
 * PUPD LED control
 */
void delay(int value) {
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e002      	b.n	8000228 <delay+0x14>
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f8      	bcc.n	8000222 <delay+0xe>
}
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <SPI2_GPIO_Init>:
 * PB12 = SPI2_NSS
 * PB13	= SPI2_SCLK
 * PB15 = SPI2_MOSI
 * Alt Func mode = 5
 */
void SPI2_GPIO_Init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOB_Handle;
	memset(&GPIOB_Handle, 0 , sizeof(GPIO_Handle_t));
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	220c      	movs	r2, #12
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fcb9 	bl	8000bc0 <memset>
	GPIOB_Handle.pGPIOx = GPIOB;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <SPI2_GPIO_Init+0x58>)
 8000250:	607b      	str	r3, [r7, #4]

	GPIOB_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinAltFuncMode = 5;
 8000256:	2305      	movs	r3, #5
 8000258:	737b      	strb	r3, [r7, #13]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSH_PULL;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	72fb      	strb	r3, [r7, #11]
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]

	// NSS
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000266:	230c      	movs	r3, #12
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f991 	bl	8000594 <GPIO_Init>

	// SCLK
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000272:	230d      	movs	r3, #13
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f98b 	bl	8000594 <GPIO_Init>

	// MOSI
	GPIOB_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800027e:	230f      	movs	r3, #15
 8000280:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_Handle);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f985 	bl	8000594 <GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020400 	.word	0x40020400

08000298 <SPI2_Init>:

void SPI2_Init(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;
	memset(&SPI2_Handle, 0 , sizeof(SPI_Handle_t));
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	220c      	movs	r2, #12
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc8b 	bl	8000bc0 <memset>
	SPI2_Handle.pSPIx = SPI2;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SPI2_Init+0x44>)
 80002ac:	607b      	str	r3, [r7, #4]

	SPI2_Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_DUPLEX;
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_DataFrameFormat = SPI_DATA_FRAME_8_BIT;
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPI_Config.SPI_SoftwareSlaveManagement = SPI_SOFTWARE_SLAVE_DISABLE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	73bb      	strb	r3, [r7, #14]
	SPI2_Handle.SPI_Config.SPI_SerialClkSpeed = SPI_SCLK_FPCLK_16;
 80002ba:	2303      	movs	r3, #3
 80002bc:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80002be:	2300      	movs	r3, #0
 80002c0:	737b      	strb	r3, [r7, #13]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002c6:	2301      	movs	r3, #1
 80002c8:	723b      	strb	r3, [r7, #8]

	SPI_Init(&SPI2_Handle);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fb7d 	bl	80009cc <SPI_Init>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40003800 	.word	0x40003800

080002e0 <GPIO_Button_Init>:

void GPIO_Button_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Button_Handle;
	memset(&GPIO_Button_Handle, 0 , sizeof(GPIO_Handle_t));
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	220c      	movs	r2, #12
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fc67 	bl	8000bc0 <memset>
	GPIO_Button_Handle.pGPIOx = GPIOC;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <GPIO_Button_Init+0x38>)
 80002f4:	607b      	str	r3, [r7, #4]

	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80002f6:	230d      	movs	r3, #13
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002fa:	2300      	movs	r3, #0
 80002fc:	727b      	strb	r3, [r7, #9]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002fe:	2302      	movs	r3, #2
 8000300:	72bb      	strb	r3, [r7, #10]
	GPIO_Button_Handle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 8000302:	2300      	movs	r3, #0
 8000304:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Button_Handle);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f943 	bl	8000594 <GPIO_Init>
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020800 	.word	0x40020800

0800031c <main>:

int main(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
	char data[] = "Hello World";
 8000322:	4a1f      	ldr	r2, [pc, #124]	; (80003a0 <main+0x84>)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	ca07      	ldmia	r2, {r0, r1, r2}
 8000328:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data_size = strlen(data);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff68 	bl	8000204 <strlen>
 8000334:	4603      	mov	r3, r0
 8000336:	b2db      	uxtb	r3, r3
 8000338:	70fb      	strb	r3, [r7, #3]

	// initialization
	GPIO_Button_Init();
 800033a:	f7ff ffd1 	bl	80002e0 <GPIO_Button_Init>
	SPI2_GPIO_Init();
 800033e:	f7ff ff7d 	bl	800023c <SPI2_GPIO_Init>
	SPI2_Init();
 8000342:	f7ff ffa9 	bl	8000298 <SPI2_Init>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000346:	2101      	movs	r1, #1
 8000348:	4816      	ldr	r0, [pc, #88]	; (80003a4 <main+0x88>)
 800034a:	f000 fbf9 	bl	8000b40 <SPI_SSOEConfig>

	while (1) {
		// wait till button press
		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 800034e:	bf00      	nop
 8000350:	210d      	movs	r1, #13
 8000352:	4815      	ldr	r0, [pc, #84]	; (80003a8 <main+0x8c>)
 8000354:	f000 fab8 	bl	80008c8 <GPIO_ReadFromInputPin>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f8      	beq.n	8000350 <main+0x34>
		delay(500000/2);
 800035e:	4813      	ldr	r0, [pc, #76]	; (80003ac <main+0x90>)
 8000360:	f7ff ff58 	bl	8000214 <delay>

		SPI_PeripheralControl(SPI2, ENABLE);
 8000364:	2101      	movs	r1, #1
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <main+0x88>)
 8000368:	f000 fbce 	bl	8000b08 <SPI_PeripheralControl>

		// slave needs to know how much data is being sent. The slave script expect 1 byte of msg length then msg data
		SPI_SendData(SPI2, &data_size, 1);
 800036c:	1cfb      	adds	r3, r7, #3
 800036e:	2201      	movs	r2, #1
 8000370:	4619      	mov	r1, r3
 8000372:	480c      	ldr	r0, [pc, #48]	; (80003a4 <main+0x88>)
 8000374:	f000 fb81 	bl	8000a7a <SPI_SendData>
		SPI_SendData(SPI2, (uint8_t*)data, data_size);
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	461a      	mov	r2, r3
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4808      	ldr	r0, [pc, #32]	; (80003a4 <main+0x88>)
 8000382:	f000 fb7a 	bl	8000a7a <SPI_SendData>

		while(SPI_GetFlagStatus(SPI2, SPI_STATUS_BUSY_FLAG));
 8000386:	bf00      	nop
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	4806      	ldr	r0, [pc, #24]	; (80003a4 <main+0x88>)
 800038c:	f000 fba8 	bl	8000ae0 <SPI_GetFlagStatus>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1f8      	bne.n	8000388 <main+0x6c>

		SPI_PeripheralControl(SPI2, DISABLE);
 8000396:	2100      	movs	r1, #0
 8000398:	4802      	ldr	r0, [pc, #8]	; (80003a4 <main+0x88>)
 800039a:	f000 fbb5 	bl	8000b08 <SPI_PeripheralControl>
		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {}
 800039e:	e7d6      	b.n	800034e <main+0x32>
 80003a0:	08000be8 	.word	0x08000be8
 80003a4:	40003800 	.word	0x40003800
 80003a8:	40020800 	.word	0x40020800
 80003ac:	0003d090 	.word	0x0003d090

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490e      	ldr	r1, [pc, #56]	; (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0b      	ldr	r4, [pc, #44]	; (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003da:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 fbcb 	bl	8000b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ff9b 	bl	800031c <main>

080003e6 <LoopForever>:

LoopForever:
    b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	08000bfc 	.word	0x08000bfc
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	2000001c 	.word	0x2000001c

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d157      	bne.n	80004c6 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a55      	ldr	r2, [pc, #340]	; (8000570 <GPIO_PeriClockControl+0x16c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 800041e:	4b55      	ldr	r3, [pc, #340]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a54      	ldr	r2, [pc, #336]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 800042a:	e09b      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a52      	ldr	r2, [pc, #328]	; (8000578 <GPIO_PeriClockControl+0x174>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 8000434:	4b4f      	ldr	r3, [pc, #316]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a4e      	ldr	r2, [pc, #312]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e090      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a4d      	ldr	r2, [pc, #308]	; (800057c <GPIO_PeriClockControl+0x178>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 800044a:	4b4a      	ldr	r3, [pc, #296]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a49      	ldr	r2, [pc, #292]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e085      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a49      	ldr	r2, [pc, #292]	; (8000580 <GPIO_PeriClockControl+0x17c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 8000460:	4b44      	ldr	r3, [pc, #272]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a43      	ldr	r2, [pc, #268]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e07a      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a44      	ldr	r2, [pc, #272]	; (8000584 <GPIO_PeriClockControl+0x180>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 8000476:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a3e      	ldr	r2, [pc, #248]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e06f      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a40      	ldr	r2, [pc, #256]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 800048c:	4b39      	ldr	r3, [pc, #228]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a38      	ldr	r2, [pc, #224]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e064      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a3b      	ldr	r2, [pc, #236]	; (800058c <GPIO_PeriClockControl+0x188>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 80004a2:	4b34      	ldr	r3, [pc, #208]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a33      	ldr	r2, [pc, #204]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e059      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a37      	ldr	r2, [pc, #220]	; (8000590 <GPIO_PeriClockControl+0x18c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d155      	bne.n	8000564 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a2d      	ldr	r2, [pc, #180]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e04e      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a29      	ldr	r2, [pc, #164]	; (8000570 <GPIO_PeriClockControl+0x16c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d105      	bne.n	80004da <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 80004ce:	4b29      	ldr	r3, [pc, #164]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004d8:	e044      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a26      	ldr	r2, [pc, #152]	; (8000578 <GPIO_PeriClockControl+0x174>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d105      	bne.n	80004ee <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4b23      	ldr	r3, [pc, #140]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ec:	e03a      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a22      	ldr	r2, [pc, #136]	; (800057c <GPIO_PeriClockControl+0x178>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d105      	bne.n	8000502 <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <GPIO_PeriClockControl+0x170>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000500:	e030      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a1e      	ldr	r2, [pc, #120]	; (8000580 <GPIO_PeriClockControl+0x17c>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d105      	bne.n	8000516 <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000510:	2200      	movs	r2, #0
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000514:	e026      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <GPIO_PeriClockControl+0x180>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d105      	bne.n	800052a <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000524:	2200      	movs	r2, #0
 8000526:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000528:	e01c      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d105      	bne.n	800053e <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000538:	2200      	movs	r2, #0
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800053c:	e012      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <GPIO_PeriClockControl+0x188>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d105      	bne.n	8000552 <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800054c:	2200      	movs	r2, #0
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000550:	e008      	b.n	8000564 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <GPIO_PeriClockControl+0x18c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d104      	bne.n	8000564 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <GPIO_PeriClockControl+0x170>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <GPIO_PeriClockControl+0x170>)
 8000560:	2200      	movs	r2, #0
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40020000 	.word	0x40020000
 8000574:	40023800 	.word	0x40023800
 8000578:	40020400 	.word	0x40020400
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00
 8000584:	40021000 	.word	0x40021000
 8000588:	40021400 	.word	0x40021400
 800058c:	40021800 	.word	0x40021800
 8000590:	40021c00 	.word	0x40021c00

08000594 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff2c 	bl	8000404 <GPIO_PeriClockControl>

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d822      	bhi.n	80005fa <GPIO_Init+0x66>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2103      	movs	r1, #3
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e0c3      	b.n	8000782 <GPIO_Init+0x1ee>
	}
	else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_FALLING_EDGE) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d117      	bne.n	8000632 <GPIO_Init+0x9e>
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	4b4a      	ldr	r3, [pc, #296]	; (800072c <GPIO_Init+0x198>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	4611      	mov	r1, r2
 8000612:	4a46      	ldr	r2, [pc, #280]	; (800072c <GPIO_Init+0x198>)
 8000614:	430b      	orrs	r3, r1
 8000616:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000618:	4b44      	ldr	r3, [pc, #272]	; (800072c <GPIO_Init+0x198>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7912      	ldrb	r2, [r2, #4]
 8000620:	4611      	mov	r1, r2
 8000622:	2201      	movs	r2, #1
 8000624:	408a      	lsls	r2, r1
 8000626:	43d2      	mvns	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a40      	ldr	r2, [pc, #256]	; (800072c <GPIO_Init+0x198>)
 800062c:	400b      	ands	r3, r1
 800062e:	6093      	str	r3, [r2, #8]
 8000630:	e036      	b.n	80006a0 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d117      	bne.n	800066a <GPIO_Init+0xd6>
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063a:	4b3c      	ldr	r3, [pc, #240]	; (800072c <GPIO_Init+0x198>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	4611      	mov	r1, r2
 800064a:	4a38      	ldr	r2, [pc, #224]	; (800072c <GPIO_Init+0x198>)
 800064c:	430b      	orrs	r3, r1
 800064e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000650:	4b36      	ldr	r3, [pc, #216]	; (800072c <GPIO_Init+0x198>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	7912      	ldrb	r2, [r2, #4]
 8000658:	4611      	mov	r1, r2
 800065a:	2201      	movs	r2, #1
 800065c:	408a      	lsls	r2, r1
 800065e:	43d2      	mvns	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a32      	ldr	r2, [pc, #200]	; (800072c <GPIO_Init+0x198>)
 8000664:	430b      	orrs	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
 8000668:	e01a      	b.n	80006a0 <GPIO_Init+0x10c>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INPUT_RISING_EDGE_FALLING_EDGE) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b06      	cmp	r3, #6
 8000670:	d116      	bne.n	80006a0 <GPIO_Init+0x10c>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <GPIO_Init+0x198>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	4611      	mov	r1, r2
 8000682:	4a2a      	ldr	r2, [pc, #168]	; (800072c <GPIO_Init+0x198>)
 8000684:	430b      	orrs	r3, r1
 8000686:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <GPIO_Init+0x198>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	43d2      	mvns	r2, r2
 8000698:	4611      	mov	r1, r2
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <GPIO_Init+0x198>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t reg_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	74fb      	strb	r3, [r7, #19]
		uint8_t pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	74bb      	strb	r3, [r7, #18]
		SYSCFG->EXTICR[reg_index] &= ~(GPIO_BASEADDR_TO_EXTI_CONFIG(pGPIOHandle->pGPIOx) << (4 * pin_offset));
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <GPIO_Init+0x19c>)
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	3302      	adds	r3, #2
 80006b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	491c      	ldr	r1, [pc, #112]	; (8000734 <GPIO_Init+0x1a0>)
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d046      	beq.n	8000754 <GPIO_Init+0x1c0>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	491b      	ldr	r1, [pc, #108]	; (8000738 <GPIO_Init+0x1a4>)
 80006cc:	428b      	cmp	r3, r1
 80006ce:	d02b      	beq.n	8000728 <GPIO_Init+0x194>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4919      	ldr	r1, [pc, #100]	; (800073c <GPIO_Init+0x1a8>)
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d024      	beq.n	8000724 <GPIO_Init+0x190>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4918      	ldr	r1, [pc, #96]	; (8000740 <GPIO_Init+0x1ac>)
 80006e0:	428b      	cmp	r3, r1
 80006e2:	d01d      	beq.n	8000720 <GPIO_Init+0x18c>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4916      	ldr	r1, [pc, #88]	; (8000744 <GPIO_Init+0x1b0>)
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d016      	beq.n	800071c <GPIO_Init+0x188>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4915      	ldr	r1, [pc, #84]	; (8000748 <GPIO_Init+0x1b4>)
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d00f      	beq.n	8000718 <GPIO_Init+0x184>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4913      	ldr	r1, [pc, #76]	; (800074c <GPIO_Init+0x1b8>)
 80006fe:	428b      	cmp	r3, r1
 8000700:	d008      	beq.n	8000714 <GPIO_Init+0x180>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4912      	ldr	r1, [pc, #72]	; (8000750 <GPIO_Init+0x1bc>)
 8000708:	428b      	cmp	r3, r1
 800070a:	d101      	bne.n	8000710 <GPIO_Init+0x17c>
 800070c:	2307      	movs	r3, #7
 800070e:	e022      	b.n	8000756 <GPIO_Init+0x1c2>
 8000710:	2300      	movs	r3, #0
 8000712:	e020      	b.n	8000756 <GPIO_Init+0x1c2>
 8000714:	2306      	movs	r3, #6
 8000716:	e01e      	b.n	8000756 <GPIO_Init+0x1c2>
 8000718:	2305      	movs	r3, #5
 800071a:	e01c      	b.n	8000756 <GPIO_Init+0x1c2>
 800071c:	2304      	movs	r3, #4
 800071e:	e01a      	b.n	8000756 <GPIO_Init+0x1c2>
 8000720:	2303      	movs	r3, #3
 8000722:	e018      	b.n	8000756 <GPIO_Init+0x1c2>
 8000724:	2302      	movs	r3, #2
 8000726:	e016      	b.n	8000756 <GPIO_Init+0x1c2>
 8000728:	2301      	movs	r3, #1
 800072a:	e014      	b.n	8000756 <GPIO_Init+0x1c2>
 800072c:	40013c00 	.word	0x40013c00
 8000730:	40013800 	.word	0x40013800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	40020800 	.word	0x40020800
 8000740:	40020c00 	.word	0x40020c00
 8000744:	40021000 	.word	0x40021000
 8000748:	40021400 	.word	0x40021400
 800074c:	40021800 	.word	0x40021800
 8000750:	40021c00 	.word	0x40021c00
 8000754:	2300      	movs	r3, #0
 8000756:	7cb9      	ldrb	r1, [r7, #18]
 8000758:	0089      	lsls	r1, r1, #2
 800075a:	408b      	lsls	r3, r1
 800075c:	43db      	mvns	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	4957      	ldr	r1, [pc, #348]	; (80008c0 <GPIO_Init+0x32c>)
 8000762:	7cfb      	ldrb	r3, [r7, #19]
 8000764:	4002      	ands	r2, r0
 8000766:	3302      	adds	r3, #2
 8000768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800076c:	4b55      	ldr	r3, [pc, #340]	; (80008c4 <GPIO_Init+0x330>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	4611      	mov	r1, r2
 800077c:	4a51      	ldr	r2, [pc, #324]	; (80008c4 <GPIO_Init+0x330>)
 800077e:	430b      	orrs	r3, r1
 8000780:	6013      	str	r3, [r2, #0]
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	2103      	movs	r1, #3
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6899      	ldr	r1, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	430a      	orrs	r2, r1
 80007c0:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	2103      	movs	r1, #3
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	400a      	ands	r2, r1
 80007f4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68d9      	ldr	r1, [r3, #12]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	430a      	orrs	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7a1b      	ldrb	r3, [r3, #8]
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	2301      	movs	r3, #1
 8000828:	408b      	lsls	r3, r1
 800082a:	43db      	mvns	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	400a      	ands	r2, r1
 8000834:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6859      	ldr	r1, [r3, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	430a      	orrs	r2, r1
 8000844:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode == GPIO_MODE_ALTFN) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7a5b      	ldrb	r3, [r3, #9]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d132      	bne.n	80008b8 <GPIO_Init+0x324>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	08db      	lsrs	r3, r3, #3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	60fb      	str	r3, [r7, #12]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	210f      	movs	r1, #15
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4011      	ands	r1, r2
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	3208      	adds	r2, #8
 800088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	3208      	adds	r2, #8
 8000896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	4619      	mov	r1, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4311      	orrs	r1, r2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	3208      	adds	r2, #8
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40013c00 	.word	0x40013c00

080008c8 <GPIO_ReadFromInputPin>:
 * desc: reads the input pin of a GPIOx peripheral (specified by pinNumber)
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: 2 byte pin register data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	uint8_t out;
	out = (uint8_t)((pGPIOx->IDR >> pinNumber) & 1);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	fa22 f303 	lsr.w	r3, r2, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
	return out;
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SPI_PeriClockControl>:
 * desc: enables or disables the clock for a given SPI peripheral
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d12b      	bne.n	800095e <SPI_PeriClockControl+0x6a>
		if (pSPIx == SPI1) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <SPI_PeriClockControl+0xc4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN;
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a2a      	ldr	r2, [pc, #168]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pSPIx == SPI4) {
			SPI4_PCLK_DI;
		}
	}
}
 800091a:	e047      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI2) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <SPI_PeriClockControl+0xcc>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN;
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a24      	ldr	r2, [pc, #144]	; (80009bc <SPI_PeriClockControl+0xc8>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000930:	e03c      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI3) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <SPI_PeriClockControl+0xd0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <SPI_PeriClockControl+0xc8>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000946:	e031      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI4) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <SPI_PeriClockControl+0xd4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d12d      	bne.n	80009ac <SPI_PeriClockControl+0xb8>
			SPI4_PCLK_EN;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	4a19      	ldr	r2, [pc, #100]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800095a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800095c:	e026      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		if (pSPIx == SPI1) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <SPI_PeriClockControl+0xc4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d105      	bne.n	8000972 <SPI_PeriClockControl+0x7e>
			SPI1_PCLK_DI;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <SPI_PeriClockControl+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000970:	e01c      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI2) {
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <SPI_PeriClockControl+0xcc>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d105      	bne.n	8000986 <SPI_PeriClockControl+0x92>
			SPI2_PCLK_DI;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <SPI_PeriClockControl+0xc8>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000980:	2200      	movs	r2, #0
 8000982:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000984:	e012      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI3) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <SPI_PeriClockControl+0xd0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d105      	bne.n	800099a <SPI_PeriClockControl+0xa6>
			SPI3_PCLK_DI;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <SPI_PeriClockControl+0xc8>)
 8000994:	2200      	movs	r2, #0
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000998:	e008      	b.n	80009ac <SPI_PeriClockControl+0xb8>
		else if (pSPIx == SPI4) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SPI_PeriClockControl+0xd4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d104      	bne.n	80009ac <SPI_PeriClockControl+0xb8>
			SPI4_PCLK_DI;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SPI_PeriClockControl+0xc8>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SPI_PeriClockControl+0xc8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	645a      	str	r2, [r3, #68]	; 0x44
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40013000 	.word	0x40013000
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40003800 	.word	0x40003800
 80009c4:	40003c00 	.word	0x40003c00
 80009c8:	40013400 	.word	0x40013400

080009cc <SPI_Init>:

// Peripheral Init
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

	uint32_t reg_data = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff88 	bl	80008f4 <SPI_PeriClockControl>

	// 1. configure device mode
	reg_data |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]

	// 2. init spi bus configuration
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_DUPLEX) {
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	795b      	ldrb	r3, [r3, #5]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d104      	bne.n	8000a04 <SPI_Init+0x38>
		// clear bidirectional mode
		reg_data &= ~(1 << SPI_CR1_BIDIMODE);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e010      	b.n	8000a26 <SPI_Init+0x5a>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	795b      	ldrb	r3, [r3, #5]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d104      	bne.n	8000a16 <SPI_Init+0x4a>
		// enable bidirectional mode
		// keep RXONLY clear when bidirectional mode is active
		reg_data |= (1 << SPI_CR1_BIDIMODE);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	e007      	b.n	8000a26 <SPI_Init+0x5a>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d103      	bne.n	8000a26 <SPI_Init+0x5a>
		// RXONLY and BIDIMODE can't be set at the same time, so configure RXONLY
		// handle RXONLY
//		reg_data &= ~(1 << SPI_CR1_BIDIMODE);
		reg_data |= (1 << SPI_CR1_RXONLY);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a24:	60fb      	str	r3, [r7, #12]
	}

	// 3. set clock speed
	reg_data |= (pSPIHandle->SPI_Config.SPI_SerialClkSpeed << SPI_CR1_BR);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	799b      	ldrb	r3, [r3, #6]
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

	// 4. set data frame format
	reg_data |= (pSPIHandle->SPI_Config.SPI_DataFrameFormat << SPI_CR1_DFF);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	79db      	ldrb	r3, [r3, #7]
 8000a38:	02db      	lsls	r3, r3, #11
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]

	// 5. set cpol
	reg_data |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7a1b      	ldrb	r3, [r3, #8]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

	// 6. set cpha
	reg_data |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7a5b      	ldrb	r3, [r3, #9]
 8000a54:	461a      	mov	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

	// 7. configure software slave management
	reg_data |= (pSPIHandle->SPI_Config.SPI_SoftwareSlaveManagement<< SPI_CR1_SSM);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7a9b      	ldrb	r3, [r3, #10]
 8000a60:	025b      	lsls	r3, r3, #9
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = reg_data;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <SPI_SendData>:
 * input1: SPI register struct mapped to the SPI base address
 * input2: a buffer for holding information that goes into the txbuffer
 * input3: the size of the transmission in bytes
 * output: none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
	while (len > 0) {
 8000a86:	e024      	b.n	8000ad2 <SPI_SendData+0x58>
		// 1. wait until TXE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_STATUS_TXE_FLAG) == FLAG_RESET);
 8000a88:	bf00      	nop
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f000 f827 	bl	8000ae0 <SPI_GetFlagStatus>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f8      	beq.n	8000a8a <SPI_SendData+0x10>

		// 2. check the DFF register
		// 3. then load the data into the data register
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00b      	beq.n	8000abc <SPI_SendData+0x42>
			// 16 bits
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	60da      	str	r2, [r3, #12]
			len =- 2;
 8000aae:	f06f 0301 	mvn.w	r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	e00a      	b.n	8000ad2 <SPI_SendData+0x58>
		} else {
			// 8 bits
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	60da      	str	r2, [r3, #12]
			len--;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
	while (len > 0) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1d7      	bne.n	8000a88 <SPI_SendData+0xe>
		}


	}
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SPI_GetFlagStatus>:
 * desc: checks the status of a user specified register
 * input1: SPI register struct ideally mapped to the status register
 * input2: an uint32_t status to check for
 * output: none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag_name) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flag_name) return FLAG_SET;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SPI_GetFlagStatus+0x1a>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <SPI_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SPI_PeripheralControl>:
 * desc: enables the SPI peripheral for data transmission
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d106      	bne.n	8000b28 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000b26:	e005      	b.n	8000b34 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SPI_SSOEConfig>:
 *		configuration
 * input1: SPI register struct mapped to the SPI base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t enable_flag) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d106      	bne.n	8000b60 <SPI_SSOEConfig+0x20>
		pSPIx->CR1 |= (1 << SPI_CR2_SSOE);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f043 0204 	orr.w	r2, r3, #4
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000b5e:	e005      	b.n	8000b6c <SPI_SSOEConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR2_SSOE);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f023 0204 	bic.w	r2, r3, #4
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <__libc_init_array>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	4e0d      	ldr	r6, [pc, #52]	; (8000bb0 <__libc_init_array+0x38>)
 8000b7c:	4c0d      	ldr	r4, [pc, #52]	; (8000bb4 <__libc_init_array+0x3c>)
 8000b7e:	1ba4      	subs	r4, r4, r6
 8000b80:	10a4      	asrs	r4, r4, #2
 8000b82:	2500      	movs	r5, #0
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	d109      	bne.n	8000b9c <__libc_init_array+0x24>
 8000b88:	4e0b      	ldr	r6, [pc, #44]	; (8000bb8 <__libc_init_array+0x40>)
 8000b8a:	4c0c      	ldr	r4, [pc, #48]	; (8000bbc <__libc_init_array+0x44>)
 8000b8c:	f000 f820 	bl	8000bd0 <_init>
 8000b90:	1ba4      	subs	r4, r4, r6
 8000b92:	10a4      	asrs	r4, r4, #2
 8000b94:	2500      	movs	r5, #0
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d105      	bne.n	8000ba6 <__libc_init_array+0x2e>
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ba0:	4798      	blx	r3
 8000ba2:	3501      	adds	r5, #1
 8000ba4:	e7ee      	b.n	8000b84 <__libc_init_array+0xc>
 8000ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000baa:	4798      	blx	r3
 8000bac:	3501      	adds	r5, #1
 8000bae:	e7f2      	b.n	8000b96 <__libc_init_array+0x1e>
 8000bb0:	08000bf4 	.word	0x08000bf4
 8000bb4:	08000bf4 	.word	0x08000bf4
 8000bb8:	08000bf4 	.word	0x08000bf4
 8000bbc:	08000bf8 	.word	0x08000bf8

08000bc0 <memset>:
 8000bc0:	4402      	add	r2, r0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d100      	bne.n	8000bca <memset+0xa>
 8000bc8:	4770      	bx	lr
 8000bca:	f803 1b01 	strb.w	r1, [r3], #1
 8000bce:	e7f9      	b.n	8000bc4 <memset+0x4>

08000bd0 <_init>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr

08000bdc <_fini>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr
