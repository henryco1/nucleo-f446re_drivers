
stm32-f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004bc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000680  08000688  00010688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000680  08000680  00010688  2**0
                  CONTENTS
  4 .ARM          00000000  08000680  08000680  00010688  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000680  08000688  00010688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000680  08000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000684  08000684  00010684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000688  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000688  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010688  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007fd  00000000  00000000  000106b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ff  00000000  00000000  00010eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b8  00000000  00000000  000110b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  00011170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001312  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a20  00000000  00000000  00012512  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000052d1  00000000  00000000  00012f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00018280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000668 	.word	0x08000668

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000668 	.word	0x08000668

08000204 <delay>:
#include "stm32f446xx.h"

/*
 * PUPD LED control
 */
void delay(void) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	0007a11f 	.word	0x0007a11f

08000230 <main>:

int main(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioLED;
	gpioLED.pGPIOx = GPIOA;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0x40>)
 8000238:	607b      	str	r3, [r7, #4]
	gpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800023a:	2305      	movs	r3, #5
 800023c:	723b      	strb	r3, [r7, #8]
	gpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	gpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000242:	2302      	movs	r3, #2
 8000244:	72bb      	strb	r3, [r7, #10]
	gpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSH_PULL;
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]
	gpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	4807      	ldr	r0, [pc, #28]	; (8000270 <main+0x40>)
 8000252:	f000 f839 	bl	80002c8 <GPIO_PeriClockControl>
	GPIO_Init(&gpioLED);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f8fd 	bl	8000458 <GPIO_Init>

	while(1) {
		GPIO_ToggleOutputPin(GPIOA, gpioLED.GPIO_PinConfig.GPIO_PinNumber);
 800025e:	7a3b      	ldrb	r3, [r7, #8]
 8000260:	4619      	mov	r1, r3
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <main+0x40>)
 8000264:	f000 f9c7 	bl	80005f6 <GPIO_ToggleOutputPin>
		delay();
 8000268:	f7ff ffcc 	bl	8000204 <delay>
		GPIO_ToggleOutputPin(GPIOA, gpioLED.GPIO_PinConfig.GPIO_PinNumber);
 800026c:	e7f7      	b.n	800025e <main+0x2e>
 800026e:	bf00      	nop
 8000270:	40020000 	.word	0x40020000

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490e      	ldr	r1, [pc, #56]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0b      	ldr	r4, [pc, #44]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800029e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f9bd 	bl	8000620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffc3 	bl	8000230 <main>

080002aa <LoopForever>:

LoopForever:
    b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000688 	.word	0x08000688
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <GPIO_PeriClockControl>:
 * desc: enables or disables the clock for a given GPIO peripheral
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: an ENABLE/DISABLE macro
 * output: none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable_flag) {
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
	if (enable_flag == ENABLE) {
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d157      	bne.n	800038a <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a55      	ldr	r2, [pc, #340]	; (8000434 <GPIO_PeriClockControl+0x16c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 80002e2:	4b55      	ldr	r3, [pc, #340]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a54      	ldr	r2, [pc, #336]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI;
		}
	}
}
 80002ee:	e09b      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a52      	ldr	r2, [pc, #328]	; (800043c <GPIO_PeriClockControl+0x174>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 80002f8:	4b4f      	ldr	r3, [pc, #316]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a4e      	ldr	r2, [pc, #312]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000304:	e090      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a4d      	ldr	r2, [pc, #308]	; (8000440 <GPIO_PeriClockControl+0x178>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 800030e:	4b4a      	ldr	r3, [pc, #296]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a49      	ldr	r2, [pc, #292]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031a:	e085      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a49      	ldr	r2, [pc, #292]	; (8000444 <GPIO_PeriClockControl+0x17c>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 8000324:	4b44      	ldr	r3, [pc, #272]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a43      	ldr	r2, [pc, #268]	; (8000438 <GPIO_PeriClockControl+0x170>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000330:	e07a      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a44      	ldr	r2, [pc, #272]	; (8000448 <GPIO_PeriClockControl+0x180>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 800033a:	4b3f      	ldr	r3, [pc, #252]	; (8000438 <GPIO_PeriClockControl+0x170>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a3e      	ldr	r2, [pc, #248]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000346:	e06f      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a40      	ldr	r2, [pc, #256]	; (800044c <GPIO_PeriClockControl+0x184>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 8000350:	4b39      	ldr	r3, [pc, #228]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000354:	4a38      	ldr	r2, [pc, #224]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035c:	e064      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a3b      	ldr	r2, [pc, #236]	; (8000450 <GPIO_PeriClockControl+0x188>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 8000366:	4b34      	ldr	r3, [pc, #208]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a33      	ldr	r2, [pc, #204]	; (8000438 <GPIO_PeriClockControl+0x170>)
 800036c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000372:	e059      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a37      	ldr	r2, [pc, #220]	; (8000454 <GPIO_PeriClockControl+0x18c>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d155      	bne.n	8000428 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_EN;
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <GPIO_PeriClockControl+0x170>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a2d      	ldr	r2, [pc, #180]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000388:	e04e      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		if (pGPIOx == GPIOA) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a29      	ldr	r2, [pc, #164]	; (8000434 <GPIO_PeriClockControl+0x16c>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d105      	bne.n	800039e <GPIO_PeriClockControl+0xd6>
			GPIOA_PCLK_DI;
 8000392:	4b29      	ldr	r3, [pc, #164]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000398:	2200      	movs	r2, #0
 800039a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800039c:	e044      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOB) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a26      	ldr	r2, [pc, #152]	; (800043c <GPIO_PeriClockControl+0x174>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d105      	bne.n	80003b2 <GPIO_PeriClockControl+0xea>
			GPIOB_PCLK_DI;
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4b23      	ldr	r3, [pc, #140]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80003b0:	e03a      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOC) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a22      	ldr	r2, [pc, #136]	; (8000440 <GPIO_PeriClockControl+0x178>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d105      	bne.n	80003c6 <GPIO_PeriClockControl+0xfe>
			GPIOC_PCLK_DI;
 80003ba:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80003c4:	e030      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOD) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a1e      	ldr	r2, [pc, #120]	; (8000444 <GPIO_PeriClockControl+0x17c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d105      	bne.n	80003da <GPIO_PeriClockControl+0x112>
			GPIOD_PCLK_DI;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80003d8:	e026      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOE) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a1a      	ldr	r2, [pc, #104]	; (8000448 <GPIO_PeriClockControl+0x180>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d105      	bne.n	80003ee <GPIO_PeriClockControl+0x126>
			GPIOE_PCLK_DI;
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80003ec:	e01c      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOF) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a16      	ldr	r2, [pc, #88]	; (800044c <GPIO_PeriClockControl+0x184>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d105      	bne.n	8000402 <GPIO_PeriClockControl+0x13a>
			GPIOF_PCLK_DI;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <GPIO_PeriClockControl+0x170>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000400:	e012      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOG) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <GPIO_PeriClockControl+0x188>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d105      	bne.n	8000416 <GPIO_PeriClockControl+0x14e>
			GPIOG_PCLK_DI;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <GPIO_PeriClockControl+0x170>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000410:	2200      	movs	r2, #0
 8000412:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000414:	e008      	b.n	8000428 <GPIO_PeriClockControl+0x160>
		else if (pGPIOx == GPIOH) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <GPIO_PeriClockControl+0x18c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d104      	bne.n	8000428 <GPIO_PeriClockControl+0x160>
			GPIOH_PCLK_DI;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <GPIO_PeriClockControl+0x170>)
 8000424:	2200      	movs	r2, #0
 8000426:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40020000 	.word	0x40020000
 8000438:	40023800 	.word	0x40023800
 800043c:	40020400 	.word	0x40020400
 8000440:	40020800 	.word	0x40020800
 8000444:	40020c00 	.word	0x40020c00
 8000448:	40021000 	.word	0x40021000
 800044c:	40021400 	.word	0x40021400
 8000450:	40021800 	.word	0x40021800
 8000454:	40021c00 	.word	0x40021c00

08000458 <GPIO_Init>:
 * GPIO Initialization Function
 * desc: initializes a GPIOx peripheral
 * input1: GPIO handle struct containing config and address information
 * output: none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000458:	b480      	push	{r7}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	uint32_t curr_reg = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

	//configure gpio pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d821      	bhi.n	80004b0 <GPIO_Init+0x58>
		curr_reg = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	461a      	mov	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	2103      	movs	r1, #3
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	4619      	mov	r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
		// pGPIOHandle->pGPIOx->MODER &= ~(3 << pGPIOHandle->GPIO_PnConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER |= curr_reg;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
		curr_reg = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
	else {
		// TODO: handle interrupt mode later
	}

	// configure gpio speed
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	799b      	ldrb	r3, [r3, #6]
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	689a      	ldr	r2, [r3, #8]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	400a      	ands	r2, r1
 80004de:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= curr_reg;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6899      	ldr	r1, [r3, #8]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	430a      	orrs	r2, r1
 80004ee:	609a      	str	r2, [r3, #8]
	curr_reg = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

	// configure pupd settings
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	79db      	ldrb	r3, [r3, #7]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	400a      	ands	r2, r1
 8000522:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= curr_reg;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68d9      	ldr	r1, [r3, #12]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	430a      	orrs	r2, r1
 8000532:	60da      	str	r2, [r3, #12]
	curr_reg = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]

	// configure op type
	curr_reg = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7a1b      	ldrb	r3, [r3, #8]
 800053c:	461a      	mov	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	400a      	ands	r2, r1
 8000566:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= curr_reg;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6859      	ldr	r1, [r3, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	430a      	orrs	r2, r1
 8000576:	605a      	str	r2, [r3, #4]
	curr_reg = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]

	// configure alt func
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode == GPIO_MODE_ALTFN) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7a5b      	ldrb	r3, [r3, #9]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d132      	bne.n	80005ea <GPIO_Init+0x192>
		// configure the alt function registers
		// since the alt register is handled as an array, we need to know the index and the pin within the index.
		uint32_t alt_index, pin_offset;
		alt_index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	613b      	str	r3, [r7, #16]
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[alt_index] &= ~(0xF << (4 * pin_offset));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	3208      	adds	r2, #8
 80005a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	210f      	movs	r1, #15
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4011      	ands	r1, r2
 80005b8:	693a      	ldr	r2, [r7, #16]
 80005ba:	3208      	adds	r2, #8
 80005bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[alt_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_offset));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	3208      	adds	r2, #8
 80005c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	4619      	mov	r1, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4311      	orrs	r1, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	3208      	adds	r2, #8
 80005e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <GPIO_ToggleOutputPin>:
 * desc: this function toggles a GPIOx output pin
 * input1: GPIO register struct mapped to the GPIO base address
 * input2: pin number
 * output: none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	78fa      	ldrb	r2, [r7, #3]
 8000608:	2101      	movs	r1, #1
 800060a:	fa01 f202 	lsl.w	r2, r1, r2
 800060e:	405a      	eors	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	615a      	str	r2, [r3, #20]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <__libc_init_array>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	4e0d      	ldr	r6, [pc, #52]	; (8000658 <__libc_init_array+0x38>)
 8000624:	4c0d      	ldr	r4, [pc, #52]	; (800065c <__libc_init_array+0x3c>)
 8000626:	1ba4      	subs	r4, r4, r6
 8000628:	10a4      	asrs	r4, r4, #2
 800062a:	2500      	movs	r5, #0
 800062c:	42a5      	cmp	r5, r4
 800062e:	d109      	bne.n	8000644 <__libc_init_array+0x24>
 8000630:	4e0b      	ldr	r6, [pc, #44]	; (8000660 <__libc_init_array+0x40>)
 8000632:	4c0c      	ldr	r4, [pc, #48]	; (8000664 <__libc_init_array+0x44>)
 8000634:	f000 f818 	bl	8000668 <_init>
 8000638:	1ba4      	subs	r4, r4, r6
 800063a:	10a4      	asrs	r4, r4, #2
 800063c:	2500      	movs	r5, #0
 800063e:	42a5      	cmp	r5, r4
 8000640:	d105      	bne.n	800064e <__libc_init_array+0x2e>
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000648:	4798      	blx	r3
 800064a:	3501      	adds	r5, #1
 800064c:	e7ee      	b.n	800062c <__libc_init_array+0xc>
 800064e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000652:	4798      	blx	r3
 8000654:	3501      	adds	r5, #1
 8000656:	e7f2      	b.n	800063e <__libc_init_array+0x1e>
 8000658:	08000680 	.word	0x08000680
 800065c:	08000680 	.word	0x08000680
 8000660:	08000680 	.word	0x08000680
 8000664:	08000684 	.word	0x08000684

08000668 <_init>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr

08000674 <_fini>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr
